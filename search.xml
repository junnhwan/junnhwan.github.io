<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2025/09/20/hello-world/</url>
    <content><![CDATA[<p>This is my first blog. </p>
<p>Share my programming learning journey and life insights here.</p>
<p><img src="/2025/09/20/hello-world/1.jpg" alt="hello-world"></p>
]]></content>
  </entry>
  <entry>
    <title>sky-takeout-day02-note</title>
    <url>/2025/10/11/sky-takeout-day02-note/</url>
    <content><![CDATA[<h1 id="Sky-takeout-Day02"><a href="#Sky-takeout-Day02" class="headerlink" title="Sky-takeout  Day02"></a>Sky-takeout  Day02</h1><blockquote>
<p>【前言】<br>Day02 的 Task 是实现最基础的 CRUD 功能，流程：先做需求分析，再开始编写代码，然后进行功能测试（接口文档、前后端联调）以及代码完善。<br>首先，通过员工管理模块的新增、分页查询、启用禁用账号、编辑这四大功能，来了解简单的 CRUD 如何写。<br>其次，因为菜品分类管理模块的逻辑与员工管理的几乎一样，所以就直接导入了，想巩固的话可以自己手敲一遍，加深印象。</p>
</blockquote>
<span id="more"></span>

<h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ul>
<li>新增员工</li>
<li>员工分页查询</li>
<li>启用禁用员工账号</li>
<li>编辑员工</li>
<li>导入菜品分类管理模块代码</li>
</ul>
<hr>
<h2 id="1-新增员工"><a href="#1-新增员工" class="headerlink" title="1. 新增员工"></a>1. 新增员工</h2><h3 id="Q1：用DTO还是Entity实体类？"><a href="#Q1：用DTO还是Entity实体类？" class="headerlink" title="Q1：用DTO还是Entity实体类？"></a>Q1：用DTO还是Entity实体类？</h3><p><strong>一般来说</strong></p>
<ul>
<li><p>当前端提交的数据和实体类中对应的<strong>属性差别比较大</strong>时，建议使用 DTO 来封装数据</p>
</li>
<li><p><strong>Entity 管数据库，DTO 管接口</strong>。通过分层隔离，Entity 聚焦业务模型和持久化，DTO 聚焦 API 契约和传输效率</p>
<table>
<thead>
<tr>
<th>维度</th>
<th>Entity（实体类）</th>
<th>DTO（数据传输对象）</th>
</tr>
</thead>
<tbody><tr>
<td><strong>核心职责</strong></td>
<td>映射数据库表结构，承载业务逻辑</td>
<td>封装接口参数 &#x2F; 响应，实现跨层数据传输</td>
</tr>
<tr>
<td><strong>所属层级</strong></td>
<td>持久层 &#x2F; 领域层（与数据库直接交互）</td>
<td>应用层 &#x2F; 表现层（Controller、Service 间传输）</td>
</tr>
<tr>
<td><strong>数据库关联</strong></td>
<td>强关联（字段与表结构一一对应）</td>
<td>无关联（结构由 API 需求决定）</td>
</tr>
<tr>
<td><strong>设计重点</strong></td>
<td>数据完整性、业务规则（如 ORM 注解、非空约束）</td>
<td>API 契约稳定性、传输性能（仅含必要字段）</td>
</tr>
</tbody></table>
  <img src="/2025/10/11/sky-takeout-day02-note/image-20251010153653291.png" alt="image-20251010153653291" style="zoom:50%;"></li>
</ul>
<h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p><strong>EmployeeController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存员工信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> employeeDTO 员工信息DTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回统一的Result封装对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;保存(新增)员工信息&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> EmployeeDTO employeeDTO)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;保存(新增)员工信息：&#123;&#125;&quot;</span>, employeeDTO);</span><br><span class="line">        <span class="comment">// 调用service层的方法来处理保存逻辑</span></span><br><span class="line">        employeeService.save(employeeDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>EmployeeServiceImpl.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存员工信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employeeDTO 员工信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(EmployeeDTO employeeDTO)</span> &#123;</span><br><span class="line">    <span class="comment">// 先将 DTO 转换为实体对象, 再进行保存, 用spring中的BeanUtils的copyProperties方法</span></span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    BeanUtils.copyProperties(employeeDTO, employee);</span><br><span class="line">    <span class="comment">// 再将实体类的剩余属性设置好</span></span><br><span class="line">    employee.setStatus(StatusConstant.ENABLE); <span class="comment">// 设置默认状态为启用</span></span><br><span class="line">    employee.setPassword(DigestUtils.md5DigestAsHex(<span class="string">&quot;123456&quot;</span>.getBytes())); <span class="comment">// 设置初始密码123456, 需要进行MD5加密</span></span><br><span class="line">    employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employee.setCreateUser(<span class="number">10L</span>); <span class="comment">// <span class="doctag">TODO:</span> 这里先写死，后面改为当前登录用户的id</span></span><br><span class="line">    employee.setUpdateUser(<span class="number">10L</span>); <span class="comment">// <span class="doctag">TODO:</span> 这里先写死，后面改为当前登录用户的id</span></span><br><span class="line">    <span class="comment">// 最后调用Mapper层的方法进行保存</span></span><br><span class="line">    employeeMapper.insert(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>EmployeeMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入员工信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> employee 员工对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into employee (username, password, name, phone, sex, id_number, status, create_time, update_time, create_user, update_user)&quot; +</span></span><br><span class="line"><span class="meta">            &quot;values&quot; +</span></span><br><span class="line"><span class="meta">            &quot;(#&#123;username&#125;, #&#123;password&#125;, #&#123;name&#125;, #&#123;phone&#125;, #&#123;sex&#125;, #&#123;idNumber&#125;, #&#123;status&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;, #&#123;createUser&#125;, #&#123;updateUser&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure>



<h3 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h3><p>首先先设置一下全局token, 另外过期时间可以设置久一点(在application.yml中jwt部分设置), 避免总是手动设置.</p>
<img src="/2025/10/11/sky-takeout-day02-note/../../my-note/typora/my-sky-takeout-note/day02.assets/image-20251010161839592.png" alt="image-20251010161839592" style="zoom: 25%;">
<img src="/2025/10/11/sky-takeout-day02-note/image-20251010161821040.png" alt="image-20251010161821040" style="zoom:25%;">

<p>测试成功,返回201<br><img src="/2025/10/11/sky-takeout-day02-note/image-20251010162002733.png" alt="image-20251010162002733" style="zoom: 25%;"></p>
<h3 id="代码功能完善"><a href="#代码功能完善" class="headerlink" title="代码功能完善"></a>代码功能完善</h3><p>当前存在问题:</p>
<ul>
<li>用户名有unique约束, 若重复会抛异常, 异常还没处理</li>
<li>新增员工时的登录用户id还是定死的</li>
</ul>
<img src="/2025/10/11/sky-takeout-day02-note/image-20251010162153307.png" alt="image-20251010162153307" style="zoom:25%;">

<h4 id="解决用户名重复异常的问题"><a href="#解决用户名重复异常的问题" class="headerlink" title="解决用户名重复异常的问题"></a>解决用户名重复异常的问题</h4><p><img src="/2025/10/11/sky-takeout-day02-note/image-20251010163541987.png" alt="image-20251010163541987"></p>
<p>要将抛出的 <strong>SQLIntegrityConstraintViolationException</strong> 异常,加入全局异常处理器中, 返回异常消息给前端, 保证友好性.<br>在GlobalExceptionHandler中添加: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 捕获SQL异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ex 捕获到的异常对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回封装的异常信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span>&#123;</span><br><span class="line">    <span class="comment">// Duplicate entry &#x27;hwan1&#x27; for key &#x27;employee.idx_username&#x27;;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> ex.getMessage();</span><br><span class="line">    <span class="keyword">if</span>(message.contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">        String[] split = message.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> split[<span class="number">2</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> username + MessageConstant.ALREADY_EXIST;</span><br><span class="line">        <span class="keyword">return</span> Result.error(msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(MessageConstant.UNKNOWN_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="解决设置当前用户id的问题"><a href="#解决设置当前用户id的问题" class="headerlink" title="解决设置当前用户id的问题"></a>解决设置当前用户id的问题</h4><ul>
<li><p>JWT 工作流程图</p>
  <img src="/2025/10/11/sky-takeout-day02-note/image-20251010164604620.png" alt="image-20251010164604620" style="zoom: 50%;">


</li>
<li><p>通过Jwt令牌中携带的用户id来<strong>获取</strong>新增员工时需要设置的当前用户属性</p>
  <img src="/2025/10/11/sky-takeout-day02-note/image-20251010164716025.png" alt="image-20251010164716025" style="zoom:50%;"></li>
</ul>
<h4 id="Q2-如何传递拦截器获取的用户id给service"><a href="#Q2-如何传递拦截器获取的用户id给service" class="headerlink" title="Q2: 如何传递拦截器获取的用户id给service?"></a>Q2: 如何传递拦截器获取的用户id给service?</h4><ul>
<li><p>解析出登录员工 id 后，如何<strong>传递</strong>给 Service 的 save 方法？</p>
<p>  ​     &#x3D;&gt;使用<strong>ThreadLocal</strong></p>
<p>  <strong>介绍：</strong></p>
<p>  ThreadLocal 并不是一个 Thread，而是 Thread 的局部变量。<br>  ThreadLocal 为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问。</p>
<p>  <strong>常用方法：</strong></p>
<ul>
<li><p>public void set(T value)     设置当前线程的线程局部变量的值</p>
</li>
<li><p>public T get()         返回当前线程所对应的线程局部变量的值</p>
</li>
<li><p>public void remove()        移除当前线程的线程局部变量</p>
</li>
</ul>
</li>
<li><p>项目中在<strong>BaseContext工具类</strong>已经封装了对应方法</p>
  <img src="/2025/10/11/sky-takeout-day02-note/image-20251010165529633.png" alt="image-20251010165529633" style="zoom: 67%;">


</li>
<li><p>解决流程图</p>
  <img src="/2025/10/11/sky-takeout-day02-note/image-20251010165222324.png" alt="image-20251010165222324" style="zoom:50%;">


</li>
<li><p>在拦截器Interceptor, 将用户id存入ThreadLocal中</p>
  <img src="/2025/10/11/sky-takeout-day02-note/image-20251010170118979.png" alt="image-20251010170118979" style="zoom: 25%;"></li>
<li><p>在Service里, 从ThreadLocal中获取当前登录用户的id</p>
  <img src="/2025/10/11/sky-takeout-day02-note/image-20251010170259654.png" alt="image-20251010170259654" style="zoom: 25%;"></li>
</ul>
<h2 id="2-员工分页查询"><a href="#2-员工分页查询" class="headerlink" title="2. 员工分页查询"></a>2. 员工分页查询</h2><h3 id="接口分析"><a href="#接口分析" class="headerlink" title="接口分析"></a>接口分析</h3><p><strong>接口设计</strong><br><img src="/2025/10/11/sky-takeout-day02-note/image-20251010184016854.png" alt="image-20251010184016854" style="zoom: 50%;"></p>
<p><strong>注意事项：</strong></p>
<ul>
<li>请求参数类型为 Query，不是 json 格式提交，在路径后直接拼接。&#x2F;admin&#x2F;employee&#x2F;page?name &#x3D; zhangsan</li>
<li>返回数据中 records 数组中使用 Employee 实体类对属性进行封装。</li>
</ul>
<h3 id="代码编写-1"><a href="#代码编写-1" class="headerlink" title="代码编写"></a>代码编写</h3><p>用到了<strong>分页插件PageHelper</strong></p>
<blockquote>
<p><strong>PageHelper 基本原理</strong></p>
<p>PageHelper 是基于 MyBatis 的分页插件，通过<strong>拦截 SQL 执行过程</strong>动态添加分页逻辑（如 MySQL 的 <code>LIMIT</code>），并自动统计总记录数。其核心优势是：</p>
<ul>
<li>无需修改 SQL，只需在代码中添加分页参数；</li>
<li>支持多数据库（MySQL、Oracle 等）；</li>
<li>通过 <code>ThreadLocal</code> 存储分页参数，保证线程安全。</li>
</ul>
</blockquote>
<p>定义<strong>分页查询DTO</strong>和<strong>分页结果封装</strong></p>
<img src="/2025/10/11/sky-takeout-day02-note/image-20251010195314831.png" alt="image-20251010195314831" style="zoom: 50%;">



<p><strong>EmployeeController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工分页查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employeePageQueryDTO 员工分页查询DTO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回统一的Result封装对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;员工分页查询&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;PageResult&gt; <span class="title function_">page</span><span class="params">(EmployeePageQueryDTO employeePageQueryDTO)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;员工分页查询：参数&#123;&#125;&quot;</span>, employeePageQueryDTO);</span><br><span class="line">    <span class="type">PageResult</span> <span class="variable">pageResult</span> <span class="operator">=</span> employeeService.pageQuery(employeePageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>EmployeeServiceImpl.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工分页查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employeePageQueryDTO 分页查询信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 分页结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">pageQuery</span><span class="params">(EmployeePageQueryDTO employeePageQueryDTO)</span> &#123;</span><br><span class="line">    PageHelper.startPage(employeePageQueryDTO.getPage(), employeePageQueryDTO.getPageSize());</span><br><span class="line">    Page&lt;Employee&gt; page = employeeMapper.pageQuery(employeePageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(page.getTotal(), page.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>EmployeeMapper.xml</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;pageQuery&quot;</span> resultType=<span class="string">&quot;com.sky.entity.Employee&quot;</span>&gt;</span><br><span class="line">    select * from employee</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and name like <span class="title function_">concat</span><span class="params">(<span class="string">&#x27;%&#x27;</span>, #&#123;name&#125;, <span class="string">&#x27;%&#x27;</span>)</span></span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">    order by update_time desc</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>



<h3 id="解决分页查询时间格式问题"><a href="#解决分页查询时间格式问题" class="headerlink" title="解决分页查询时间格式问题"></a>解决分页查询时间格式问题</h3><p>调试时发现时间格式有问题：<br><img src="/2025/10/11/sky-takeout-day02-note/image-20251010191630040.png" alt="image-20251010191630040" style="zoom:50%;"></p>
<p>有两种解决方案</p>
<ul>
<li><p>方式一：在属性加上注解，可行，但是需要在每个时间属性上都要加上该注解，使用较麻烦，不能全局处理。</p>
</li>
<li><p>方式二：在 WebMvcConfiguration 中扩展 SpringMVC 的消息转换器，统一对日期类型进行格式处理。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;扩展消息转换器...&quot;</span>);</span><br><span class="line">    <span class="comment">// 创建消息转换器对象</span></span><br><span class="line">    <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">    <span class="comment">// 设置对象转换器，底层使用Jackson将Java对象转为json</span></span><br><span class="line">    converter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">    <span class="comment">// 将上面的消息转换器对象追加到mvc框架的转换器集合中</span></span><br><span class="line">    <span class="comment">// 这里前面的 0 是优先级，设置在最前面，优先使用我们定义的转换器</span></span><br><span class="line">    converters.add(<span class="number">0</span>, converter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>JacksonObjectMapper</strong>中定义了<strong>时间格式</strong>：<br><img src="/2025/10/11/sky-takeout-day02-note/image-20251010194037109.png" alt="image-20251010194037109" style="zoom:33%;"></p>
<h2 id="3-启用禁用员工账号"><a href="#3-启用禁用员工账号" class="headerlink" title="3. 启用禁用员工账号"></a>3. 启用禁用员工账号</h2><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><img src="/2025/10/11/sky-takeout-day02-note/image-20251010203227868.png" alt="image-20251010203227868" style="zoom: 50%;">

<p>1). 路径参数携带状态值。</p>
<p>2). 同时，把 id 传递过去，明确对哪个用户进行操作。</p>
<p>3). 返回数据 code 状态是必须，其它是非必须。</p>
<h3 id="代码编写-2"><a href="#代码编写-2" class="headerlink" title="代码编写"></a>代码编写</h3><p><strong>EmployeeController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启用禁用员工账号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status 状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id     员工id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回统一的Result封装对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;启用禁用员工账号&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Void&gt; <span class="title function_">startOrStop</span><span class="params">(<span class="meta">@PathVariable</span> Integer status, Long id)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;启用禁用员工账号：status=&#123;&#125;, id=&#123;&#125;&quot;</span>, status, id);</span><br><span class="line">    employeeService.startOrStop(status, id);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>EmployeeServiceImpl.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启用或禁用员工账号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status 状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id     员工id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startOrStop</span><span class="params">(Integer status, Long id)</span> &#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> Employee.builder()</span><br><span class="line">            .id(id)</span><br><span class="line">            .status(status)</span><br><span class="line">            .build();</span><br><span class="line">    employeeMapper.updateById(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>EmployeeMapper.xml</strong></p>
<p>根据传入的<code>Employee</code>对象中的非空字段，选择性地更新<code>employee</code>表中的对应记录。它的核心特点是<strong>只更新需要修改的字段</strong>，避免不必要的数据库操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;update id=<span class="string">&quot;updateById&quot;</span> parameterType=<span class="string">&quot;employee&quot;</span>&gt;</span><br><span class="line">    update employee</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null&quot;</span>&gt;name = #&#123;name&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;username != null&quot;</span>&gt;username = #&#123;username&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;password != null&quot;</span>&gt;password = #&#123;password&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;phone != null&quot;</span>&gt;phone = #&#123;phone&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;sex != null&quot;</span>&gt;sex = #&#123;sex&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;idNumber != null&quot;</span>&gt;id_Number = #&#123;idNumber&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;updateTime != null&quot;</span>&gt;update_Time = #&#123;updateTime&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;updateUser != null&quot;</span>&gt;update_User = #&#123;updateUser&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;status != null&quot;</span>&gt;status = #&#123;status&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">    <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里这个功能的实现虽然只需要修改状态值，但是可以把其他需要根据主键动态修改的属性都加上，方便后续复用</p>
</blockquote>
<h2 id="4-编辑员工"><a href="#4-编辑员工" class="headerlink" title="4. 编辑员工"></a>4. 编辑员工</h2><h3 id="接口设计-1"><a href="#接口设计-1" class="headerlink" title="接口设计"></a>接口设计</h3><p><strong>编辑员工的页面原型</strong>：</p>
<p>在员工管理列表页面点击 “编辑” 按钮，跳转到编辑页面，在编辑页面回显员工信息并进行修改，最后点击 “保存” 按钮完成编辑操作。</p>
<p>注：点击修改时，数据应该正常回显到修改页面。<br><img src="/2025/10/11/sky-takeout-day02-note/image-20251011192703614.png" alt="image-20251011192703614" style="zoom:50%;"></p>
<p>根据上述原型图分析，编辑员工功能涉及到两个接口：</p>
<ul>
<li>根据 id 查询员工信息</li>
<li>编辑员工信息</li>
</ul>
<p>设计接口如下：<br><img src="/2025/10/11/sky-takeout-day02-note/../../my-note/typora/my-sky-takeout-note/day02.assets/image-20251011192924595.png" alt="image-20251011192924595" style="zoom:50%;"><br><img src="/2025/10/11/sky-takeout-day02-note/image-20251011192944602.png" alt="image-20251011192944602" style="zoom:50%;"></p>
<h3 id="代码编写-3"><a href="#代码编写-3" class="headerlink" title="代码编写"></a>代码编写</h3><p>以下代码包含了：根据id查询员工信息回显给前端、修改员工信息</p>
<ul>
<li>（在实现 <strong>启用禁用员工账号</strong> 功能时，已实现 employeeMapper.update(employee)，在此不需写 Mapper 层代码。）</li>
</ul>
<p><strong>EmployeeController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询员工信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 员工id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回统一的Result封装对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id查询员工信息&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;根据id查询员工信息：id=&#123;&#125;&quot;</span>, id);</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success(employee);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改员工信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employeeDTO 员工信息DTO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回统一的Result封装对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;修改员工信息&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Void&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> EmployeeDTO employeeDTO)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;修改员工信息：&#123;&#125;&quot;</span>, employeeDTO);</span><br><span class="line">    employeeService.update(employeeDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>EmployeeServiceImpl.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询员工信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 员工id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 员工信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Employee <span class="title function_">getById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeMapper.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (employee == <span class="literal">null</span>) &#123;  <span class="comment">// 如果没有查询到员工信息, 则抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccountNotFoundException</span>(MessageConstant.ACCOUNT_NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> employee; <span class="comment">// 返回员工信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(EmployeeDTO employeeDTO)</span> &#123;</span><br><span class="line">    <span class="comment">// 传来的是DTO对象， 要将 DTO 转换为实体对象</span></span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    BeanUtils.copyProperties(employeeDTO, employee);</span><br><span class="line">    <span class="comment">// 设置修改相关属性，修改时间和修改人</span></span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateUser(BaseContext.getCurrentId());</span><br><span class="line">    employeeMapper.updateById(employee);  <span class="comment">// 更新员工信息 (前面在写启用禁用员工账号时，在Mapper中已经配置了根据id动态更新)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>EmployeeMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 员工id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 员工对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from employee where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">Employee <span class="title function_">getById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure>



<h3 id="功能测试-1"><a href="#功能测试-1" class="headerlink" title="功能测试"></a>功能测试</h3><ul>
<li><p>1）根据id查询员工并回显信息：返回员工信息json数据</p>
  <img src="/2025/10/11/sky-takeout-day02-note/image-20251011194957644.png" alt="image-20251011194957644" style="zoom: 25%;">
</li>
<li><p>2）修改信息</p>
  <img src="/2025/10/11/sky-takeout-day02-note/image-20251011200650746.png" alt="image-20251011200650746" style="zoom: 33%;"></li>
</ul>
<h2 id="5-导入菜品分类管理模块"><a href="#5-导入菜品分类管理模块" class="headerlink" title="5. 导入菜品分类管理模块"></a>5. 导入菜品分类管理模块</h2><h3 id="产品原型分析"><a href="#产品原型分析" class="headerlink" title="产品原型分析"></a>产品原型分析</h3><p>后台系统中可以管理<strong>分类信息</strong>，分类包括<strong>两种类型</strong>，分别是 <strong>菜品分类</strong> 和 <strong>套餐分类</strong> 。</p>
<p>下面以分析 <strong>菜品分类</strong> 相关功能来举例， 套餐的类似。</p>
<ul>
<li><p><strong>新增菜品分类：</strong> 当我们在后台系统中添加菜品时需要选择一个菜品分类，在移动端也会按照菜品分类来展示对应的菜品。</p>
</li>
<li><p><strong>菜品分类分页查询：</strong> 系统中的分类很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。</p>
</li>
<li><p><strong>根据 id 删除菜品分类：</strong> 在分类管理列表页面，可以对某个分类进行删除操作。需要注意的是***<u>当分类关联了菜品或者套餐时，此分类不允许删除。</u>***</p>
</li>
<li><p><strong>修改菜品分类：</strong> 在分类管理列表页面点击修改按钮，弹出修改窗口，在修改窗口回显分类信息并进行修改，最后点击确定按钮完成修改操作。</p>
</li>
<li><p><strong>启用禁用菜品分类：</strong> 在分类管理列表页面，可以对某个分类进行启用或者禁用操作。</p>
</li>
<li><p><strong>分类类型查询：</strong> 当点击分类类型下拉框时，从数据库中查询所有的菜品分类数据进行展示。</p>
</li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>导入时如果想避免看到一堆红的报错，就按照Mapper &#x3D;》Servie &#x3D;》 Controller的顺序来导入；</li>
<li>因为在删除分类等分类相关业务时，会设计到 Setmeal 和 Dish ，要判断分类地下是否还挂有菜品和套餐，所以这里也需要导入SetmealMapper和DishMapper</li>
<li>其次，因为这些代码是我们直接拷贝进来的，可能不会自动编译，保险起见最好在 maven 那里 compile 手动编译一下，防止报错</li>
<li><strong>业务规则：</strong><ul>
<li>分类名称必须是唯一的</li>
<li>分类按照类型可以分为菜品分类和套餐分类</li>
<li>新添加的分类状态默认为“禁用”，<ul>
<li>为什么？&#x3D;》如果默认是启用的话，新增分类时，该分类下是空的，在用户端显示是空的，没用意义，为了避免这种情况，直接把默认状态设为禁用即可）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="代码导入"><a href="#代码导入" class="headerlink" title="代码导入"></a>代码导入</h3><p><strong>CategoryController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.controller.admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sky.dto.CategoryDTO;</span><br><span class="line"><span class="keyword">import</span> com.sky.dto.CategoryPageQueryDTO;</span><br><span class="line"><span class="keyword">import</span> com.sky.entity.Category;</span><br><span class="line"><span class="keyword">import</span> com.sky.result.PageResult;</span><br><span class="line"><span class="keyword">import</span> com.sky.result.Result;</span><br><span class="line"><span class="keyword">import</span> com.sky.service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分类管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/category&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;分类相关接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryDTO 分类信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增分类&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> CategoryDTO categoryDTO)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;新增分类：&#123;&#125;&quot;</span>, categoryDTO);</span><br><span class="line">        categoryService.save(categoryDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分类分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryPageQueryDTO  分页查询参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;分类分页查询&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;PageResult&gt; <span class="title function_">page</span><span class="params">(CategoryPageQueryDTO categoryPageQueryDTO)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;分页查询：&#123;&#125;&quot;</span>, categoryPageQueryDTO);</span><br><span class="line">        <span class="type">PageResult</span> <span class="variable">pageResult</span> <span class="operator">=</span> categoryService.pageQuery(categoryPageQueryDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 分类id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;删除分类&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">deleteById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;删除分类：&#123;&#125;&quot;</span>, id);</span><br><span class="line">        categoryService.deleteById(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryDTO 分类信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;修改分类&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> CategoryDTO categoryDTO)</span>&#123;</span><br><span class="line">        categoryService.update(categoryDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启用、禁用分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status 0-禁用，1-启用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 分类id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;启用禁用分类&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">startOrStop</span><span class="params">(<span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status, Long id)</span>&#123;</span><br><span class="line">        categoryService.startOrStop(status,id);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据类型查询分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 分类类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分类列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据类型查询分类&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;Category&gt;&gt; <span class="title function_">list</span><span class="params">(Integer type)</span>&#123;</span><br><span class="line">        List&lt;Category&gt; list = categoryService.list(type);</span><br><span class="line">        <span class="keyword">return</span> Result.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>CategoryServiceImpl.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.Page;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> com.sky.constant.MessageConstant;</span><br><span class="line"><span class="keyword">import</span> com.sky.constant.StatusConstant;</span><br><span class="line"><span class="keyword">import</span> com.sky.context.BaseContext;</span><br><span class="line"><span class="keyword">import</span> com.sky.dto.CategoryDTO;</span><br><span class="line"><span class="keyword">import</span> com.sky.dto.CategoryPageQueryDTO;</span><br><span class="line"><span class="keyword">import</span> com.sky.entity.Category;</span><br><span class="line"><span class="keyword">import</span> com.sky.exception.DeletionNotAllowedException;</span><br><span class="line"><span class="keyword">import</span> com.sky.mapper.CategoryMapper;</span><br><span class="line"><span class="keyword">import</span> com.sky.mapper.DishMapper;</span><br><span class="line"><span class="keyword">import</span> com.sky.mapper.SetmealMapper;</span><br><span class="line"><span class="keyword">import</span> com.sky.result.PageResult;</span><br><span class="line"><span class="keyword">import</span> com.sky.service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分类业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryMapper categoryMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishMapper dishMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealMapper setmealMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryDTO 分类信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(CategoryDTO categoryDTO)</span> &#123;</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Category</span>();</span><br><span class="line">        <span class="comment">//属性拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(categoryDTO, category);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分类状态默认为禁用状态0</span></span><br><span class="line">        category.setStatus(StatusConstant.DISABLE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置创建时间、修改时间、创建人、修改人</span></span><br><span class="line">        category.setCreateTime(LocalDateTime.now());</span><br><span class="line">        category.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        category.setCreateUser(BaseContext.getCurrentId());</span><br><span class="line">        category.setUpdateUser(BaseContext.getCurrentId());</span><br><span class="line"></span><br><span class="line">        categoryMapper.insert(category);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryPageQueryDTO 分页查询参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> PageResult <span class="title function_">pageQuery</span><span class="params">(CategoryPageQueryDTO categoryPageQueryDTO)</span> &#123;</span><br><span class="line">        PageHelper.startPage(categoryPageQueryDTO.getPage(),categoryPageQueryDTO.getPageSize());</span><br><span class="line">        <span class="comment">//下一条sql进行分页，自动加入limit关键字分页</span></span><br><span class="line">        Page&lt;Category&gt; page = categoryMapper.pageQuery(categoryPageQueryDTO);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(page.getTotal(), page.getResult());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 分类id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//查询当前分类是否关联了菜品，如果关联了就抛出业务异常</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> dishMapper.countByCategoryId(id);</span><br><span class="line">        <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//当前分类下有菜品，不能删除</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeletionNotAllowedException</span>(MessageConstant.CATEGORY_BE_RELATED_BY_DISH);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询当前分类是否关联了套餐，如果关联了就抛出业务异常</span></span><br><span class="line">        count = setmealMapper.countByCategoryId(id);</span><br><span class="line">        <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//当前分类下有菜品，不能删除</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeletionNotAllowedException</span>(MessageConstant.CATEGORY_BE_RELATED_BY_SETMEAL);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除分类数据</span></span><br><span class="line">        categoryMapper.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryDTO 分类信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(CategoryDTO categoryDTO)</span> &#123;</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Category</span>();</span><br><span class="line">        BeanUtils.copyProperties(categoryDTO,category);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置修改时间、修改人</span></span><br><span class="line">        category.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        category.setUpdateUser(BaseContext.getCurrentId());</span><br><span class="line"></span><br><span class="line">        categoryMapper.update(category);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启用、禁用分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status 分类状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 分类id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startOrStop</span><span class="params">(Integer status, Long id)</span> &#123;</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> Category.builder()</span><br><span class="line">                .id(id)</span><br><span class="line">                .status(status)</span><br><span class="line">                .updateTime(LocalDateTime.now())</span><br><span class="line">                .updateUser(BaseContext.getCurrentId())</span><br><span class="line">                .build();</span><br><span class="line">        categoryMapper.update(category);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据类型查询分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 分类类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分类列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Category&gt; <span class="title function_">list</span><span class="params">(Integer type)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> categoryMapper.list(type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>CategoryMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.Page;</span><br><span class="line"><span class="keyword">import</span> com.sky.dto.CategoryPageQueryDTO;</span><br><span class="line"><span class="keyword">import</span> com.sky.entity.Category;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Delete;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> category 分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into category(type, name, sort, status, create_time, update_time, create_user, update_user)&quot; +</span></span><br><span class="line"><span class="meta">            &quot; VALUES&quot; +</span></span><br><span class="line"><span class="meta">            &quot; (#&#123;type&#125;, #&#123;name&#125;, #&#123;sort&#125;, #&#123;status&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;, #&#123;createUser&#125;, #&#123;updateUser&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Category category)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryPageQueryDTO 分页查询参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Page&lt;Category&gt; <span class="title function_">pageQuery</span><span class="params">(CategoryPageQueryDTO categoryPageQueryDTO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 分类id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from category where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id修改分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> category 分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Category category)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据类型查询分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 分类类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分类列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Category&gt; <span class="title function_">list</span><span class="params">(Integer type)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>DishMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询菜品数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId 分类Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select count(id) from dish where category_id = #&#123;categoryId&#125;&quot;)</span></span><br><span class="line">    Integer <span class="title function_">countByCategoryId</span><span class="params">(Long categoryId)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>SetmealMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询套餐的数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 分类Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select count(id) from setmeal where category_id = #&#123;categoryId&#125;&quot;)</span></span><br><span class="line">    Integer <span class="title function_">countByCategoryId</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>CategoryMapper.xml</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.sky.mapper.CategoryMapper&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">&quot;pageQuery&quot;</span> resultType=<span class="string">&quot;com.sky.entity.Category&quot;</span>&gt;</span><br><span class="line">        select * from category</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">                and name like <span class="title function_">concat</span><span class="params">(<span class="string">&#x27;%&#x27;</span>,#&#123;name&#125;,<span class="string">&#x27;%&#x27;</span>)</span></span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;type != null&quot;</span>&gt;</span><br><span class="line">                <span class="type">and</span> <span class="variable">type</span> <span class="operator">=</span> #&#123;type&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">        order by sort asc , create_time desc</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;update id=<span class="string">&quot;update&quot;</span> parameterType=<span class="string">&quot;Category&quot;</span>&gt;</span><br><span class="line">        update category</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;type != null&quot;</span>&gt;</span><br><span class="line">                type = #&#123;type&#125;,</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null&quot;</span>&gt;</span><br><span class="line">                name = #&#123;name&#125;,</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;sort != null&quot;</span>&gt;</span><br><span class="line">                sort = #&#123;sort&#125;,</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;status != null&quot;</span>&gt;</span><br><span class="line">                status = #&#123;status&#125;,</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;updateTime != null&quot;</span>&gt;</span><br><span class="line">                update_time = #&#123;updateTime&#125;,</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;updateUser != null&quot;</span>&gt;</span><br><span class="line">                update_user = #&#123;updateUser&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">        <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">&quot;list&quot;</span> resultType=<span class="string">&quot;Category&quot;</span>&gt;</span><br><span class="line">        select * from category</span><br><span class="line">        <span class="type">where</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;type != null&quot;</span>&gt;</span><br><span class="line">            <span class="type">and</span> <span class="variable">type</span> <span class="operator">=</span> #&#123;type&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        order by sort ,create_time desc</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="附：其他盲区知识补充"><a href="#附：其他盲区知识补充" class="headerlink" title="附：其他盲区知识补充"></a>附：其他盲区知识补充</h2><p>在 Spring MVC 中，<code>@RequestBody</code>注解的核心作用是<strong>将 HTTP 请求体中的数据绑定到控制器方法的参数上</strong>。是否需要添加该注解，主要取决于<strong>参数的数据来源</strong>和<strong>请求的内容格式</strong>。</p>
<h3 id="一、需要添加-RequestBody的场景"><a href="#一、需要添加-RequestBody的场景" class="headerlink" title="一、需要添加@RequestBody的场景"></a>一、需要添加<code>@RequestBody</code>的场景</h3><p>当参数的数据来自<strong>HTTP 请求体（Request Body）</strong>，且请求体格式为<code>application/json</code>、<code>application/xml</code>等非表单格式时，必须使用<code>@RequestBody</code>。</p>
<p>典型场景：</p>
<ol>
<li><p><strong>前端发送 JSON 格式数据</strong>当前端通过<code>POST</code>、<code>PUT</code>等请求，以<code>JSON</code>格式提交数据（<code>Content-Type: application/json</code>）时，后端需要用<code>@RequestBody</code>接收并将 JSON 转换为 Java 对象。</p>
<p> 示例：前端请求（JSON 格式）：</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求体内容</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhangsan&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p> 后端 Controller 接收：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;  <span class="comment">// 需要@RequestBody将JSON转换为User对象</span></span><br><span class="line">    <span class="comment">// 处理登录逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>接收复杂对象或数组</strong>当参数是复杂 Java 对象（包含多个字段）、集合（如<code>List</code>、<code>Map</code>）或数组时，即使请求体是其他格式（如 XML），也需要<code>@RequestBody</code>绑定数据。</p>
<p> 示例（接收数组）：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/batch-delete&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">batchDelete</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;Long&gt; ids)</span> &#123;  <span class="comment">// 接收JSON数组[1,2,3]</span></span><br><span class="line">    <span class="comment">// 批量删除逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="二、不需要添加-RequestBody的场景"><a href="#二、不需要添加-RequestBody的场景" class="headerlink" title="二、不需要添加@RequestBody的场景"></a>二、不需要添加<code>@RequestBody</code>的场景</h3><p>当参数的数据来自<strong>URL 路径（PathVariable）</strong>、<strong>查询参数（Query String）</strong> 或<strong>表单提交（Form Data）</strong> 时，不需要<code>@RequestBody</code>。</p>
<p>典型场景：</p>
<ol>
<li><p>**参数来自 URL 路径（<code>@PathVariable</code>）**参数嵌在 URL 中（如<code>/user/123</code>中的<code>123</code>），用<code>@PathVariable</code>接收，无需<code>@RequestBody</code>。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;  <span class="comment">// 从URL路径获取id</span></span><br><span class="line">    <span class="comment">// 查询用户逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>**参数来自查询参数（<code>@RequestParam</code>）**参数在 URL 末尾（如<code>/search?name=zhangsan&amp;age=20</code>），用<code>@RequestParam</code>接收（简单类型可省略该注解）。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/search&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">search</span><span class="params">(<span class="meta">@RequestParam</span> String name, Integer age)</span> &#123;  <span class="comment">// 从查询参数获取</span></span><br><span class="line">    <span class="comment">// 搜索逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>**表单提交（<code>application/x-www-form-urlencoded</code>）**前端通过表单提交数据（<code>Content-Type: application/x-www-form-urlencoded</code>），此时参数在请求体中，但格式是键值对（非 JSON），无需<code>@RequestBody</code>，Spring 会自动绑定到对象。</p>
<p> 示例：前端表单：</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/register&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 后端接收：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">register</span><span class="params">(User user)</span> &#123;  <span class="comment">// 无需@RequestBody，自动绑定表单字段</span></span><br><span class="line">    <span class="comment">// 注册逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="三、关键判断依据"><a href="#三、关键判断依据" class="headerlink" title="三、关键判断依据"></a>三、关键判断依据</h3><ol>
<li><strong>数据位置</strong>：参数来自请求体（Body）还是 URL（路径 &#x2F; 查询参数）？<ul>
<li>来自请求体 → 可能需要<code>@RequestBody</code>（除非是表单键值对）。</li>
<li>来自 URL → 不需要。</li>
</ul>
</li>
<li><strong>请求格式</strong>：请求体是 JSON&#x2F;XML 还是表单键值对？<ul>
<li>JSON&#x2F;XML → 需要<code>@RequestBody</code>。</li>
<li>表单键值对（<code>application/x-www-form-urlencoded</code>） → 不需要（复杂对象也能自动绑定）。</li>
</ul>
</li>
<li><strong>参数类型</strong>：简单类型（String、int 等）还是复杂对象 &#x2F; 集合？<ul>
<li>复杂对象 &#x2F; 集合且来自请求体 → 需要<code>@RequestBody</code>。</li>
<li>简单类型且来自查询参数 &#x2F; 表单 → 不需要。</li>
</ul>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>@RequestBody</code>的核心是<strong>处理请求体中的非表单格式数据（如 JSON）</strong>，将其转换为 Java 对象。如果参数来自 URL 或表单提交的键值对，则无需添加该注解。</p>
<hr>
<h3 id="四、比较用-还是-Objects-equals-？"><a href="#四、比较用-还是-Objects-equals-？" class="headerlink" title="四、比较用 &#x3D;&#x3D; 还是 Objects.equals() ？"></a>四、比较用 &#x3D;&#x3D; 还是 Objects.equals() ？</h3><p><strong>比较数字包装类（如 <code>Integer</code>、<code>Long</code> 等）时，<code>==</code> 存在潜在问题，推荐用更安全的方式（如 <code>Objects.equals</code>）替代</strong>。具体原因和建议如下：</p>
<h4 id="1-的问题：比较-“引用地址”-而非-“值相等”"><a href="#1-的问题：比较-“引用地址”-而非-“值相等”" class="headerlink" title="1. == 的问题：比较 “引用地址” 而非 “值相等”"></a>1. <code>==</code> 的问题：比较 “引用地址” 而非 “值相等”</h4><p>包装类（如 <code>Integer</code>）是<strong>对象</strong>，<code>==</code> 比较的是<strong>对象的内存地址是否相同</strong>，而非 “值是否相等”。</p>
<ul>
<li><p>示例 1（缓存范围内，看似正常）：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">System.out.println(a == b); <span class="comment">// true（因为 Integer 缓存了 -128~127 的对象）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>示例 2（超出缓存范围，逻辑错误）：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(c == d); <span class="comment">// false（超出缓存，是两个不同对象）</span></span><br></pre></td></tr></table></figure>

<p>  此时 <code>c</code> 和 <code>d</code> 的<strong>值都是 128</strong>，但 <code>==</code> 结果为 <code>false</code>（因为是不同对象实例）。</p>
</li>
</ul>
<h4 id="2-无法安全处理-null"><a href="#2-无法安全处理-null" class="headerlink" title="2. == 无法安全处理 null"></a>2. <code>==</code> 无法安全处理 <code>null</code></h4><p>如果比较的对象包含 <code>null</code>，<code>==</code> 会直接抛出 <code>NullPointerException</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(a == b); <span class="comment">// 直接抛 NPE</span></span><br></pre></td></tr></table></figure>

<h4 id="推荐用法：Objects-equals"><a href="#推荐用法：Objects-equals" class="headerlink" title="推荐用法：Objects.equals(...)"></a>推荐用法：<code>Objects.equals(...)</code></h4><p><code>java.util.Objects.equals(Object a, Object b)</code> 是最安全的方式，原因：</p>
<ul>
<li>内部先判断 <code>a</code> 或 <code>b</code> 是否为 <code>null</code>，<strong>避免空指针异常</strong>；</li>
<li>再调用 <code>equals</code> 方法比较<strong>值是否相等</strong>（而非引用地址）。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(Objects.equals(a, b)); <span class="comment">// true（值相等）</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(Objects.equals(c, d)); <span class="comment">// false（安全，无 NPE）</span></span><br></pre></td></tr></table></figure>

<p>总结：当需要比较 ** 数字包装类的 “值是否相等”** 时，应避免用 <code>==</code>，推荐使用 <code>Objects.equals(...)</code> 保证逻辑正确且避免空指针。</p>
<hr>
<h3 id="五、什么时候xml映射文件「可以不指定」parameterType？"><a href="#五、什么时候xml映射文件「可以不指定」parameterType？" class="headerlink" title="五、什么时候xml映射文件「可以不指定」parameterType？"></a>五、什么时候xml映射文件「可以不指定」<code>parameterType</code>？</h3><p>MyBatis 3.4.0 及以上版本（苍穹外卖用的是高版本，如 3.5.x），满足以下条件时，<code>parameterType</code> 可省略：</p>
<h4 id="1-参数是「JavaBean-类型」（如-Employee、EmployeeDTO）"><a href="#1-参数是「JavaBean-类型」（如-Employee、EmployeeDTO）" class="headerlink" title="1. 参数是「JavaBean 类型」（如 Employee、EmployeeDTO）"></a>1. 参数是「JavaBean 类型」（如 <code>Employee</code>、<code>EmployeeDTO</code>）</h4><p>高版本 MyBatis 会通过 <strong>反射</strong> 自动推断参数类型：</p>
<ul>
<li>若 Mapper 接口方法的参数是 <code>Employee</code>（如 <code>void update(Employee employee)</code>），MyBatis 会直接识别参数类型为 <code>Employee</code>，无需显式写 <code>parameterType=&quot;Employee&quot;</code>。</li>
</ul>
<p>例如：即使去掉 <code>parameterType</code>，以下 SQL 仍能正常运行：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span> <span class="comment">&lt;!-- 省略 parameterType --&gt;</span></span><br><span class="line">    update employee</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span>status = #&#123;status&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-参数用-Param-注解显式标记"><a href="#2-参数用-Param-注解显式标记" class="headerlink" title="2. 参数用 @Param 注解显式标记"></a>2. 参数用 <code>@Param</code> 注解显式标记</h4><p>若 Mapper 接口方法用 <code>@Param</code> 指定参数名，MyBatis 会通过 <code>@Param</code> 识别参数，无需 <code>parameterType</code>：</p>
<ul>
<li><p>Mapper 接口：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">updateStatus</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id, <span class="meta">@Param(&quot;status&quot;)</span> Integer status)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>映射文件（无需parameterType）</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStatus&quot;</span>&gt;</span></span><br><span class="line">    update employee set status = #&#123;status&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="六、什么时候xml映射文件「必须指定」parameterType"><a href="#六、什么时候xml映射文件「必须指定」parameterType" class="headerlink" title="六、什么时候xml映射文件「必须指定」parameterType"></a>六、什么时候xml映射文件「必须指定」<code>parameterType</code></h3><p>只有两种场景下，<code>parameterType</code> 是必须显式声明的：</p>
<h4 id="参数类型是「集合-数组-Map」等非-JavaBean-类型"><a href="#参数类型是「集合-数组-Map」等非-JavaBean-类型" class="headerlink" title="参数类型是「集合 &#x2F; 数组 &#x2F; Map」等非 JavaBean 类型"></a>参数类型是「集合 &#x2F; 数组 &#x2F; Map」等非 JavaBean 类型</h4><p>当参数是 <code>List</code>、<code>Array</code>、<code>Map</code> 等特殊类型时，MyBatis 无法通过方法参数自动推断具体类型，必须显式指定 <code>parameterType</code>：</p>
<ul>
<li><p>示例 1：批量删除员工（参数是List<Long>)</Long></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;batchDelete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">    delete from employee where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>示例 2：用 Map 传多参数（参数是Map)</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.Map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span></span><br><span class="line">    select * from employee </span><br><span class="line">    where name = #&#123;name&#125; and status = #&#123;status&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>苍穹外卖</tag>
      </tags>
  </entry>
  <entry>
    <title>sky-takeout-day01-note</title>
    <url>/2025/10/10/sky-takeout-day01-note/</url>
    <content><![CDATA[<h1 id="Sky-takeout-Day01"><a href="#Sky-takeout-Day01" class="headerlink" title="Sky-takeout  Day01"></a>Sky-takeout  Day01</h1><blockquote>
<p>【前言】</p>
<p>本节内容主要重点是搭建开发环境，重点是后端环境，会有一些坑（本文只提到了我遇到的）比如 Lombok 版本兼容问题、数据库账户密码设置问题。<br>前面两部分软件开发流程和项目介绍，都是黑马官方笔记 copy 来的，阅读了解一下即可，主要是一些概念。<br>其次关于 Nginx 的概念与作用、Swagger 的使用，个人认为最好熟悉一下。<br>此外，我在 contents 中提到的是官方课程目录，本文不一定全都有相关内容的覆盖，可自行前往课程了解学习。</p>
</blockquote>
<span id="more"></span>

<h3 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h3><ul>
<li><p>软件开发流程介绍</p>
<ul>
<li>开发流程</li>
<li>角色分工</li>
<li>三种软件环境</li>
</ul>
</li>
<li><p>项目整体介绍</p>
<ul>
<li>项目原型</li>
<li>技术选型</li>
</ul>
</li>
<li><p>前后端环境搭建流程（完善登录功能）</p>
<ul>
<li>熟悉项目结构</li>
<li>Git 版本控制</li>
<li>数据库环境搭建</li>
<li>前后端联调, 断点调试，熟悉代码结构</li>
<li>Nginx 反向代理、负载均衡相关知识</li>
<li>完善登录功能</li>
</ul>
</li>
<li><p>Swagger 接口文档介绍</p>
</li>
</ul>
<hr>
<h3 id="1-软件开发流程介绍"><a href="#1-软件开发流程介绍" class="headerlink" title="1. 软件开发流程介绍"></a>1. 软件开发流程介绍</h3><h4 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h4><img src="/2025/10/10/sky-takeout-day01-note/image-20251010113130473.png" alt="image-20251010113130473" style="zoom:50%;">

<p><strong>1). 第 1 阶段: 需求分析</strong></p>
<p>完成需求规格说明书、产品原型编写。  </p>
<ul>
<li><p>需求规格说明书， 一般来说就是使用 Word 文档来描述当前项目的各个组成部分，如：系统定义、应用环境、功能规格、性能需求等，都会在文档中描述。</p>
</li>
<li><p>产品原型，一般是通过网页(html)的形式展示当前的页面展示什么样的数据, 页面的布局是什么样子的，点击某个菜单，打开什么页面，点击某个按钮，出现什么效果，都可以通过产品原型看到。</p>
</li>
</ul>
<p><strong>2). 第 2 阶段: 设计</strong></p>
<p>设计的内容包含 UI 设计、数据库设计、接口设计。</p>
<ul>
<li><p>UI 设计：用户界面的设计，主要设计项目的页面效果，小到一个按钮，大到一个页面布局，还有人机交互逻辑的体现。</p>
</li>
<li><p>数据库设计：需要设计当前项目中涉及到哪些数据库，每一个数据库里面包含哪些表，这些表结构之间的关系是什么样的，表结构中包含哪些字段。</p>
</li>
<li><p>接口设计：通过分析原型图，首先，粗粒度地分析每个页面有多少接口，然后，再细粒度地分析每个接口的传入参数，返回值参数，同时明确接口路径及请求方式。</p>
</li>
</ul>
<p><strong>3). 第 3 阶段: 编码</strong></p>
<p>编写项目代码、并完成单元测试。</p>
<ul>
<li><p>项目代码编写：软件开发工程师对项目的模块功能分析后，进行编码实现。</p>
</li>
<li><p>单元测试：编码实现完毕后，进行单元测试，单元测试通过后再进入到下一阶段。</p>
</li>
</ul>
<p><strong>4). 第 4 阶段: 测试</strong></p>
<p>测试人员, 对部署在测试环境的项目进行功能测试, 并出具测试报告。</p>
<p><strong>5). 第 5 阶段: 上线运维</strong></p>
<p>在项目上线之前， 会由运维人员准备服务器上的软件环境安装、配置， 配置完毕后， 再将我们开发好的项目，部署在服务器上运行。</p>
<h4 id="角色分工"><a href="#角色分工" class="headerlink" title="角色分工"></a>角色分工</h4><table>
<thead>
<tr>
<th align="left">岗位&#x2F;角色</th>
<th>对应阶段</th>
<th align="left">职责&#x2F;分工</th>
</tr>
</thead>
<tbody><tr>
<td align="left">项目经理</td>
<td>全阶段</td>
<td align="left">对整个项目负责，任务分配、把控进度</td>
</tr>
<tr>
<td align="left">产品经理</td>
<td>需求分析</td>
<td align="left">进行需求调研，输出需求调研文档、产品原型等</td>
</tr>
<tr>
<td align="left">UI 设计师</td>
<td>设计</td>
<td align="left">根据产品原型输出界面效果图</td>
</tr>
<tr>
<td align="left">架构师</td>
<td>设计</td>
<td align="left">项目整体架构设计、技术选型等</td>
</tr>
<tr>
<td align="left">开发工程师</td>
<td>编码</td>
<td align="left">功能代码实现</td>
</tr>
<tr>
<td align="left">测试工程师</td>
<td>测试</td>
<td align="left">编写测试用例，输出测试报告</td>
</tr>
<tr>
<td align="left">运维工程师</td>
<td>上线运维</td>
<td align="left">软件环境搭建、项目上线</td>
</tr>
</tbody></table>
<h4 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h4><p>开发环境(development)、测试环境(testing)、生产环境(production)。</p>
<p>首先，会在开发环境中进行项目开发，往往开发环境大多数都是本地的电脑环境和局域网内的环境，当开发完毕后，然后会把项目部署到测试环境，测试环境一般是一台独立测试服务器的环境，项目测试通过后，最终把项目部署到生产环境，生产环境可以是机房或者云服务器等线上环境。</p>
<h3 id="2-项目整体介绍"><a href="#2-项目整体介绍" class="headerlink" title="2. 项目整体介绍"></a>2. 项目整体介绍</h3><h4 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h4><img src="/2025/10/10/sky-takeout-day01-note/image-20251010124754515.png" alt="image-20251010124754515" style="zoom:50%;">

<hr>
<h4 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h4><p><img src="/2025/10/10/sky-takeout-day01-note/image-20251010124845981.png" alt="image-20251010124845981"></p>
<p><strong>1). 用户层</strong></p>
<p>本项目中在构建系统管理后台的前端页面，我们会用到 H5、Vue.js、ElementUI、apache echarts(展示图表)等技术。而在构建移动端应用时，我们会使用到微信小程序。</p>
<p><strong>2). 网关层</strong></p>
<p>Nginx 是一个服务器，主要用来作为 Http 服务器，部署静态资源，访问性能高。在 Nginx 中还有两个比较重要的作用： 反向代理和负载均衡， 在进行项目部署时，要实现 Tomcat 的负载均衡，就可以通过 Nginx 来实现。</p>
<p><strong>3). 应用层</strong></p>
<p>SpringBoot： 快速构建 Spring 项目, 采用 “约定优于配置” 的思想, 简化 Spring 项目的配置开发。</p>
<p>SpringMVC：SpringMVC 是 spring 框架的一个模块，springmvc 和 spring 无需通过中间整合层进行整合，可以无缝集成。</p>
<p>Spring Task:  由 Spring 提供的定时任务框架。</p>
<p>httpclient:  主要实现了对 http 请求的发送。</p>
<p>Spring Cache:  由 Spring 提供的数据缓存框架</p>
<p>JWT:  用于对应用程序上的用户进行身份验证的标记。</p>
<p>阿里云 OSS:  对象存储服务，在项目中主要存储文件，如图片等。</p>
<p>Swagger： 可以自动的帮助开发人员生成接口文档，并对接口进行测试。</p>
<p>POI:  封装了对 Excel 表格的常用操作。</p>
<p>WebSocket: 一种通信网络协议，使客户端和服务器之间的数据交换更加简单，用于项目的来单、催单功能实现。</p>
<p><strong>4). 数据层</strong></p>
<p>MySQL： 关系型数据库, 本项目的核心业务数据都会采用 MySQL 进行存储。</p>
<p>Redis： 基于 key-value 格式存储的内存数据库, 访问速度快, 经常使用它做缓存。</p>
<p>Mybatis： 本项目持久层将会使用 Mybatis 开发。</p>
<p>pagehelper:  分页插件。</p>
<p>spring data redis:  简化 java 代码操作 Redis 的 API。</p>
<p><strong>5). 工具</strong></p>
<p>git: 版本控制工具, 在团队协作中, 使用该工具对项目中的代码进行管理。</p>
<p>maven: 项目构建工具。</p>
<p>junit：单元测试工具，开发人员功能实现完毕后，需要通过 junit 对功能进行单元测试。</p>
<p>postman:  接口测工具，模拟用户发起的各类 HTTP 请求，获取对应的响应结果。</p>
<hr>
<h4 id="产品原型"><a href="#产品原型" class="headerlink" title="产品原型"></a>产品原型</h4><p><strong>1). 管理端</strong></p>
<p>餐饮企业内部员工使用。 主要功能有: </p>
<table>
<thead>
<tr>
<th>模块</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>登录&#x2F;退出</td>
<td>内部员工必须登录后, 才可以访问系统管理后台</td>
</tr>
<tr>
<td>员工管理</td>
<td>管理员可以在系统后台对员工信息进行管理，包含查询、新增、编辑、禁用等功能</td>
</tr>
<tr>
<td>分类管理</td>
<td>主要对当前餐厅经营的 菜品分类 或 套餐分类 进行管理维护， 包含查询、新增、修改、删除等功能</td>
</tr>
<tr>
<td>菜品管理</td>
<td>主要维护各个分类下的菜品信息，包含查询、新增、修改、删除、启售、停售等功能</td>
</tr>
<tr>
<td>套餐管理</td>
<td>主要维护当前餐厅中的套餐信息，包含查询、新增、修改、删除、启售、停售等功能</td>
</tr>
<tr>
<td>订单管理</td>
<td>主要维护用户在移动端下的订单信息，包含查询、取消、派送、完成，以及订单报表下载等功能</td>
</tr>
<tr>
<td>数据统计</td>
<td>主要完成对餐厅的各类数据统计，如营业额、用户数量、订单等</td>
</tr>
</tbody></table>
<p><strong>2). 用户端</strong></p>
<p>移动端应用主要提供给消费者使用。主要功能有:</p>
<table>
<thead>
<tr>
<th>模块</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>登录&#x2F;退出</td>
<td>用户需要通过微信授权后登录使用小程序进行点餐</td>
</tr>
<tr>
<td>点餐-菜单</td>
<td>在点餐界面需要展示出菜品分类&#x2F;套餐分类, 并根据当前选择的分类加载其中的菜品信息, 供用户查询选择</td>
</tr>
<tr>
<td>点餐-购物车</td>
<td>用户选中的菜品就会加入用户的购物车, 主要包含 查询购物车、加入购物车、删除购物车、清空购物车等功能</td>
</tr>
<tr>
<td>订单支付</td>
<td>用户选完菜品&#x2F;套餐后, 可以对购物车菜品进行结算支付, 这时就需要进行订单的支付</td>
</tr>
<tr>
<td>个人信息</td>
<td>在个人中心页面中会展示当前用户的基本信息, 用户可以管理收货地址, 也可以查询历史订单数据</td>
</tr>
</tbody></table>
<h3 id="3-前端环境搭建"><a href="#3-前端环境搭建" class="headerlink" title="3. 前端环境搭建"></a>3. 前端环境搭建</h3><ul>
<li>直接在 heima 的 day01 资料中把 “前端运行环境” 中的 nginx-1.20.2 目录下的 nginx.exe 双击即可（注意 <strong>文件路径不能有中文</strong>）</li>
</ul>
<h3 id="4-后端环境搭建"><a href="#4-后端环境搭建" class="headerlink" title="4. 后端环境搭建"></a>4. 后端环境搭建</h3><h4 id="后端搭建环境注意事项"><a href="#后端搭建环境注意事项" class="headerlink" title="后端搭建环境注意事项"></a><strong>后端搭建环境注意事项</strong></h4><ul>
<li>注 1：lombok 版本改高一点，改成 1.18.30，如果版本低构建项目会报错，原因应该是 JDK 版本过高不兼容，比如我的是 JDK21，所以 1.18.30 才不会报错  <img src="/2025/10/10/sky-takeout-day01-note/Snipaste_2025-10-10_09-19-06.png" alt="Snipaste_2025-10-10_09-19-06" style="zoom:33%;"></li>
<li>注 2：数据库的账号密码要改成自己本机的 MySQL 的密码, 在 application-dev.yml 中修改, 否则会登录不上前端网站, 报数据库连接池连接不到的错误  <img src="/2025/10/10/sky-takeout-day01-note/Snipaste_2025-10-10_09-23-40.png" alt="Snipaste_2025-10-10_09-23-40" style="zoom:33%;"></li>
</ul>
<h4 id="数据库表说明"><a href="#数据库表说明" class="headerlink" title="数据库表说明"></a>数据库表说明</h4><table>
<thead>
<tr>
<th><strong>序号</strong></th>
<th><strong>表名</strong></th>
<th><strong>中文名</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>employee</td>
<td>员工表</td>
</tr>
<tr>
<td>2</td>
<td>category</td>
<td>分类表</td>
</tr>
<tr>
<td>3</td>
<td>dish</td>
<td>菜品表</td>
</tr>
<tr>
<td>4</td>
<td>dish_flavor</td>
<td>菜品口味表</td>
</tr>
<tr>
<td>5</td>
<td>setmeal</td>
<td>套餐表</td>
</tr>
<tr>
<td>6</td>
<td>setmeal_dish</td>
<td>套餐菜品关系表</td>
</tr>
<tr>
<td>7</td>
<td>user</td>
<td>用户表</td>
</tr>
<tr>
<td>8</td>
<td>address_book</td>
<td>地址表</td>
</tr>
<tr>
<td>9</td>
<td>shopping_cart</td>
<td>购物车表</td>
</tr>
<tr>
<td>10</td>
<td>orders</td>
<td>订单表</td>
</tr>
<tr>
<td>11</td>
<td>order_detail</td>
<td>订单明细表</td>
</tr>
</tbody></table>
<h4 id="前后端联调熟悉项目结构"><a href="#前后端联调熟悉项目结构" class="headerlink" title="前后端联调熟悉项目结构"></a><strong>前后端联调熟悉项目结构</strong></h4><ul>
<li>大体流程如下</li>
</ul>
<p><img src="/2025/10/10/sky-takeout-day01-note/image-20251010094303871.png" alt="image-20251010094303871"></p>
<h3 id="5-Nginx-反向代理介绍"><a href="#5-Nginx-反向代理介绍" class="headerlink" title="5. Nginx 反向代理介绍"></a>5. Nginx 反向代理介绍</h3><h4 id="反向代理好处："><a href="#反向代理好处：" class="headerlink" title="反向代理好处："></a>反向代理好处：</h4><img src="/2025/10/10/sky-takeout-day01-note/image-20251010100204967.png" alt="image-20251010100204967" style="zoom: 50%;">

<ul>
<li><p>提高访问速度</p>
<p>  因为 nginx 本身可以进行缓存，如果访问的同一接口，并且做了数据缓存，nginx 就直接可把数据返回，不需要真正地访问服务端，从而提高访问速度。</p>
</li>
<li><p>进行负载均衡</p>
<p>  所谓负载均衡, 就是把大量的请求按照我们指定的方式均衡的分配给集群中的每台服务器。</p>
</li>
<li><p>保证后端服务安全</p>
<p>  因为一般后台服务地址不会暴露，所以使用浏览器不能直接访问，可以把 nginx 作为请求访问的入口，请求到达 nginx 后转发到具体的服务中，从而保证后端服务的安全。</p>
</li>
</ul>
<h4 id="Nginx-的配置："><a href="#Nginx-的配置：" class="headerlink" title="Nginx 的配置："></a>Nginx 的配置：</h4><p><strong>proxy_pass：</strong> 该指令是用来设置代理服务器的地址，可以是主机名称，IP 地址加端口号等形式。</p>
<p>如上代码的含义是：监听 80 端口号， 然后当我们访问 <a href="http://localhost/">http://localhost</a>: 80&#x2F;api&#x2F;..&#x2F;..这样的接口的时候，它会通过 location &#x2F;api&#x2F; {} 这样的反向代理到 <a href="http://localhost/">http://localhost</a>: 8080&#x2F;admin&#x2F;上来。</p>
<ol>
<li>通常配置，在 nginx.conf 配置文件中，找到如下部分</li>
</ol>
<img src="/2025/10/10/sky-takeout-day01-note/image-20251010100742140.png" alt="image-20251010100742140" style="zoom: 50%;">

<ol start="2">
<li>在本项目中，负载均衡配置方式</li>
</ol>
<img src="/2025/10/10/sky-takeout-day01-note/image-20251010100820078.png" alt="image-20251010100820078" style="zoom:50%;">

<h3 id="6-完善登录功能"><a href="#6-完善登录功能" class="headerlink" title="6. 完善登录功能"></a>6. 完善登录功能</h3><p>问题：明文存储，安全性低<br><img src="/2025/10/10/sky-takeout-day01-note/image-20251010101048960.png" alt="image-20251010101048960" style="zoom: 50%;"></p>
<p>解决：使用 spring 框架中的 MD5 加密算法把 password 加密，在工具类 DigestUtils 中</p>
<h3 id="7-Swagger-接口文档介绍"><a href="#7-Swagger-接口文档介绍" class="headerlink" title="7. Swagger 接口文档介绍"></a>7. Swagger 接口文档介绍</h3><h4 id="导入接口文档"><a href="#导入接口文档" class="headerlink" title="导入接口文档"></a>导入接口文档</h4><p>​	将资料中的 json 文档文件导入接口平台如 Apifox 或 yapi, 选择 json 格式导入即可。</p>
<h4 id="Swagger-介绍和使用"><a href="#Swagger-介绍和使用" class="headerlink" title="Swagger 介绍和使用"></a>Swagger 介绍和使用</h4><h5 id="1）介绍："><a href="#1）介绍：" class="headerlink" title="1）介绍："></a>1）介绍：</h5><p>​	<img src="/2025/10/10/sky-takeout-day01-note/image-20251010105223256.png" alt="image-20251010105223256" style="zoom: 80%;"></p>
<p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务(<a href="https://swagger.io/">https://swagger.io/</a>)。 它的主要作用是：</p>
<ol>
<li><p>使得前后端分离开发更加方便，有利于团队协作</p>
</li>
<li><p>接口的文档在线自动生成，降低后端开发人员编写接口文档的负担</p>
</li>
<li><p>功能测试 </p>
<p> Spring 已经将 Swagger 纳入自身的标准，建立了 Spring-swagger 项目，现在叫 Springfox。通过在项目中引入 Springfox ，即可非常简单快捷的使用 Swagger。</p>
</li>
</ol>
<p>knife4j 是为 Java MVC 框架集成 Swagger 生成 Api 文档的增强解决方案, 前身是 swagger-bootstrap-ui, 取名 kni4j 是希望它能像一把匕首一样小巧, 轻量, 并且功能强悍!</p>
<p>目前，一般都使用 knife4j 框架。</p>
<hr>
<h5 id="2）使用方式"><a href="#2）使用方式" class="headerlink" title="2）使用方式"></a>2）使用方式</h5><img src="/2025/10/10/sky-takeout-day01-note/image-20251010105441159.png" alt="image-20251010105441159" style="zoom: 50%;">

<ul>
<li><p>导入 maven 坐标</p>
  <img src="/2025/10/10/sky-takeout-day01-note/image-20251010105648143.png" alt="image-20251010105648143" style="zoom: 50%;">
</li>
<li><p>配置类中加入 knife4j 配置代码</p>
  <img src="/2025/10/10/sky-takeout-day01-note/image-20251010105708341.png" alt="image-20251010105708341" style="zoom:50%;"></li>
<li><p>设置静态资源映射</p>
  <img src="/2025/10/10/sky-takeout-day01-note/image-20251010105731635.png" alt="image-20251010105731635" style="zoom: 67%;"></li>
<li><p>访问测试</p>
</li>
</ul>
<p>​	接口文档访问路径为 <a href="http://localhost/">http://localhost</a>: 8080&#x2F;doc.html</p>
<h5 id="3）Swagger-常用注解"><a href="#3）Swagger-常用注解" class="headerlink" title="3）Swagger 常用注解"></a>3）Swagger 常用注解</h5><img src="/2025/10/10/sky-takeout-day01-note/image-20251010110634376.png" alt="image-20251010110634376" style="zoom: 67%;">
]]></content>
      <tags>
        <tag>苍穹外卖</tag>
      </tags>
  </entry>
</search>

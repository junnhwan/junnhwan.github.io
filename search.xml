<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>sky-takeout-day01-note</title>
    <url>/2025/10/10/sky-takeout-day01-note/</url>
    <content><![CDATA[<h1 id="Sky-takeout-Day01"><a href="#Sky-takeout-Day01" class="headerlink" title="Sky-takeout  Day01"></a>Sky-takeout  Day01</h1><blockquote>
<p>【前言】</p>
<p>本节内容主要重点是搭建开发环境，重点是后端环境，会有一些坑（本文只提到了我遇到的）比如 Lombok 版本兼容问题、数据库账户密码设置问题。<br>前面两部分软件开发流程和项目介绍，都是黑马官方笔记 copy 来的，阅读了解一下即可，主要是一些概念。<br>其次关于 Nginx 的概念与作用、Swagger 的使用，个人认为最好熟悉一下。<br>此外，我在 contents 中提到的是官方课程目录，本文不一定全都有相关内容的覆盖，可自行前往课程了解学习。</p>
</blockquote>
<span id="more"></span>

<h3 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h3><ul>
<li><p>软件开发流程介绍</p>
<ul>
<li>开发流程</li>
<li>角色分工</li>
<li>三种软件环境</li>
</ul>
</li>
<li><p>项目整体介绍</p>
<ul>
<li>项目原型</li>
<li>技术选型</li>
</ul>
</li>
<li><p>前后端环境搭建流程（完善登录功能）</p>
<ul>
<li>熟悉项目结构</li>
<li>Git 版本控制</li>
<li>数据库环境搭建</li>
<li>前后端联调, 断点调试，熟悉代码结构</li>
<li>Nginx 反向代理、负载均衡相关知识</li>
<li>完善登录功能</li>
</ul>
</li>
<li><p>Swagger 接口文档介绍</p>
</li>
</ul>
<hr>
<h3 id="1-软件开发流程介绍"><a href="#1-软件开发流程介绍" class="headerlink" title="1. 软件开发流程介绍"></a>1. 软件开发流程介绍</h3><h4 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h4><img src="/2025/10/10/sky-takeout-day01-note/image-20251010113130473.png" alt="image-20251010113130473" style="zoom:50%;">

<p><strong>1). 第 1 阶段: 需求分析</strong></p>
<p>完成需求规格说明书、产品原型编写。  </p>
<ul>
<li><p>需求规格说明书， 一般来说就是使用 Word 文档来描述当前项目的各个组成部分，如：系统定义、应用环境、功能规格、性能需求等，都会在文档中描述。</p>
</li>
<li><p>产品原型，一般是通过网页(html)的形式展示当前的页面展示什么样的数据, 页面的布局是什么样子的，点击某个菜单，打开什么页面，点击某个按钮，出现什么效果，都可以通过产品原型看到。</p>
</li>
</ul>
<p><strong>2). 第 2 阶段: 设计</strong></p>
<p>设计的内容包含 UI 设计、数据库设计、接口设计。</p>
<ul>
<li><p>UI 设计：用户界面的设计，主要设计项目的页面效果，小到一个按钮，大到一个页面布局，还有人机交互逻辑的体现。</p>
</li>
<li><p>数据库设计：需要设计当前项目中涉及到哪些数据库，每一个数据库里面包含哪些表，这些表结构之间的关系是什么样的，表结构中包含哪些字段。</p>
</li>
<li><p>接口设计：通过分析原型图，首先，粗粒度地分析每个页面有多少接口，然后，再细粒度地分析每个接口的传入参数，返回值参数，同时明确接口路径及请求方式。</p>
</li>
</ul>
<p><strong>3). 第 3 阶段: 编码</strong></p>
<p>编写项目代码、并完成单元测试。</p>
<ul>
<li><p>项目代码编写：软件开发工程师对项目的模块功能分析后，进行编码实现。</p>
</li>
<li><p>单元测试：编码实现完毕后，进行单元测试，单元测试通过后再进入到下一阶段。</p>
</li>
</ul>
<p><strong>4). 第 4 阶段: 测试</strong></p>
<p>测试人员, 对部署在测试环境的项目进行功能测试, 并出具测试报告。</p>
<p><strong>5). 第 5 阶段: 上线运维</strong></p>
<p>在项目上线之前， 会由运维人员准备服务器上的软件环境安装、配置， 配置完毕后， 再将我们开发好的项目，部署在服务器上运行。</p>
<h4 id="角色分工"><a href="#角色分工" class="headerlink" title="角色分工"></a>角色分工</h4><table>
<thead>
<tr>
<th align="left">岗位&#x2F;角色</th>
<th>对应阶段</th>
<th align="left">职责&#x2F;分工</th>
</tr>
</thead>
<tbody><tr>
<td align="left">项目经理</td>
<td>全阶段</td>
<td align="left">对整个项目负责，任务分配、把控进度</td>
</tr>
<tr>
<td align="left">产品经理</td>
<td>需求分析</td>
<td align="left">进行需求调研，输出需求调研文档、产品原型等</td>
</tr>
<tr>
<td align="left">UI 设计师</td>
<td>设计</td>
<td align="left">根据产品原型输出界面效果图</td>
</tr>
<tr>
<td align="left">架构师</td>
<td>设计</td>
<td align="left">项目整体架构设计、技术选型等</td>
</tr>
<tr>
<td align="left">开发工程师</td>
<td>编码</td>
<td align="left">功能代码实现</td>
</tr>
<tr>
<td align="left">测试工程师</td>
<td>测试</td>
<td align="left">编写测试用例，输出测试报告</td>
</tr>
<tr>
<td align="left">运维工程师</td>
<td>上线运维</td>
<td align="left">软件环境搭建、项目上线</td>
</tr>
</tbody></table>
<h4 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h4><p>开发环境(development)、测试环境(testing)、生产环境(production)。</p>
<p>首先，会在开发环境中进行项目开发，往往开发环境大多数都是本地的电脑环境和局域网内的环境，当开发完毕后，然后会把项目部署到测试环境，测试环境一般是一台独立测试服务器的环境，项目测试通过后，最终把项目部署到生产环境，生产环境可以是机房或者云服务器等线上环境。</p>
<h3 id="2-项目整体介绍"><a href="#2-项目整体介绍" class="headerlink" title="2. 项目整体介绍"></a>2. 项目整体介绍</h3><h4 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h4><img src="/2025/10/10/sky-takeout-day01-note/image-20251010124754515.png" alt="image-20251010124754515" style="zoom:50%;">

<hr>
<h4 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h4><p><img src="/2025/10/10/sky-takeout-day01-note/image-20251010124845981.png" alt="image-20251010124845981"></p>
<p><strong>1). 用户层</strong></p>
<p>本项目中在构建系统管理后台的前端页面，我们会用到 H5、Vue.js、ElementUI、apache echarts(展示图表)等技术。而在构建移动端应用时，我们会使用到微信小程序。</p>
<p><strong>2). 网关层</strong></p>
<p>Nginx 是一个服务器，主要用来作为 Http 服务器，部署静态资源，访问性能高。在 Nginx 中还有两个比较重要的作用： 反向代理和负载均衡， 在进行项目部署时，要实现 Tomcat 的负载均衡，就可以通过 Nginx 来实现。</p>
<p><strong>3). 应用层</strong></p>
<p>SpringBoot： 快速构建 Spring 项目, 采用 “约定优于配置” 的思想, 简化 Spring 项目的配置开发。</p>
<p>SpringMVC：SpringMVC 是 spring 框架的一个模块，springmvc 和 spring 无需通过中间整合层进行整合，可以无缝集成。</p>
<p>Spring Task:  由 Spring 提供的定时任务框架。</p>
<p>httpclient:  主要实现了对 http 请求的发送。</p>
<p>Spring Cache:  由 Spring 提供的数据缓存框架</p>
<p>JWT:  用于对应用程序上的用户进行身份验证的标记。</p>
<p>阿里云 OSS:  对象存储服务，在项目中主要存储文件，如图片等。</p>
<p>Swagger： 可以自动的帮助开发人员生成接口文档，并对接口进行测试。</p>
<p>POI:  封装了对 Excel 表格的常用操作。</p>
<p>WebSocket: 一种通信网络协议，使客户端和服务器之间的数据交换更加简单，用于项目的来单、催单功能实现。</p>
<p><strong>4). 数据层</strong></p>
<p>MySQL： 关系型数据库, 本项目的核心业务数据都会采用 MySQL 进行存储。</p>
<p>Redis： 基于 key-value 格式存储的内存数据库, 访问速度快, 经常使用它做缓存。</p>
<p>Mybatis： 本项目持久层将会使用 Mybatis 开发。</p>
<p>pagehelper:  分页插件。</p>
<p>spring data redis:  简化 java 代码操作 Redis 的 API。</p>
<p><strong>5). 工具</strong></p>
<p>git: 版本控制工具, 在团队协作中, 使用该工具对项目中的代码进行管理。</p>
<p>maven: 项目构建工具。</p>
<p>junit：单元测试工具，开发人员功能实现完毕后，需要通过 junit 对功能进行单元测试。</p>
<p>postman:  接口测工具，模拟用户发起的各类 HTTP 请求，获取对应的响应结果。</p>
<hr>
<h4 id="产品原型"><a href="#产品原型" class="headerlink" title="产品原型"></a>产品原型</h4><p><strong>1). 管理端</strong></p>
<p>餐饮企业内部员工使用。 主要功能有: </p>
<table>
<thead>
<tr>
<th>模块</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>登录&#x2F;退出</td>
<td>内部员工必须登录后, 才可以访问系统管理后台</td>
</tr>
<tr>
<td>员工管理</td>
<td>管理员可以在系统后台对员工信息进行管理，包含查询、新增、编辑、禁用等功能</td>
</tr>
<tr>
<td>分类管理</td>
<td>主要对当前餐厅经营的 菜品分类 或 套餐分类 进行管理维护， 包含查询、新增、修改、删除等功能</td>
</tr>
<tr>
<td>菜品管理</td>
<td>主要维护各个分类下的菜品信息，包含查询、新增、修改、删除、启售、停售等功能</td>
</tr>
<tr>
<td>套餐管理</td>
<td>主要维护当前餐厅中的套餐信息，包含查询、新增、修改、删除、启售、停售等功能</td>
</tr>
<tr>
<td>订单管理</td>
<td>主要维护用户在移动端下的订单信息，包含查询、取消、派送、完成，以及订单报表下载等功能</td>
</tr>
<tr>
<td>数据统计</td>
<td>主要完成对餐厅的各类数据统计，如营业额、用户数量、订单等</td>
</tr>
</tbody></table>
<p><strong>2). 用户端</strong></p>
<p>移动端应用主要提供给消费者使用。主要功能有:</p>
<table>
<thead>
<tr>
<th>模块</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>登录&#x2F;退出</td>
<td>用户需要通过微信授权后登录使用小程序进行点餐</td>
</tr>
<tr>
<td>点餐-菜单</td>
<td>在点餐界面需要展示出菜品分类&#x2F;套餐分类, 并根据当前选择的分类加载其中的菜品信息, 供用户查询选择</td>
</tr>
<tr>
<td>点餐-购物车</td>
<td>用户选中的菜品就会加入用户的购物车, 主要包含 查询购物车、加入购物车、删除购物车、清空购物车等功能</td>
</tr>
<tr>
<td>订单支付</td>
<td>用户选完菜品&#x2F;套餐后, 可以对购物车菜品进行结算支付, 这时就需要进行订单的支付</td>
</tr>
<tr>
<td>个人信息</td>
<td>在个人中心页面中会展示当前用户的基本信息, 用户可以管理收货地址, 也可以查询历史订单数据</td>
</tr>
</tbody></table>
<h3 id="3-前端环境搭建"><a href="#3-前端环境搭建" class="headerlink" title="3. 前端环境搭建"></a>3. 前端环境搭建</h3><ul>
<li>直接在 heima 的 day01 资料中把 “前端运行环境” 中的 nginx-1.20.2 目录下的 nginx.exe 双击即可（注意 <strong>文件路径不能有中文</strong>）</li>
</ul>
<h3 id="4-后端环境搭建"><a href="#4-后端环境搭建" class="headerlink" title="4. 后端环境搭建"></a>4. 后端环境搭建</h3><h4 id="后端搭建环境注意事项"><a href="#后端搭建环境注意事项" class="headerlink" title="后端搭建环境注意事项"></a><strong>后端搭建环境注意事项</strong></h4><ul>
<li>注 1：lombok 版本改高一点，改成 1.18.30，如果版本低构建项目会报错，原因应该是 JDK 版本过高不兼容，比如我的是 JDK21，所以 1.18.30 才不会报错  <img src="/2025/10/10/sky-takeout-day01-note/Snipaste_2025-10-10_09-19-06.png" alt="Snipaste_2025-10-10_09-19-06" style="zoom:33%;"></li>
<li>注 2：数据库的账号密码要改成自己本机的 MySQL 的密码, 在 application-dev.yml 中修改, 否则会登录不上前端网站, 报数据库连接池连接不到的错误  <img src="/2025/10/10/sky-takeout-day01-note/Snipaste_2025-10-10_09-23-40.png" alt="Snipaste_2025-10-10_09-23-40" style="zoom:33%;"></li>
</ul>
<h4 id="数据库表说明"><a href="#数据库表说明" class="headerlink" title="数据库表说明"></a>数据库表说明</h4><table>
<thead>
<tr>
<th><strong>序号</strong></th>
<th><strong>表名</strong></th>
<th><strong>中文名</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>employee</td>
<td>员工表</td>
</tr>
<tr>
<td>2</td>
<td>category</td>
<td>分类表</td>
</tr>
<tr>
<td>3</td>
<td>dish</td>
<td>菜品表</td>
</tr>
<tr>
<td>4</td>
<td>dish_flavor</td>
<td>菜品口味表</td>
</tr>
<tr>
<td>5</td>
<td>setmeal</td>
<td>套餐表</td>
</tr>
<tr>
<td>6</td>
<td>setmeal_dish</td>
<td>套餐菜品关系表</td>
</tr>
<tr>
<td>7</td>
<td>user</td>
<td>用户表</td>
</tr>
<tr>
<td>8</td>
<td>address_book</td>
<td>地址表</td>
</tr>
<tr>
<td>9</td>
<td>shopping_cart</td>
<td>购物车表</td>
</tr>
<tr>
<td>10</td>
<td>orders</td>
<td>订单表</td>
</tr>
<tr>
<td>11</td>
<td>order_detail</td>
<td>订单明细表</td>
</tr>
</tbody></table>
<h4 id="前后端联调熟悉项目结构"><a href="#前后端联调熟悉项目结构" class="headerlink" title="前后端联调熟悉项目结构"></a><strong>前后端联调熟悉项目结构</strong></h4><ul>
<li>大体流程如下</li>
</ul>
<p><img src="/2025/10/10/sky-takeout-day01-note/image-20251010094303871.png" alt="image-20251010094303871"></p>
<h3 id="5-Nginx-反向代理介绍"><a href="#5-Nginx-反向代理介绍" class="headerlink" title="5. Nginx 反向代理介绍"></a>5. Nginx 反向代理介绍</h3><h4 id="反向代理好处："><a href="#反向代理好处：" class="headerlink" title="反向代理好处："></a>反向代理好处：</h4><img src="/2025/10/10/sky-takeout-day01-note/image-20251010100204967.png" alt="image-20251010100204967" style="zoom: 50%;">

<ul>
<li><p>提高访问速度</p>
<p>  因为 nginx 本身可以进行缓存，如果访问的同一接口，并且做了数据缓存，nginx 就直接可把数据返回，不需要真正地访问服务端，从而提高访问速度。</p>
</li>
<li><p>进行负载均衡</p>
<p>  所谓负载均衡, 就是把大量的请求按照我们指定的方式均衡的分配给集群中的每台服务器。</p>
</li>
<li><p>保证后端服务安全</p>
<p>  因为一般后台服务地址不会暴露，所以使用浏览器不能直接访问，可以把 nginx 作为请求访问的入口，请求到达 nginx 后转发到具体的服务中，从而保证后端服务的安全。</p>
</li>
</ul>
<h4 id="Nginx-的配置："><a href="#Nginx-的配置：" class="headerlink" title="Nginx 的配置："></a>Nginx 的配置：</h4><p><strong>proxy_pass：</strong> 该指令是用来设置代理服务器的地址，可以是主机名称，IP 地址加端口号等形式。</p>
<p>如上代码的含义是：监听 80 端口号， 然后当我们访问 <a href="http://localhost/">http://localhost</a>: 80&#x2F;api&#x2F;..&#x2F;..这样的接口的时候，它会通过 location &#x2F;api&#x2F; {} 这样的反向代理到 <a href="http://localhost/">http://localhost</a>: 8080&#x2F;admin&#x2F;上来。</p>
<ol>
<li>通常配置，在 nginx.conf 配置文件中，找到如下部分</li>
</ol>
<img src="/2025/10/10/sky-takeout-day01-note/image-20251010100742140.png" alt="image-20251010100742140" style="zoom: 50%;">

<ol start="2">
<li>在本项目中，负载均衡配置方式</li>
</ol>
<img src="/2025/10/10/sky-takeout-day01-note/image-20251010100820078.png" alt="image-20251010100820078" style="zoom:50%;">

<h3 id="6-完善登录功能"><a href="#6-完善登录功能" class="headerlink" title="6. 完善登录功能"></a>6. 完善登录功能</h3><p>问题：明文存储，安全性低<br><img src="/2025/10/10/sky-takeout-day01-note/image-20251010101048960.png" alt="image-20251010101048960" style="zoom: 50%;"></p>
<p>解决：使用 spring 框架中的 MD5 加密算法把 password 加密，在工具类 DigestUtils 中</p>
<h3 id="7-Swagger-接口文档介绍"><a href="#7-Swagger-接口文档介绍" class="headerlink" title="7. Swagger 接口文档介绍"></a>7. Swagger 接口文档介绍</h3><h4 id="导入接口文档"><a href="#导入接口文档" class="headerlink" title="导入接口文档"></a>导入接口文档</h4><p>​	将资料中的 json 文档文件导入接口平台如 Apifox 或 yapi, 选择 json 格式导入即可。</p>
<h4 id="Swagger-介绍和使用"><a href="#Swagger-介绍和使用" class="headerlink" title="Swagger 介绍和使用"></a>Swagger 介绍和使用</h4><h5 id="1）介绍："><a href="#1）介绍：" class="headerlink" title="1）介绍："></a>1）介绍：</h5><p>​	<img src="/2025/10/10/sky-takeout-day01-note/image-20251010105223256.png" alt="image-20251010105223256" style="zoom: 80%;"></p>
<p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务(<a href="https://swagger.io/">https://swagger.io/</a>)。 它的主要作用是：</p>
<ol>
<li><p>使得前后端分离开发更加方便，有利于团队协作</p>
</li>
<li><p>接口的文档在线自动生成，降低后端开发人员编写接口文档的负担</p>
</li>
<li><p>功能测试 </p>
<p> Spring 已经将 Swagger 纳入自身的标准，建立了 Spring-swagger 项目，现在叫 Springfox。通过在项目中引入 Springfox ，即可非常简单快捷的使用 Swagger。</p>
</li>
</ol>
<p>knife4j 是为 Java MVC 框架集成 Swagger 生成 Api 文档的增强解决方案, 前身是 swagger-bootstrap-ui, 取名 kni4j 是希望它能像一把匕首一样小巧, 轻量, 并且功能强悍!</p>
<p>目前，一般都使用 knife4j 框架。</p>
<hr>
<h5 id="2）使用方式"><a href="#2）使用方式" class="headerlink" title="2）使用方式"></a>2）使用方式</h5><img src="/2025/10/10/sky-takeout-day01-note/image-20251010105441159.png" alt="image-20251010105441159" style="zoom: 50%;">

<ul>
<li><p>导入 maven 坐标</p>
  <img src="/2025/10/10/sky-takeout-day01-note/image-20251010105648143.png" alt="image-20251010105648143" style="zoom: 50%;">
</li>
<li><p>配置类中加入 knife4j 配置代码</p>
  <img src="/2025/10/10/sky-takeout-day01-note/image-20251010105708341.png" alt="image-20251010105708341" style="zoom:50%;"></li>
<li><p>设置静态资源映射</p>
  <img src="/2025/10/10/sky-takeout-day01-note/image-20251010105731635.png" alt="image-20251010105731635" style="zoom: 67%;"></li>
<li><p>访问测试</p>
</li>
</ul>
<p>​	接口文档访问路径为 <a href="http://localhost/">http://localhost</a>: 8080&#x2F;doc.html</p>
<h5 id="3）Swagger-常用注解"><a href="#3）Swagger-常用注解" class="headerlink" title="3）Swagger 常用注解"></a>3）Swagger 常用注解</h5><img src="/2025/10/10/sky-takeout-day01-note/image-20251010110634376.png" alt="image-20251010110634376" style="zoom: 67%;">
]]></content>
      <tags>
        <tag>苍穹外卖</tag>
      </tags>
  </entry>
  <entry>
    <title>sky-takeout-day03-note</title>
    <url>/2025/10/12/sky-takeout-day03-note/</url>
    <content><![CDATA[<h1 id="Sky-takeout-Day03"><a href="#Sky-takeout-Day03" class="headerlink" title="Sky-takeout  Day03"></a>Sky-takeout  Day03</h1><hr>
<blockquote>
<p>【前言】<br>Day03 的 Task 是 <strong>公共字段自动填充</strong> 与 <strong>菜品管理相关功能</strong> 的代码开发，主要的菜品管理部分也是基础 CRUD 的练习，另外就是公共字段自动填充这种偏向技术一点的开发技巧的学习。</p>
<p>公共字段自动填充主要涉及到 枚举、注解、Spring的 AOP 、反射 的知识，用<strong>自定义注解</strong>实现了当执行 <em><strong>insert新增* 与 *update更新</strong></em>  时在Mapper层对创建人、创建时间和修改人、修改时间的字段的自动填充，避免了在Service设置属性的冗余重复代码。</p>
<p>剩余的菜品管理就是 CRUD 练习了， 只是相比前面的员工管理模块，菜品管理会涉及到菜品Dish与分类Category、套餐Setmeal的<strong>多表的联系</strong>，分析起来会更比员工管理的单表更复杂一点，要考虑的比较多，但是这部分练习能锻炼到我们对<strong>多表的业务功能的分析能力</strong>。</p>
</blockquote>
<span id="more"></span>

<h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ul>
<li>公共字段自动填充</li>
<li>新增菜品</li>
<li>菜品分页查询</li>
<li>删除菜品</li>
<li>修改菜品</li>
</ul>
<h2 id="1-公共字段自动填充"><a href="#1-公共字段自动填充" class="headerlink" title="1. 公共字段自动填充"></a>1. 公共字段自动填充</h2><h3 id="公共字段问题引入"><a href="#公共字段问题引入" class="headerlink" title="公共字段问题引入"></a>公共字段问题引入</h3><p>​	前面在<strong>新增员工</strong>或者<strong>新增菜品分类</strong>时需要设置创建时间、创建人、修改时间、修改人等字段，在<strong>编辑员工</strong>或者<strong>编辑菜品分类</strong>时需要设置修改时间、修改人等字段。这些字段属于<strong>公共字段</strong>，很多表中都会有这些字段，如下：</p>
<table>
<thead>
<tr>
<th><strong>序号</strong></th>
<th><strong>字段名</strong></th>
<th><strong>含义</strong></th>
<th><strong>数据类型</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>create_time</td>
<td>创建时间</td>
<td>datetime</td>
</tr>
<tr>
<td>2</td>
<td>create_user</td>
<td>创建人id</td>
<td>bigint</td>
</tr>
<tr>
<td>3</td>
<td>update_time</td>
<td>修改时间</td>
<td>datetime</td>
</tr>
<tr>
<td>4</td>
<td>update_user</td>
<td>修改人id</td>
<td>bigint</td>
</tr>
</tbody></table>
<p>对于这些字段，我们的赋值方式为： </p>
<p>1). 在新增数据时, 将createTime、updateTime 设置为当前时间, createUser、updateUser设置为当前登录用户ID。</p>
<p>2). 在更新数据时, 将updateTime 设置为当前时间, updateUser设置为当前登录用户ID。</p>
<p>代码层面，复制方式如下，通过set属性来设置这些公共字段的值</p>
<p>Insert时<br><img src="/2025/10/12/sky-takeout-day03-note/image-20251012092311740.png" alt="image-20251012092311740" style="zoom: 33%;"></p>
<p>Update时<br><img src="/2025/10/12/sky-takeout-day03-note/image-20251012092427001.png" alt="image-20251012092427001" style="zoom:33%;"></p>
<p>如果都按照上述的操作方式来处理这些公共字段, 需要在每一个业务方法中进行操作, 编码相对冗余、繁琐，那能不能对于这些公共字段在某个地方统一处理，来简化开发呢？</p>
<ul>
<li>答案是可以的，我们使用<strong>AOP切面编程，实现功能增强</strong>，来完成公共字段自动填充功能。</li>
</ul>
<p>这样做的好处：</p>
<ul>
<li>减少重复代码，提升开发效率；</li>
<li>保证字段赋值的一致性（如时间格式、操作人 ID 的来源统一）；</li>
<li>降低人为疏忽导致的字段遗漏风险。</li>
</ul>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p><strong>实现步骤：</strong></p>
<p>1). 自定义注解 AutoFill，用于标识需要进行公共字段自动填充的方法</p>
<p>2). 自定义切面类 AutoFillAspect，统一拦截加入了 AutoFill 注解的方法，通过反射为公共字段赋值</p>
<p>3). 在 Mapper 的方法上加入 AutoFill 注解</p>
<p>实现上述步骤，需掌握以下知识</p>
<p>**技术点：**枚举、注解、AOP、反射</p>
<h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><h4 id="1）编写注解，自定义注解AutoFill"><a href="#1）编写注解，自定义注解AutoFill" class="headerlink" title="1）编写注解，自定义注解AutoFill"></a>1）编写注解，自定义注解AutoFill</h4><p>在sky-server模块，创建com.sky.annotation包。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sky.enumeration.OperationType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义公共字段自动填充注解，用于标记需要自动填充公共字段的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoFill &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据库操作类型，如插入或更新 INSERT, UPDATE</span></span><br><span class="line">    OperationType <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在初始项目的枚举包中已定义了操作类型枚举<br><img src="/2025/10/12/sky-takeout-day03-note/image-20251012095830097.png" alt="image-20251012095830097" style="zoom:33%;"></p>
<h4 id="2）编写切面类-自定义AutoFillAspect切面"><a href="#2）编写切面类-自定义AutoFillAspect切面" class="headerlink" title="2）编写切面类, 自定义AutoFillAspect切面"></a>2）编写切面类, 自定义AutoFillAspect切面</h4><p>在sky-server模块，创建com.sky.aspect包。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sky.annotation.AutoFill;</span><br><span class="line"><span class="keyword">import</span> com.sky.constant.AutoFillConstant;</span><br><span class="line"><span class="keyword">import</span> com.sky.context.BaseContext;</span><br><span class="line"><span class="keyword">import</span> com.sky.enumeration.OperationType;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义切面类，处理公共字段自动填充逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoFillAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切入点，匹配所有标记了 <span class="doctag">@AutoFill</span> 注解的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 切入点表达式，匹配所有在 com.sky.mapper 包下的方法，并且这些方法上有 @AutoFill 注解</span></span><br><span class="line">    <span class="comment">// execution(* com.sky.mapper.*.*(..)) 匹配 com.sky.mapper 包及其子包下的所有方法</span></span><br><span class="line">    <span class="comment">// &amp;&amp; @annotation(com.sky.annotation.AutoFill) 匹配那些被 @AutoFill 注解标记的方法</span></span><br><span class="line">    <span class="comment">// 这样，任何调用 com.sky.mapper 包下的方法且这些方法被 @AutoFill 注解标记时，</span></span><br><span class="line">    <span class="comment">// 都会触发这个切入点，从而可以在相应的通知中实现自动填充公共字段的逻辑</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.sky.mapper.*.*(..)) &amp;&amp; @annotation(com.sky.annotation.AutoFill)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoFillPointCut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知，在切入点方法执行前，执行通知--进行公共字段自动填充逻辑 (反射 + AOP)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 连接点信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;autoFillPointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoFill</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;自动填充公共字段...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.获取当前拦截方法的数据库操作类型（插入或更新）</span></span><br><span class="line">        <span class="comment">// 注意这里自动导包的话要导入 org.aspectj.lang.reflect.MethodSignature，</span></span><br><span class="line">        <span class="comment">// 不是 java.lang.reflect.MethodSignature</span></span><br><span class="line">        <span class="comment">// 否则调用不了getMethod()方法</span></span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();  <span class="comment">// 获取方法签名</span></span><br><span class="line">        <span class="type">AutoFill</span> <span class="variable">annotation</span> <span class="operator">=</span> signature.getMethod().getAnnotation(AutoFill.class);<span class="comment">// 获取方法上的注解</span></span><br><span class="line">        <span class="type">OperationType</span> <span class="variable">operationType</span> <span class="operator">=</span> annotation.value(); <span class="comment">// 获取注解的值（操作类型）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.获取当前拦截方法的参数对象（实体类对象）</span></span><br><span class="line">        Object[] args = joinPoint.getArgs(); <span class="comment">// 获取方法参数</span></span><br><span class="line">        <span class="keyword">if</span> (args == <span class="literal">null</span> || args.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 如果没有参数，直接返回</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">entity</span> <span class="operator">=</span> args[<span class="number">0</span>]; <span class="comment">// 项目约定第一个参数是实体类对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.根据操作类型，准备需要填充的公共字段及其值（如创建时间、更新时间、创建人、更新人等）</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.使用反射机制，给实体类对象的公共字段赋值（如创建时间、更新时间、创建人、更新人等）</span></span><br><span class="line">        <span class="keyword">if</span>(operationType == OperationType.INSERT) &#123;</span><br><span class="line">            <span class="comment">// 插入操作，准备插入时需要填充的字段及其值 (四个字段)</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 通过反射获取实体类的公共字段的set方法</span></span><br><span class="line">                <span class="type">Method</span> <span class="variable">setCreateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_USER, Long.class);</span><br><span class="line">                <span class="type">Method</span> <span class="variable">setCreateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_TIME, LocalDateTime.class);</span><br><span class="line">                <span class="type">Method</span> <span class="variable">setUpdateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);</span><br><span class="line">                <span class="type">Method</span> <span class="variable">setUpdateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);</span><br><span class="line">                <span class="comment">// 调用set方法，给实体类对象的公共字段赋值</span></span><br><span class="line">                setCreateUser.invoke(entity, currentId);</span><br><span class="line">                setCreateTime.invoke(entity, now);</span><br><span class="line">                setUpdateUser.invoke(entity, currentId);</span><br><span class="line">                setUpdateTime.invoke(entity, now);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (operationType == OperationType.UPDATE) &#123;</span><br><span class="line">            <span class="comment">// 更新操作，准备更新时需要填充的字段及其值 (两个字段)</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 通过反射获取实体类的公共字段的set方法</span></span><br><span class="line">                <span class="type">Method</span> <span class="variable">setUpdateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);</span><br><span class="line">                <span class="type">Method</span> <span class="variable">setUpdateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);</span><br><span class="line">                <span class="comment">// 调用set方法，给实体类对象的公共字段赋值</span></span><br><span class="line">                setUpdateUser.invoke(entity, currentId);</span><br><span class="line">                setUpdateTime.invoke(entity, now);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="3）在Mapper的编辑（插入、更新）相关方法加上注解"><a href="#3）在Mapper的编辑（插入、更新）相关方法加上注解" class="headerlink" title="3）在Mapper的编辑（插入、更新）相关方法加上注解"></a>3）在Mapper的编辑（插入、更新）相关方法加上注解<img src="/2025/10/12/sky-takeout-day03-note/image-20251012100810762.png" alt="image-20251012100810762" style="zoom:33%;"></h4><p><strong>同时</strong>，将业务层为公共字段赋值的代码注释掉。</p>
<p>1). 将员工管理的新增和编辑方法中的公共字段赋值的代码注释。</p>
<p>2). 将菜品分类管理的新增和修改方法中的公共字段赋值的代码注释。</p>
<h3 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h3><ul>
<li><p>初步测试，发现前置通知成功拦截方法</p>
  <img src="/2025/10/12/sky-takeout-day03-note/image-20251012101400679.png" alt="image-20251012101400679" style="zoom:33%;">
</li>
<li><p>完善切面类中前置通知的公共字段自动填充逻辑后，进行调试，观察线程和变量捕获情况</p>
  <img src="/2025/10/12/sky-takeout-day03-note/image-20251012121509064.png" alt="image-20251012121509064" style="zoom:50%;"></li>
</ul>
<h2 id="2-新增菜品"><a href="#2-新增菜品" class="headerlink" title="2.新增菜品"></a>2.新增菜品</h2><h3 id="需求分析与接口设计"><a href="#需求分析与接口设计" class="headerlink" title="需求分析与接口设计"></a>需求分析与接口设计</h3><p>新增菜品的<strong>产品原型</strong>：<br><img src="/2025/10/12/sky-takeout-day03-note/image-20251012122838118.png" alt="image-20251012122838118" style="zoom: 50%;"></p>
<p><strong>业务规则：</strong></p>
<ul>
<li>菜品名称必须是唯一的</li>
<li>菜品必须属于某个分类下，不能单独存在</li>
<li>新增菜品时可以根据情况选择菜品的口味</li>
<li>每个菜品必须对应一张图片</li>
</ul>
<p>**接口设计：**明确每个接口的请求方式、请求路径、传入参数和返回值。</p>
<ul>
<li>根据类型查询分类（已完成）</li>
<li>文件上传</li>
<li>新增菜品</li>
</ul>
<p><strong>1. 根据类型查询分类</strong></p>
<p><img src="/2025/10/12/sky-takeout-day03-note/../../my-note/typora/my-sky-takeout-note/day03.assets/image-20221121165033612-1760243432816-9.png" alt="image-20221121165033612" style="zoom:50%;"> <img src="/2025/10/12/sky-takeout-day03-note/image-20221121165043619.png" alt="image-20221121165043619" style="zoom:50%;"></p>
<p><strong>2. 文件上传</strong></p>
<p><img src="/2025/10/12/sky-takeout-day03-note/../../my-note/typora/my-sky-takeout-note/day03.assets/image-20221121165201319-1760243432816-11.png" alt="image-20221121165201319" style="zoom:50%;"><img src="/2025/10/12/sky-takeout-day03-note/image-20221121165215634.png" alt="image-20221121165215634" style="zoom:50%;"></p>
<p><strong>3. 新增菜品</strong></p>
<p><img src="/2025/10/12/sky-takeout-day03-note/image-20221121165254961.png" alt="image-20221121165254961" style="zoom: 50%;"><img src="/2025/10/12/sky-takeout-day03-note/../../TODO/cqwm/讲义/day03/assets/image-20221121165308394.png" alt="image-20221121165308394" style="zoom: 50%;"><img src="/2025/10/12/sky-takeout-day03-note/../../my-note/typora/my-sky-takeout-note/day03.assets/image-20221121165322687-1760243432807-7.png" alt="image-20221121165322687" style="zoom: 50%;"></p>
<p>**数据库设计：**涉及两张表——dish和dish_flavor，通过逻辑外键建立联系</p>
<p><strong>1). 菜品表:dish</strong></p>
<table>
<thead>
<tr>
<th><strong>字段名</strong></th>
<th><strong>数据类型</strong></th>
<th><strong>说明</strong></th>
<th><strong>备注</strong></th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td>主键</td>
<td>自增</td>
</tr>
<tr>
<td>name</td>
<td>varchar(32)</td>
<td>菜品名称</td>
<td>唯一</td>
</tr>
<tr>
<td>category_id</td>
<td>bigint</td>
<td>分类id</td>
<td>逻辑外键</td>
</tr>
<tr>
<td>price</td>
<td>decimal(10,2)</td>
<td>菜品价格</td>
<td></td>
</tr>
<tr>
<td>image</td>
<td>varchar(255)</td>
<td>图片路径</td>
<td></td>
</tr>
<tr>
<td>description</td>
<td>varchar(255)</td>
<td>菜品描述</td>
<td></td>
</tr>
<tr>
<td>status</td>
<td>int</td>
<td>售卖状态</td>
<td>1起售 0停售</td>
</tr>
<tr>
<td>create_time</td>
<td>datetime</td>
<td>创建时间</td>
<td></td>
</tr>
<tr>
<td>update_time</td>
<td>datetime</td>
<td>最后修改时间</td>
<td></td>
</tr>
<tr>
<td>create_user</td>
<td>bigint</td>
<td>创建人id</td>
<td></td>
</tr>
<tr>
<td>update_user</td>
<td>bigint</td>
<td>最后修改人id</td>
<td></td>
</tr>
</tbody></table>
<p><strong>2). 菜品口味表:dish_flavor</strong></p>
<table>
<thead>
<tr>
<th><strong>字段名</strong></th>
<th><strong>数据类型</strong></th>
<th><strong>说明</strong></th>
<th><strong>备注</strong></th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td>主键</td>
<td>自增</td>
</tr>
<tr>
<td>dish_id</td>
<td>bigint</td>
<td>菜品id</td>
<td>逻辑外键</td>
</tr>
<tr>
<td>name</td>
<td>varchar(32)</td>
<td>口味名称</td>
<td></td>
</tr>
<tr>
<td>value</td>
<td>varchar(255)</td>
<td>口味值</td>
<td></td>
</tr>
</tbody></table>
<h3 id="代码编写-1"><a href="#代码编写-1" class="headerlink" title="代码编写"></a>代码编写</h3><h4 id="1-文件上传"><a href="#1-文件上传" class="headerlink" title="1. 文件上传"></a>1. 文件上传</h4><p>在项目初始代码已有一部分阿里OSS配置文件<br><strong>AliOssProperties.java</strong>  （阿里云OSS属性配置JavaBean类）</p>
<p><img src="/2025/10/12/sky-takeout-day03-note/image-20251012142649962.png" alt="image-20251012142649962"></p>
<p><strong>application.yml</strong> （这里读取了配置属性JavaBean类的字段值）</p>
<p><img src="/2025/10/12/sky-takeout-day03-note/image-20251012142702849.png" alt="image-20251012142702849"></p>
<p><strong>AliOssUtil.java</strong> （这里是文件上传的具体实现）</p>
<p><img src="/2025/10/12/sky-takeout-day03-note/image-20251012142710484.png" alt="image-20251012142710484"></p>
<p><strong>OssConfiguration.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sky.properties.AliOssProperties;</span><br><span class="line"><span class="keyword">import</span> com.sky.utils.AliOssUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OSS配置类, 用于创建AliOssUtil对象, 读取配置文件中的OSS相关配置, 并提供给AliOssUtil使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 表示该类是一个配置类, 可以包含Bean定义</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 将方法的返回值作为Bean对象注册到Spring容器中</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span> <span class="comment">// 当容器中没有指定类型的Bean时, 才会创建该Bean</span></span><br><span class="line">    <span class="keyword">public</span> AliOssUtil <span class="title function_">aliOssUtil</span><span class="params">(AliOssProperties aliOssProperties)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始创建阿里云文件上传工具类对象AliOssUtil, &#123;&#125;&quot;</span>, aliOssProperties);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AliOssUtil</span>(</span><br><span class="line">                aliOssProperties.getEndpoint(),</span><br><span class="line">                aliOssProperties.getAccessKeyId(),</span><br><span class="line">                aliOssProperties.getAccessKeySecret(),</span><br><span class="line">                aliOssProperties.getBucketName()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>CommonController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.controller.admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sky.constant.MessageConstant;</span><br><span class="line"><span class="keyword">import</span> com.sky.result.Result;</span><br><span class="line"><span class="keyword">import</span> com.sky.utils.AliOssUtil;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/common&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;通用接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AliOssUtil aliOssUtil;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件访问路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;文件上传&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;文件上传: &#123;&#125;&quot;</span>, file);</span><br><span class="line">        <span class="comment">// 获取原始文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 获取文件后缀名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">extension</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">// 构造新文件名(防止文件名重复)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> UUID.randomUUID().toString() + extension;</span><br><span class="line">        <span class="comment">// 上传文件到OSS, 并接收返回的文件访问路径</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileUrl</span> <span class="operator">=</span> aliOssUtil.upload(file.getBytes(), objectName);</span><br><span class="line">            <span class="comment">// 返回文件访问路径</span></span><br><span class="line">            <span class="keyword">return</span> Result.success(fileUrl);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;文件上传失败: &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.error(MessageConstant.UPLOAD_FAILED); <span class="comment">// 上传失败</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="2-新增菜品-1"><a href="#2-新增菜品-1" class="headerlink" title="2. 新增菜品"></a>2. 新增菜品</h4><p><strong>DishController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.controller.admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sky.dto.DishDTO;</span><br><span class="line"><span class="keyword">import</span> com.sky.result.Result;</span><br><span class="line"><span class="keyword">import</span> com.sky.service.DishService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/dish&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;菜品管理&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dishDTO 菜品信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增菜品&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Void&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDTO dishDTO)</span> &#123;  <span class="comment">// 这里DTO信息记得要加RequestBody，否则接受不到数据 @RequestBody 将请求体中的json数据转换为对应的Java对象</span></span><br><span class="line">        log.info(<span class="string">&quot;新增菜品: &#123;&#125;&quot;</span>, dishDTO);</span><br><span class="line">        dishService.saveWithFlavor(dishDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>DishServiceImpl.java</strong></p>
<p>这里注意涉及多表要<strong>开启事务</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sky.dto.DishDTO;</span><br><span class="line"><span class="keyword">import</span> com.sky.entity.Dish;</span><br><span class="line"><span class="keyword">import</span> com.sky.entity.DishFlavor;</span><br><span class="line"><span class="keyword">import</span> com.sky.mapper.DishFlavorMapper;</span><br><span class="line"><span class="keyword">import</span> com.sky.mapper.DishMapper;</span><br><span class="line"><span class="keyword">import</span> com.sky.service.DishService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DishService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishMapper dishMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishFlavorMapper dishFlavorMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增菜品，同时保存对应的口味数据, 所以方法名字WithFlavor体现出来, 需要操作两张表：dish、dish_flavor, 需要开启事务, 保证数据一致性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dishDTO 菜品信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>  <span class="comment">// 涉及多表操作，开启事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDTO dishDTO)</span> &#123;</span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dish</span>();</span><br><span class="line">        BeanUtils.copyProperties(dishDTO, dish);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 向菜品表中插入 1 条数据，保存菜品的基本信息到菜品表dish</span></span><br><span class="line">        dishMapper.insert(dish);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 向菜品口味表中插入 n 条数据（一个菜品可能有0 或多个以上口味），保存菜品的口味数据到菜品口味表dish_flavor</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dish.getId(); <span class="comment">// 获取菜品id</span></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDTO.getFlavors(); <span class="comment">// 获取口味数据</span></span><br><span class="line">        <span class="comment">// 需要判断flavors是否为空，不为空才进行插入</span></span><br><span class="line">        <span class="keyword">if</span> (flavors != <span class="literal">null</span> &amp;&amp; !flavors.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 遍历口味数据，逐个设置口味对应的菜品id</span></span><br><span class="line">            flavors.forEach(flavor -&gt; flavor.setDishId(dishId));</span><br><span class="line">            <span class="comment">// 批量插入口味数据</span></span><br><span class="line">            dishFlavorMapper.insertBatch(flavors);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>DishMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sky.annotation.AutoFill;</span><br><span class="line"><span class="keyword">import</span> com.sky.entity.Dish;</span><br><span class="line"><span class="keyword">import</span> com.sky.enumeration.OperationType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询菜品数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId 分类Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select count(id) from dish where category_id = #&#123;categoryId&#125;&quot;)</span></span><br><span class="line">    Integer <span class="title function_">countByCategoryId</span><span class="params">(Long categoryId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入菜品, 这里记得需要在xml设置属性：useKeyProperty：主键自增, keyProperty：插入后会将生成的主键回填到实体类对象中的id属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dish 菜品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AutoFill(OperationType.INSERT)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Dish dish)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>DishFlavorMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sky.entity.DishFlavor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishFlavorMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量插入口味数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> flavors 口味数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertBatch</span><span class="params">(List&lt;DishFlavor&gt; flavors)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>DishMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sky.mapper.DishMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into dish</span><br><span class="line">        (name, category_id, price, image, description, status, create_time, update_time, create_user, update_user)</span><br><span class="line">        values</span><br><span class="line">        (#&#123;name&#125;, #&#123;categoryId&#125;, #&#123;price&#125;, #&#123;image&#125;, #&#123;description&#125;, #&#123;status&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;, #&#123;createUser&#125;, #&#123;updateUser&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>DishFlavorMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sky.mapper.DishFlavorMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBatch&quot;</span>&gt;</span></span><br><span class="line">        insert into dish_flavor (dish_id, name, value) values</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;flavors&quot;</span> <span class="attr">item</span>=<span class="string">&quot;df&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            (#&#123;df.dishId&#125;, #&#123;df.name&#125;, #&#123;df.value&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="Debug问题发现记录"><a href="#Debug问题发现记录" class="headerlink" title="Debug问题发现记录"></a>Debug问题发现记录</h3><h4 id="1）在Controller那里，DTO是json传来的，需要加RequestBody注解，否则会导致接收不到数据，全为null"><a href="#1）在Controller那里，DTO是json传来的，需要加RequestBody注解，否则会导致接收不到数据，全为null" class="headerlink" title="1）在Controller那里，DTO是json传来的，需要加RequestBody注解，否则会导致接收不到数据，全为null"></a>1）在Controller那里，DTO是json传来的，需要加RequestBody注解，否则会导致接收不到数据，全为null</h4><h4 id="2）在dishMapper-xml那里不要忘记加两个属性值配置：useGeneratedKeys-true-和-keyProperty-”id”"><a href="#2）在dishMapper-xml那里不要忘记加两个属性值配置：useGeneratedKeys-true-和-keyProperty-”id”" class="headerlink" title="2）在dishMapper.xml那里不要忘记加两个属性值配置：useGeneratedKeys &#x3D; true 和 keyProperty &#x3D;  ”id”"></a>2）在dishMapper.xml那里不要忘记加两个属性值配置：useGeneratedKeys &#x3D; true 和 keyProperty &#x3D;  ”id”</h4><h4 id="3）dish-flavor表没有公共字段需要填充，不用加AutoFill注解"><a href="#3）dish-flavor表没有公共字段需要填充，不用加AutoFill注解" class="headerlink" title="3）dish_flavor表没有公共字段需要填充，不用加AutoFill注解"></a>3）dish_flavor表没有公共字段需要填充，不用加AutoFill注解</h4><h4 id="4）还有一个Bug是因为dishFlavor中insert-into的字段顺序和foreach里面的顺序没对应上，导致insertBatch操作一直有问题但是没报错，因为一开始那里是用代码补全来写的，后面仔细看才发现顺序没对上😭"><a href="#4）还有一个Bug是因为dishFlavor中insert-into的字段顺序和foreach里面的顺序没对应上，导致insertBatch操作一直有问题但是没报错，因为一开始那里是用代码补全来写的，后面仔细看才发现顺序没对上😭" class="headerlink" title="4）还有一个Bug是因为dishFlavor中insert into的字段顺序和foreach里面的顺序没对应上，导致insertBatch操作一直有问题但是没报错，因为一开始那里是用代码补全来写的，后面仔细看才发现顺序没对上😭"></a>4）还有一个Bug是因为dishFlavor中insert into的字段顺序和foreach里面的顺序没对应上，导致insertBatch操作一直有问题但是没报错，因为一开始那里是用代码补全来写的，后面仔细看才发现顺序没对上😭</h4><h4 id="5）写分页查询发现遗漏了一点，这里做个补充，涉及多表要开启事务-Transactional注解保证原子性（在Service那里）"><a href="#5）写分页查询发现遗漏了一点，这里做个补充，涉及多表要开启事务-Transactional注解保证原子性（在Service那里）" class="headerlink" title="5）写分页查询发现遗漏了一点，这里做个补充，涉及多表要开启事务@Transactional注解保证原子性（在Service那里）"></a>5）写分页查询发现遗漏了一点，这里做个补充，涉及多表要<strong>开启事务</strong>@Transactional注解保证原子性（在Service那里）</h4><h3 id="功能测试-1"><a href="#功能测试-1" class="headerlink" title="功能测试"></a>功能测试</h3><h4 id="文件上传测试"><a href="#文件上传测试" class="headerlink" title="文件上传测试"></a>文件上传测试</h4><p>在文件上传时，若文件成功上传到阿里云，但是前端没有回显，需要在阿里云做如下配置 ：<br>设置文件管理的 “阻止公共访问” 和 ”读写权限”</p>
<p>1）关闭阻止公共访问<br><img src="/2025/10/12/sky-takeout-day03-note/image-20251012141856723.png" alt="image-20251012141856723" style="zoom:33%;"></p>
<p>2）读写权限设为公共读<br><img src="/2025/10/12/sky-takeout-day03-note/image-20251012141904531.png" alt="image-20251012141904531" style="zoom:33%;"></p>
<p>设置好后发现图片显示就没问题了</p>
<p>前端图片显示正常<br><img src="/2025/10/12/sky-takeout-day03-note/image-20251012142202054.png" alt="image-20251012142202054" style="zoom: 25%;"></p>
<p>成功上传到阿里云OSS<br><img src="/2025/10/12/sky-takeout-day03-note/image-20251012142212893.png" alt="image-20251012142212893" style="zoom:25%;"></p>
<h4 id="新增菜品测试"><a href="#新增菜品测试" class="headerlink" title="新增菜品测试"></a>新增菜品测试</h4><p>注意：在测试新增菜品时，名字不要设置成在表中已有的，我一开始拿“北冰洋”来测试发现一直失败，后面才发现是名字要唯一，表中初始自带了北冰洋所以测试不了</p>
<p>测试成功图，因为还没做分页查询，所以直接查看数据库是否添加成功新数据</p>
<p>菜品添加成功<br><img src="/2025/10/12/sky-takeout-day03-note/image-20251012153940610.png" alt="image-20251012153940610"></p>
<p>口味添加成功<br><img src="/2025/10/12/sky-takeout-day03-note/image-20251012155802631.png" alt="image-20251012155802631"></p>
<h2 id="3-菜品分页查询"><a href="#3-菜品分页查询" class="headerlink" title="3.菜品分页查询"></a>3.菜品分页查询</h2><h3 id="需求分析与接口设计-1"><a href="#需求分析与接口设计-1" class="headerlink" title="需求分析与接口设计"></a>需求分析与接口设计</h3><p><strong>业务规则：</strong></p>
<ul>
<li>根据页码展示菜品信息</li>
<li>每页展示10条数据</li>
<li>分页查询时可以根据需要输入菜品名称、菜品分类、菜品状态进行查询</li>
</ul>
<p><strong>接口设计：</strong><br><img src="/2025/10/12/sky-takeout-day03-note/image-20221121202019258.png" alt="image-20221121202019258" style="zoom:50%;"> <img src="/2025/10/12/sky-takeout-day03-note/../../TODO/cqwm/讲义/day03/assets/image-20221121202033284.png" alt="image-20221121202033284" style="zoom:50%;"></p>
<ul>
<li><p>这里大体上步骤跟前面员工分页查询一致，但是需要注意的是由于前端展示Dish时还需要分类名称，所以多封装了一个 <strong>DishVO</strong> （除了多分类名称，还有口味数组）实体类作为分页结果<strong>Page的泛型</strong>。</p>
  <img src="/2025/10/12/sky-takeout-day03-note/image-20251012165640112.png" alt="image-20251012165640112" style="zoom:33%;">
</li>
<li><p>此外就是这个分页查询会涉及到<strong>dish和category两张表</strong>的，用了一个<strong>左外连接</strong>来查询二表信息。</p>
</li>
</ul>
<h3 id="代码编写-2"><a href="#代码编写-2" class="headerlink" title="代码编写"></a>代码编写</h3><p><strong>DishController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询菜品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dishPageQueryDTO 分页查询参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 分页查询结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;分页查询菜品&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;PageResult&gt; <span class="title function_">page</span><span class="params">(DishPageQueryDTO dishPageQueryDTO)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;分页查询菜品: &#123;&#125;&quot;</span>, dishPageQueryDTO);</span><br><span class="line">    <span class="type">PageResult</span> <span class="variable">pageResult</span> <span class="operator">=</span> dishService.pageQuery(dishPageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>DishServiceImpl.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询菜品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dishPageQueryDTO 分页查询参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 分页查询结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">pageQuery</span><span class="params">(DishPageQueryDTO dishPageQueryDTO)</span> &#123;</span><br><span class="line">    PageHelper.startPage(dishPageQueryDTO.getPage(), dishPageQueryDTO.getPageSize());</span><br><span class="line">    <span class="comment">// 需要注意的是这里 Page 的泛型是 DishVO， 因为返回给前端的视图，除了要有菜品信息Dish，还要有分类名称categoryName，而项目中的 DishVO 中已经做好了分类名称的封装</span></span><br><span class="line">    <span class="comment">// 具体分类名称的封装是在 mapper.xml 中通过 left join 关联查询的 (c.name as categoryName), 见 dishMapper.xml</span></span><br><span class="line">    Page&lt;DishVO&gt; page = dishMapper.pageQuery(dishPageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(page.getTotal(), page.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>DishMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;pageQuery&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sky.vo.DishVO&quot;</span>&gt;</span></span><br><span class="line">        select d.*, c.name ascategoryName</span><br><span class="line">        from dish d left outer join category c</span><br><span class="line">        on d.category_id = c.id</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and d.name like concat(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span>&gt;</span><br><span class="line">                and d.category_id = #&#123;categoryId&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">                and d.status = #&#123;status&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        order by d.update_time desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="功能测试-2"><a href="#功能测试-2" class="headerlink" title="功能测试"></a>功能测试</h3><p>接口文档测试</p>
<p><img src="/2025/10/12/sky-takeout-day03-note/image-20251012170915227.png" alt="image-20251012170915227"></p>
<p>前后端联调测试（图片不在我的阿里云所以显示不了，这是正常的）</p>
<p><img src="/2025/10/12/sky-takeout-day03-note/image-20251012170933704.png" alt="image-20251012170933704"></p>
<h2 id="4-删除菜品"><a href="#4-删除菜品" class="headerlink" title="4.删除菜品"></a>4.删除菜品</h2><h3 id="需求分析与接口设计-2"><a href="#需求分析与接口设计-2" class="headerlink" title="需求分析与接口设计"></a>需求分析与接口设计</h3><p><strong>业务规则：</strong></p>
<ul>
<li>可以一次删除一个菜品，也可以批量删除菜品</li>
<li>起售中的菜品不能删除</li>
<li>被套餐关联的菜品不能删除</li>
<li>删除菜品后，关联的口味数据也需要删除掉</li>
</ul>
<p><strong>接口设计:</strong><br><img src="/2025/10/12/sky-takeout-day03-note/image-20251012171359093.png" alt="image-20251012171359093" style="zoom: 50%;"></p>
<p>**注意：**删除一个菜品和批量删除菜品共用一个接口，故ids可包含多个菜品id,之间用逗号分隔。</p>
<p><strong>表设计：</strong></p>
<p>菜品删除会涉及三张表<br><img src="/2025/10/12/sky-takeout-day03-note/image-20251012171525991.png" alt="image-20251012171525991" style="zoom:33%;"></p>
<p><strong>注意事项：</strong></p>
<ul>
<li>在dish表中删除菜品基本数据时，同时，也要把关联在dish_flavor表中的数据一块删除。</li>
<li>setmeal_dish表为菜品和套餐关联的中间表。</li>
<li>若删除的菜品数据关联着某个套餐，此时，删除失败。</li>
<li>若要删除套餐关联的菜品数据，先解除两者关联，再对菜品进行删除。</li>
</ul>
<h3 id="代码编写-3"><a href="#代码编写-3" class="headerlink" title="代码编写"></a>代码编写</h3><p><strong>DishController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * (批量)删除菜品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids 菜品id，多个id用逗号分隔</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;删除菜品&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Void&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span> &#123; <span class="comment">// 这里用@RequestParam注解接收ids参数</span></span><br><span class="line">    log.info(<span class="string">&quot;(批量)删除菜品: &#123;&#125;&quot;</span>, ids);</span><br><span class="line">    dishService.deleteBatch(ids);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>DishServiceImpl.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * (批量)删除菜品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids 菜品id，多个id用逗号分隔</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span>  <span class="comment">// 涉及多表操作，开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBatch</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    <span class="comment">// 菜品处于起售状态，不能删除</span></span><br><span class="line">    <span class="keyword">for</span>(Long id : ids) &#123;</span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishMapper.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(dish.getStatus(), StatusConstant.ENABLE)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeletionNotAllowedException</span>(MessageConstant.DISH_ON_SALE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 菜品被套餐关联，不能删除</span></span><br><span class="line">    List&lt;Long&gt; setmealIds = setmealDishMapper.getSetmealIdsByDishIds(ids);</span><br><span class="line">    <span class="keyword">if</span>(setmealIds != <span class="literal">null</span> &amp;&amp; !setmealIds.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeletionNotAllowedException</span>(MessageConstant.DISH_BE_RELATED_BY_SETMEAL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里有个优化，为了避免循环删除多次sql操作，可以直接批量删除，用in语句 (多次SQL语句执行效率低)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除菜品数据</span></span><br><span class="line">    <span class="comment">// SQL: delete from dish where id in (1, 2, 3);</span></span><br><span class="line">    dishMapper.deleteBatchByIds(ids);</span><br><span class="line">    <span class="comment">// 删除菜品关联的口味数据</span></span><br><span class="line">    <span class="comment">// SQL: delete from dish_flavor where dish_id in (1, 2, 3);</span></span><br><span class="line">    dishFlavorMapper.deleteBatchByDishIds(ids);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>DishMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询菜品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 菜品id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 菜品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from dish where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">Dish <span class="title function_">getById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量删除菜品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids 菜品id，多个id用逗号分隔</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteBatchByIds</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>DishMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBatchByIds&quot;</span>&gt;</span></span><br><span class="line">    delete from dish</span><br><span class="line">    where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>SetmealDishMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealDishMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据菜品id查询对应的套餐id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dishIds 菜品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 套餐id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Long&gt; <span class="title function_">getSetmealIdsByDishIds</span><span class="params">(List&lt;Long&gt; dishIds)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SetmealDishMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sky.mapper.SetmealDishMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getSetmealIdsByDishIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">        select setmeal_id from setmeal_dish</span><br><span class="line">        where dish_id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;dishIds&quot;</span> <span class="attr">item</span>=<span class="string">&quot;dishId&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;dishId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>DishFlavorMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据菜品集合ids批量删除对应的口味数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dishIds 菜品id，多个id用逗号分隔</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteBatchByDishIds</span><span class="params">(List&lt;Long&gt; dishIds)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>DishFlavorMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBatchByDishIds&quot;</span>&gt;</span></span><br><span class="line">    delete from dish_flavor</span><br><span class="line">    where dish_id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;dishIds&quot;</span> <span class="attr">item</span>=<span class="string">&quot;dishId&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;dishId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="功能测试-3"><a href="#功能测试-3" class="headerlink" title="功能测试"></a>功能测试</h3><p>略</p>
<h2 id="5-修改菜品"><a href="#5-修改菜品" class="headerlink" title="5. 修改菜品"></a>5. 修改菜品</h2><h3 id="需求分析与接口设计-3"><a href="#需求分析与接口设计-3" class="headerlink" title="需求分析与接口设计"></a>需求分析与接口设计</h3><p><strong>修改菜品原型</strong><br><img src="/2025/10/12/sky-takeout-day03-note/image-20251012183851728.png" alt="image-20251012183851728" style="zoom: 50%;"></p>
<p><strong>接口设计：</strong></p>
<ul>
<li>根据id查询菜品</li>
<li>根据类型查询分类(已实现)</li>
<li>文件上传(已实现)</li>
<li>修改菜品</li>
</ul>
<img src="/2025/10/12/sky-takeout-day03-note/image-20251012184023473.png" alt="image-20251012184023473" style="zoom: 50%;">

<p>这里要注意修改菜品 ，<strong>id字段是必须的</strong><br><img src="/2025/10/12/sky-takeout-day03-note/image-20251012184045407.png" alt="image-20251012184045407" style="zoom:50%;"></p>
<h3 id="代码编写-4"><a href="#代码编写-4" class="headerlink" title="代码编写"></a>代码编写</h3><p><strong>DishController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改菜品, 同时更新对应的口味数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dishDTO 菜品信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;修改菜品&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Void&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDTO dishDTO)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;修改菜品: &#123;&#125;&quot;</span>, dishDTO);</span><br><span class="line">    dishService.updateWithFlavor(dishDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>DishServiceImpl.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改菜品，同时更新对应的口味数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dishDTO 菜品信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span>  <span class="comment">// 涉及多表操作，开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDTO dishDTO)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 更新菜品基本信息到菜品表dish</span></span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dish</span>();</span><br><span class="line">    BeanUtils.copyProperties(dishDTO, dish);</span><br><span class="line">    dishMapper.update(dish);</span><br><span class="line"></span><br><span class="line">    List&lt;Long&gt; ids = List.of(dishDTO.getId());</span><br><span class="line">    <span class="comment">// 删除原有口味数据</span></span><br><span class="line">    dishFlavorMapper.deleteBatchByDishIds(ids);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新插入口味数据</span></span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishDTO.getFlavors(); <span class="comment">// 获取口味数据</span></span><br><span class="line">    <span class="comment">// 需要判断flavors是否为空，不为空才进行插入</span></span><br><span class="line">    <span class="keyword">if</span> (flavors != <span class="literal">null</span> &amp;&amp; !flavors.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 遍历口味数据，逐个设置口味对应的菜品id</span></span><br><span class="line">        flavors.forEach(flavor -&gt; flavor.setDishId(dishDTO.getId()));</span><br><span class="line">        <span class="comment">// 批量插入口味数据</span></span><br><span class="line">        dishFlavorMapper.insertBatch(flavors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>DishMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 修改菜品 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dish 菜品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AutoFill(OperationType.UPDATE)</span> <span class="comment">// 修改操作，自动填充</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Dish dish)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>DishMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    update dish</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>name = #&#123;name&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span>category_id = #&#123;categoryId&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;price != null&quot;</span>&gt;</span>price = #&#123;price&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;image != null&quot;</span>&gt;</span>image = #&#123;image&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;description != null&quot;</span>&gt;</span>description = #&#123;description&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span>status = #&#123;status&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateTime != null&quot;</span>&gt;</span>update_time = #&#123;updateTime&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateUser != null&quot;</span>&gt;</span>update_user = #&#123;updateUser&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>DishFlavorMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据菜品id查询对应的口味数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dishId 菜品id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 口味数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from dish_flavor where dish_id = #&#123;dishId&#125;&quot;)</span></span><br><span class="line">List&lt;DishFlavor&gt; <span class="title function_">getByDishId</span><span class="params">(Long dishId)</span>;</span><br></pre></td></tr></table></figure>





<h3 id="功能测试-4"><a href="#功能测试-4" class="headerlink" title="功能测试"></a>功能测试</h3><p>根据id查询菜品功能测试：</p>
<p>菜品信息及口味信息正常回显<br><img src="/2025/10/12/sky-takeout-day03-note/image-20251012185442072.png" alt="image-20251012185442072"></p>
<p>修改菜品信息功能测试：<br><img src="/2025/10/12/sky-takeout-day03-note/image-20251012195244620.png" alt="image-20251012195244620"></p>
<p><img src="/2025/10/12/sky-takeout-day03-note/image-20251012195254125.png" alt="image-20251012195254125"></p>
<h2 id="附：其他盲区知识补充"><a href="#附：其他盲区知识补充" class="headerlink" title="附：其他盲区知识补充"></a>附：其他盲区知识补充</h2><h3 id="在阿里云OSS实现文件上传时——关于属性类、工具类、配置类的疑问"><a href="#在阿里云OSS实现文件上传时——关于属性类、工具类、配置类的疑问" class="headerlink" title="在阿里云OSS实现文件上传时——关于属性类、工具类、配置类的疑问"></a>在阿里云OSS实现文件上传时——关于属性类、工具类、配置类的疑问</h3><p>在苍穹外卖项目中，“工具类属性为空，需通过<code>config</code>包下的配置类注入” 的设计既体现了<strong>软件设计的核心思路</strong>，也是 Spring Boot 开发的<strong>固定套路</strong>。以下从 “设计本质”“核心思路”“实际好处” 三个维度详细解释：</p>
<h4 id="一、本质：解决「配置硬编码」与「环境隔离」的问题"><a href="#一、本质：解决「配置硬编码」与「环境隔离」的问题" class="headerlink" title="一、本质：解决「配置硬编码」与「环境隔离」的问题"></a>一、本质：解决「配置硬编码」与「环境隔离」的问题</h4><p>阿里云 OSS 的配置（<code>endpoint</code>、<code>accessKeyId</code>、<code>accessKeySecret</code>、<code>bucketName</code>）属于<strong>环境敏感信息</strong>（开发 &#x2F; 测试 &#x2F; 生产环境的配置不同），如果直接写死在<code>AliOssUtil</code>工具类中，会导致以下问题：</p>
<ol>
<li><strong>硬编码风险</strong>：配置修改需重新编译代码、打包部署，运维成本高；</li>
<li><strong>安全隐患</strong>：密钥信息暴露在代码中，易被泄露；</li>
<li><strong>环境混乱</strong>：不同环境的配置混在代码里，易引发线上事故。</li>
</ol>
<h4 id="二、核心设计思路：「配置外置化-依赖注入-解耦」"><a href="#二、核心设计思路：「配置外置化-依赖注入-解耦」" class="headerlink" title="二、核心设计思路：「配置外置化 + 依赖注入 + 解耦」"></a>二、核心设计思路：「配置外置化 + 依赖注入 + 解耦」</h4><p>通过<code>config</code>包下的配置类管理 OSS 属性，本质是<strong>将 “配置逻辑” 与 “业务逻辑” 分离</strong>，遵循以下设计原则：</p>
<h5 id="1-配置外置化（把配置从代码中抽离）"><a href="#1-配置外置化（把配置从代码中抽离）" class="headerlink" title="1. 配置外置化（把配置从代码中抽离）"></a>1. 配置外置化（把配置从代码中抽离）</h5><ul>
<li><p>步骤</p>
<p>  ：将 OSS 配置写入application.yml （或 application-dev.yml &#x2F; application-prod.yml）：</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aliyun:</span></span><br><span class="line">  <span class="attr">oss:</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">oss-cn-hangzhou.aliyuncs.com</span></span><br><span class="line">    <span class="attr">access-key-id:</span> <span class="string">LTAI5t9xxxxxxxxx</span></span><br><span class="line">    <span class="attr">access-key-secret:</span> <span class="string">3dxxxxxxxxx</span></span><br><span class="line">    <span class="attr">bucket-name:</span> <span class="string">sky-take-out</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>目的</strong>：配置与代码解耦，修改配置无需动代码，重启服务即可生效。</p>
</li>
</ul>
<h5 id="2-依赖注入（让-Spring-管理工具类的属性）"><a href="#2-依赖注入（让-Spring-管理工具类的属性）" class="headerlink" title="2. 依赖注入（让 Spring 管理工具类的属性）"></a>2. 依赖注入（让 Spring 管理工具类的属性）</h5><p><code>AliOssUtil</code>工具类本身是 “业务逻辑类”（负责文件上传），不应关心 “配置从哪来”。通过<strong>配置类 + <code>@ConfigurationProperties</code></strong> 实现 “配置注入”：</p>
<h6 id="（1）创建配置类（如OssConfiguration）"><a href="#（1）创建配置类（如OssConfiguration）" class="headerlink" title="（1）创建配置类（如OssConfiguration）"></a>（1）创建配置类（如<code>OssConfiguration</code>）</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 标记为Spring配置类</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)</span> <span class="comment">// 绑定application.yml中以aliyun.oss开头的配置</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">// 自动生成getter/setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="（2）将工具类注册为-Spring-Bean-并注入配置"><a href="#（2）将工具类注册为-Spring-Bean-并注入配置" class="headerlink" title="（2）将工具类注册为 Spring Bean 并注入配置"></a>（2）将工具类注册为 Spring Bean 并注入配置</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OssProperties ossProperties; <span class="comment">// 注入配置属性</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 将AliOssUtil注册为Spring Bean</span></span><br><span class="line">    <span class="keyword">public</span> AliOssUtil <span class="title function_">aliOssUtil</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AliOssUtil</span> <span class="variable">util</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AliOssUtil</span>();</span><br><span class="line">        <span class="comment">// 给工具类的属性赋值</span></span><br><span class="line">        util.setEndpoint(ossProperties.getEndpoint());</span><br><span class="line">        util.setAccessKeyId(ossProperties.getAccessKeyId());</span><br><span class="line">        util.setAccessKeySecret(ossProperties.getAccessKeySecret());</span><br><span class="line">        util.setBucketName(ossProperties.getBucketName());</span><br><span class="line">        <span class="keyword">return</span> util;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="（3）工具类定义（简洁化，只关注业务）"><a href="#（3）工具类定义（简洁化，只关注业务）" class="headerlink" title="（3）工具类定义（简洁化，只关注业务）"></a>（3）工具类定义（简洁化，只关注业务）</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 让Spring管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOssUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter方法（供配置类注入）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEndpoint</span><span class="params">(String endpoint)</span> &#123; <span class="built_in">this</span>.endpoint = endpoint; &#125;</span><br><span class="line">    <span class="comment">// 其他setter...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 业务方法：文件上传</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="type">byte</span>[] bytes, String objectName)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用endpoint、accessKeyId等属性完成OSS上传</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">        <span class="comment">// ... 上传逻辑 ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-解耦（业务逻辑与配置逻辑分离）"><a href="#3-解耦（业务逻辑与配置逻辑分离）" class="headerlink" title="3. 解耦（业务逻辑与配置逻辑分离）"></a>3. 解耦（业务逻辑与配置逻辑分离）</h5><ul>
<li><strong>业务逻辑（<code>AliOssUtil</code>）</strong>：只负责 “文件上传”，不关心配置从哪来；</li>
<li><strong>配置逻辑（<code>OssConfiguration</code> + <code>OssProperties</code>）</strong>：只负责 “读取配置、注入属性”，不关心业务怎么用。</li>
</ul>
<h4 id="三、这是-Spring-Boot-的「固定套路」"><a href="#三、这是-Spring-Boot-的「固定套路」" class="headerlink" title="三、这是 Spring Boot 的「固定套路」"></a>三、这是 Spring Boot 的「固定套路」</h4><p>在 Spring Boot 开发中，对接 ** 第三方服务（如 OSS、Redis、数据库、消息队列）** 时，几乎都遵循 “配置类 + 工具类 &#x2F; 服务类” 的套路：</p>
<ol>
<li><strong>配置外置</strong>：把第三方服务的参数（如密钥、地址）写在<code>application.yml</code>；</li>
<li><strong>配置类封装</strong>：用<code>@ConfigurationProperties</code>将配置绑定到 Java 类（如<code>OssProperties</code>）；</li>
<li><strong>Bean 注册 + 注入</strong>：在配置类中创建第三方服务的工具类 Bean（如<code>AliOssUtil</code>），并注入配置属性；</li>
<li><strong>业务层调用</strong>：其他组件通过<code>@Autowired</code>注入工具类，直接使用。</li>
</ol>
<h4 id="四、实际好处（为什么必须这么做？）"><a href="#四、实际好处（为什么必须这么做？）" class="headerlink" title="四、实际好处（为什么必须这么做？）"></a>四、实际好处（为什么必须这么做？）</h4><ol>
<li><strong>环境隔离</strong>：开发环境用测试 OSS 桶，生产环境用正式桶，只需改配置文件；</li>
<li><strong>安全合规</strong>：密钥等敏感信息不进代码库，符合企业级安全规范；</li>
<li><strong>可维护性</strong>：配置集中管理，新人接手时只需看<code>application.yml</code>就知道系统依赖了哪些第三方服务；</li>
<li><strong>扩展性</strong>：若需切换 OSS 服务商（如从阿里云换成腾讯云），只需修改配置类和工具类，业务层无感知。</li>
</ol>
<p>总结：这种设计既是 <strong>“配置外置化 + 依赖注入” 的软件设计思路 <strong>（解耦、可维护），也是 Spring Boot 开发第三方服务的</strong>固定套路</strong>（约定优于配置）。通过 “配置类 + 工具类” 的分工，让代码更优雅、更易维护。</p>
<hr>
<blockquote>
<p><em><strong>以下是项目中的代码的解释</strong></em></p>
</blockquote>
<p>结合你提供的代码和之前的设计思路，这两个类（<code>AliOssProperties</code> 和 <code>AliOssUtil</code>）的分工与配合体现了 <strong>“配置与业务分离”</strong> 的核心思想，我们一步步拆解：</p>
<h3 id="一、AliOssProperties：配置属性的-“容器”"><a href="#一、AliOssProperties：配置属性的-“容器”" class="headerlink" title="一、AliOssProperties：配置属性的 “容器”"></a>一、<code>AliOssProperties</code>：配置属性的 “容器”</h3><p>这个类的核心作用是 <strong>“把配置文件中的 OSS 参数映射到 Java 对象”</strong>，相当于一个 “配置容器”。</p>
<h4 id="关键注解解析"><a href="#关键注解解析" class="headerlink" title="关键注解解析"></a>关键注解解析</h4><ol>
<li><p><strong><code>@Component</code></strong>：将该类标记为 Spring 的组件，让 Spring 容器管理它（自动创建实例）。</p>
</li>
<li><p><code>@ConfigurationProperties(prefix = &quot;sky.alioss&quot;)</code></p>
<ul>
<li><p>告诉 Spring：“去配置文件（如<code>application.yml</code>）中找所有以<code>sky.alioss</code>为前缀的配置项，把它们的值赋给当前类的同名字段”。</p>
</li>
<li><p>例如，配置文件中若有：</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sky:</span></span><br><span class="line">  <span class="attr">alioss:</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">oss-cn-beijing.aliyuncs.com</span></span><br><span class="line">    <span class="attr">access-key-id:</span> <span class="string">ABC123</span></span><br><span class="line">    <span class="attr">access-key-secret:</span> <span class="string">XYZ456</span></span><br><span class="line">    <span class="attr">bucket-name:</span> <span class="string">my-takeout</span></span><br></pre></td></tr></table></figure>

<p>  Spring 会自动将这些值分别赋给AliOssProperties的endpoint、accessKeyId等字段。</p>
</li>
</ul>
</li>
<li><p><strong><code>@Data</code></strong>：Lombok 注解，自动生成<code>getter</code>、<code>setter</code>方法（Spring 注入配置时需要这些方法）。</p>
</li>
</ol>
<h4 id="为什么需要这个类？"><a href="#为什么需要这个类？" class="headerlink" title="为什么需要这个类？"></a>为什么需要这个类？</h4><p>如果没有<code>AliOssProperties</code>，要获取配置就得手动写代码读取<code>application.yml</code>（比如用<code>@Value</code>注解逐个注入），但当配置项较多时（如这里的 4 个参数），代码会很繁琐：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不推荐：用@Value逐个注入，配置项多了会很冗余</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOssUtil</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;sky.alioss.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;sky.alioss.access-key-id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="comment">// ... 其他参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而<code>AliOssProperties</code>通过<code>@ConfigurationProperties</code>一次性绑定所有配置，更简洁、更易维护。</p>
<h3 id="二、AliOssUtil：OSS-操作的-“业务工具”"><a href="#二、AliOssUtil：OSS-操作的-“业务工具”" class="headerlink" title="二、AliOssUtil：OSS 操作的 “业务工具”"></a>二、<code>AliOssUtil</code>：OSS 操作的 “业务工具”</h3><p>这个类是 <strong>“实际干活的工具”</strong>，负责调用阿里云 OSS 的 SDK 完成文件上传，它的核心是<code>upload</code>方法。</p>
<h4 id="关键设计解析"><a href="#关键设计解析" class="headerlink" title="关键设计解析"></a>关键设计解析</h4><ol>
<li><code>@AllArgsConstructor</code>：Lombok 注解，自动生成一个包含所有字段（endpoint、accessKeyId等）的构造函数。<ul>
<li>作用：方便通过 “构造函数注入” 的方式，将<code>AliOssProperties</code>中的配置参数传递给<code>AliOssUtil</code>（后面会讲如何配合）。</li>
</ul>
</li>
<li><strong>字段设计</strong>：<code>endpoint</code>、<code>accessKeyId</code>等字段与<code>AliOssProperties</code>完全对应，因为这些是 OSS 上传必须的参数。</li>
<li><strong><code>upload</code>方法</strong>：使用注入的参数创建 OSS 客户端（<code>OSS ossClient</code>），执行上传逻辑，最终返回文件的访问 URL。</li>
</ol>
<h4 id="为什么工具类不自己读取配置？"><a href="#为什么工具类不自己读取配置？" class="headerlink" title="为什么工具类不自己读取配置？"></a>为什么工具类不自己读取配置？</h4><p>如果<code>AliOssUtil</code>自己读取配置（比如硬编码或手动解析配置文件），会导致：</p>
<ul>
<li>工具类与配置强耦合：换环境（如开发→生产）时，需要修改工具类代码；</li>
<li>复用性差：如果另一个模块也需要 OSS 上传，得重复写读取配置的逻辑；</li>
<li>测试困难：单元测试时无法方便地替换为测试环境的配置。</li>
</ul>
<h3 id="三、两个类如何-“配合工作”？"><a href="#三、两个类如何-“配合工作”？" class="headerlink" title="三、两个类如何 “配合工作”？"></a>三、两个类如何 “配合工作”？</h3><p>目前你的代码中还缺少一个 <strong>“配置类”</strong>（如<code>OssConfig</code>），它是连接<code>AliOssProperties</code>和<code>AliOssUtil</code>的 “桥梁”。完整流程如下：</p>
<h4 id="步骤-1：配置类创建AliOssUtil实例并注入配置"><a href="#步骤-1：配置类创建AliOssUtil实例并注入配置" class="headerlink" title="步骤 1：配置类创建AliOssUtil实例并注入配置"></a>步骤 1：配置类创建<code>AliOssUtil</code>实例并注入配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 标记为Spring配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AliOssProperties aliOssProperties; <span class="comment">// 注入配置容器</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 将AliOssUtil注册为Spring Bean，供其他组件使用</span></span><br><span class="line">    <span class="keyword">public</span> AliOssUtil <span class="title function_">aliOssUtil</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 调用AliOssUtil的全参构造函数，传入配置参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AliOssUtil</span>(</span><br><span class="line">            aliOssProperties.getEndpoint(),</span><br><span class="line">            aliOssProperties.getAccessKeyId(),</span><br><span class="line">            aliOssProperties.getAccessKeySecret(),</span><br><span class="line">            aliOssProperties.getBucketName()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="步骤-2：业务代码中直接使用AliOssUtil"><a href="#步骤-2：业务代码中直接使用AliOssUtil" class="headerlink" title="步骤 2：业务代码中直接使用AliOssUtil"></a>步骤 2：业务代码中直接使用<code>AliOssUtil</code></h4><p>当需要上传文件时，直接注入<code>AliOssUtil</code>即可，无需关心配置细节：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AliOssUtil aliOssUtil; <span class="comment">// 注入工具类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadFile</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = file.getBytes();</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + file.getOriginalFilename();</span><br><span class="line">        <span class="keyword">return</span> aliOssUtil.upload(bytes, fileName); <span class="comment">// 直接调用上传方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="四、这种设计的核心优势"><a href="#四、这种设计的核心优势" class="headerlink" title="四、这种设计的核心优势"></a>四、这种设计的核心优势</h3><ol>
<li><strong>配置集中管理</strong>：所有 OSS 参数都在<code>application.yml</code>中，改配置无需动代码。</li>
<li><strong>业务与配置解耦</strong>：<code>AliOssUtil</code>只负责上传，不关心配置从哪来；<code>AliOssProperties</code>只负责存配置，不关心怎么用。</li>
<li><strong>环境隔离</strong>：开发 &#x2F; 测试 &#x2F; 生产环境的配置可以写在不同的配置文件（如<code>application-dev.yml</code>、<code>application-prod.yml</code>），通过<code>spring.profiles.active</code>切换。</li>
<li><strong>可测试性</strong>：单元测试时，可以手动创建<code>AliOssUtil</code>实例，传入测试用的 OSS 配置（如本地 MinIO 服务），无需依赖真实阿里云环境。</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><code>AliOssProperties</code>：相当于 “配置的搬运工”，把<code>application.yml</code>中的 OSS 参数搬到 Java 对象里，方便 Spring 管理。</li>
<li><code>AliOssUtil</code>：相当于 “实际干活的工人”，拿着<code>AliOssProperties</code>提供的 “工具（配置）” 完成文件上传。</li>
<li>中间通过配置类（<code>OssConfig</code>）连接，形成 “配置→容器→工具→业务” 的完整链路，这是 Spring Boot 处理第三方服务（如 OSS、Redis、数据库）的标准套路，既规范又灵活。</li>
</ul>
<hr>
<h3 id="dishFlavor-的dishId-循环赋值的理解"><a href="#dishFlavor-的dishId-循环赋值的理解" class="headerlink" title="dishFlavor 的dishId 循环赋值的理解"></a>dishFlavor 的dishId 循环赋值的理解</h3><p>这段代码中循环给每个<code>dishFlavor</code>设置<code>dishId</code>，核心原因是<strong>建立菜品与口味之间的关联关系</strong>，具体可以从这几个角度理解：</p>
<h4 id="1-业务逻辑：一个菜品对应多个口味"><a href="#1-业务逻辑：一个菜品对应多个口味" class="headerlink" title="1. 业务逻辑：一个菜品对应多个口味"></a>1. 业务逻辑：一个菜品对应多个口味</h4><p>一道菜（<code>Dish</code>）可能有多个口味（比如 “麻辣烫” 可能有 “微辣”、”中辣”、”特辣” 等口味）。这些口味需要明确 “属于哪道菜”，否则数据库中就无法区分某个口味是哪个菜品的。</p>
<h4 id="2-数据库设计：通过外键关联"><a href="#2-数据库设计：通过外键关联" class="headerlink" title="2. 数据库设计：通过外键关联"></a>2. 数据库设计：通过外键关联</h4><p>在数据库中，<code>dish</code>表（菜品表）和<code>dish_flavor</code>表（口味表）是<strong>一对多</strong>的关系：</p>
<ul>
<li><code>dish</code>表的主键是<code>dish_id</code>（即代码中的<code>dishId</code>）</li>
<li><code>dish_flavor</code>表需要一个<code>dish_id</code>字段作为<strong>外键</strong>，关联到<code>dish</code>表的主键</li>
</ul>
<p>这样设计的目的是：通过<code>dish_id</code>可以查询到某道菜的所有口味（比如 “查询麻辣烫的所有口味”）。</p>
<h4 id="3-代码逻辑：批量设置外键"><a href="#3-代码逻辑：批量设置外键" class="headerlink" title="3. 代码逻辑：批量设置外键"></a>3. 代码逻辑：批量设置外键</h4><p>代码中：</p>
<ul>
<li>先插入菜品信息到<code>dish</code>表，获取数据库生成的主键<code>dishId</code>（这是当前菜品的唯一标识）</li>
<li><code>dishDTO.getFlavors()</code>获取的是当前菜品的所有口味列表（多个<code>DishFlavor</code>对象）</li>
<li>循环给每个<code>DishFlavor</code>设置<code>dishId</code>，就是给每个口味 “打上所属菜品的标签”</li>
<li>最后批量插入到<code>dish_flavor</code>表时，所有口味就能通过<code>dishId</code>正确关联到对应的菜品</li>
</ul>
<p>举个例子：如果新增一道 “宫保鸡丁”（<code>dishId=100</code>），它有 “微辣” 和 “不辣” 两个口味。循环设置后，两个口味的<code>dishId</code>都会被设为 100，插入到数据库后，就能明确这两个口味都属于 “宫保鸡丁” 这道菜了。</p>
]]></content>
      <tags>
        <tag>苍穹外卖</tag>
      </tags>
  </entry>
  <entry>
    <title>sky-takeout-day02-note</title>
    <url>/2025/10/11/sky-takeout-day02-note/</url>
    <content><![CDATA[<h1 id="Sky-takeout-Day02"><a href="#Sky-takeout-Day02" class="headerlink" title="Sky-takeout  Day02"></a>Sky-takeout  Day02</h1><blockquote>
<p>【前言】<br>Day02 的 Task 是实现最基础的 CRUD 功能，流程：先做需求分析，再开始编写代码，然后进行功能测试（接口文档、前后端联调）以及代码完善。<br>首先，通过员工管理模块的新增、分页查询、启用禁用账号、编辑这四大功能，来了解简单的 CRUD 如何写。<br>其次，因为菜品分类管理模块的逻辑与员工管理的几乎一样，所以就直接导入了，想巩固的话可以自己手敲一遍，加深印象。</p>
</blockquote>
<span id="more"></span>

<h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ul>
<li>新增员工</li>
<li>员工分页查询</li>
<li>启用禁用员工账号</li>
<li>编辑员工</li>
<li>导入菜品分类管理模块代码</li>
</ul>
<hr>
<h2 id="1-新增员工"><a href="#1-新增员工" class="headerlink" title="1. 新增员工"></a>1. 新增员工</h2><h3 id="Q1：用DTO还是Entity实体类？"><a href="#Q1：用DTO还是Entity实体类？" class="headerlink" title="Q1：用DTO还是Entity实体类？"></a>Q1：用DTO还是Entity实体类？</h3><p><strong>一般来说</strong></p>
<ul>
<li><p>当前端提交的数据和实体类中对应的<strong>属性差别比较大</strong>时，建议使用 DTO 来封装数据</p>
</li>
<li><p><strong>Entity 管数据库，DTO 管接口</strong>。通过分层隔离，Entity 聚焦业务模型和持久化，DTO 聚焦 API 契约和传输效率</p>
<table>
<thead>
<tr>
<th>维度</th>
<th>Entity（实体类）</th>
<th>DTO（数据传输对象）</th>
</tr>
</thead>
<tbody><tr>
<td><strong>核心职责</strong></td>
<td>映射数据库表结构，承载业务逻辑</td>
<td>封装接口参数 &#x2F; 响应，实现跨层数据传输</td>
</tr>
<tr>
<td><strong>所属层级</strong></td>
<td>持久层 &#x2F; 领域层（与数据库直接交互）</td>
<td>应用层 &#x2F; 表现层（Controller、Service 间传输）</td>
</tr>
<tr>
<td><strong>数据库关联</strong></td>
<td>强关联（字段与表结构一一对应）</td>
<td>无关联（结构由 API 需求决定）</td>
</tr>
<tr>
<td><strong>设计重点</strong></td>
<td>数据完整性、业务规则（如 ORM 注解、非空约束）</td>
<td>API 契约稳定性、传输性能（仅含必要字段）</td>
</tr>
</tbody></table>
  <img src="/2025/10/11/sky-takeout-day02-note/image-20251010153653291.png" alt="image-20251010153653291" style="zoom:50%;"></li>
</ul>
<h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p><strong>EmployeeController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存员工信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> employeeDTO 员工信息DTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回统一的Result封装对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;保存(新增)员工信息&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> EmployeeDTO employeeDTO)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;保存(新增)员工信息：&#123;&#125;&quot;</span>, employeeDTO);</span><br><span class="line">        <span class="comment">// 调用service层的方法来处理保存逻辑</span></span><br><span class="line">        employeeService.save(employeeDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>EmployeeServiceImpl.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存员工信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employeeDTO 员工信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(EmployeeDTO employeeDTO)</span> &#123;</span><br><span class="line">    <span class="comment">// 先将 DTO 转换为实体对象, 再进行保存, 用spring中的BeanUtils的copyProperties方法</span></span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    BeanUtils.copyProperties(employeeDTO, employee);</span><br><span class="line">    <span class="comment">// 再将实体类的剩余属性设置好</span></span><br><span class="line">    employee.setStatus(StatusConstant.ENABLE); <span class="comment">// 设置默认状态为启用</span></span><br><span class="line">    employee.setPassword(DigestUtils.md5DigestAsHex(<span class="string">&quot;123456&quot;</span>.getBytes())); <span class="comment">// 设置初始密码123456, 需要进行MD5加密</span></span><br><span class="line">    employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employee.setCreateUser(<span class="number">10L</span>); <span class="comment">// <span class="doctag">TODO:</span> 这里先写死，后面改为当前登录用户的id</span></span><br><span class="line">    employee.setUpdateUser(<span class="number">10L</span>); <span class="comment">// <span class="doctag">TODO:</span> 这里先写死，后面改为当前登录用户的id</span></span><br><span class="line">    <span class="comment">// 最后调用Mapper层的方法进行保存</span></span><br><span class="line">    employeeMapper.insert(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>EmployeeMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入员工信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> employee 员工对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into employee (username, password, name, phone, sex, id_number, status, create_time, update_time, create_user, update_user)&quot; +</span></span><br><span class="line"><span class="meta">            &quot;values&quot; +</span></span><br><span class="line"><span class="meta">            &quot;(#&#123;username&#125;, #&#123;password&#125;, #&#123;name&#125;, #&#123;phone&#125;, #&#123;sex&#125;, #&#123;idNumber&#125;, #&#123;status&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;, #&#123;createUser&#125;, #&#123;updateUser&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure>



<h3 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h3><p>首先先设置一下全局token, 另外过期时间可以设置久一点(在application.yml中jwt部分设置), 避免总是手动设置.</p>
<img src="/2025/10/11/sky-takeout-day02-note/../../my-note/typora/my-sky-takeout-note/day02.assets/image-20251010161839592.png" alt="image-20251010161839592" style="zoom: 25%;">
<img src="/2025/10/11/sky-takeout-day02-note/image-20251010161821040.png" alt="image-20251010161821040" style="zoom:25%;">

<p>测试成功,返回201<br><img src="/2025/10/11/sky-takeout-day02-note/image-20251010162002733.png" alt="image-20251010162002733" style="zoom: 25%;"></p>
<h3 id="代码功能完善"><a href="#代码功能完善" class="headerlink" title="代码功能完善"></a>代码功能完善</h3><p>当前存在问题:</p>
<ul>
<li>用户名有unique约束, 若重复会抛异常, 异常还没处理</li>
<li>新增员工时的登录用户id还是定死的</li>
</ul>
<img src="/2025/10/11/sky-takeout-day02-note/image-20251010162153307.png" alt="image-20251010162153307" style="zoom:25%;">

<h4 id="解决用户名重复异常的问题"><a href="#解决用户名重复异常的问题" class="headerlink" title="解决用户名重复异常的问题"></a>解决用户名重复异常的问题</h4><p><img src="/2025/10/11/sky-takeout-day02-note/image-20251010163541987.png" alt="image-20251010163541987"></p>
<p>要将抛出的 <strong>SQLIntegrityConstraintViolationException</strong> 异常,加入全局异常处理器中, 返回异常消息给前端, 保证友好性.<br>在GlobalExceptionHandler中添加: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 捕获SQL异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ex 捕获到的异常对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回封装的异常信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span>&#123;</span><br><span class="line">    <span class="comment">// Duplicate entry &#x27;hwan1&#x27; for key &#x27;employee.idx_username&#x27;;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> ex.getMessage();</span><br><span class="line">    <span class="keyword">if</span>(message.contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">        String[] split = message.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> split[<span class="number">2</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> username + MessageConstant.ALREADY_EXIST;</span><br><span class="line">        <span class="keyword">return</span> Result.error(msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(MessageConstant.UNKNOWN_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="解决设置当前用户id的问题"><a href="#解决设置当前用户id的问题" class="headerlink" title="解决设置当前用户id的问题"></a>解决设置当前用户id的问题</h4><ul>
<li><p>JWT 工作流程图</p>
  <img src="/2025/10/11/sky-takeout-day02-note/image-20251010164604620.png" alt="image-20251010164604620" style="zoom: 50%;">


</li>
<li><p>通过Jwt令牌中携带的用户id来<strong>获取</strong>新增员工时需要设置的当前用户属性</p>
  <img src="/2025/10/11/sky-takeout-day02-note/image-20251010164716025.png" alt="image-20251010164716025" style="zoom:50%;"></li>
</ul>
<h4 id="Q2-如何传递拦截器获取的用户id给service"><a href="#Q2-如何传递拦截器获取的用户id给service" class="headerlink" title="Q2: 如何传递拦截器获取的用户id给service?"></a>Q2: 如何传递拦截器获取的用户id给service?</h4><ul>
<li><p>解析出登录员工 id 后，如何<strong>传递</strong>给 Service 的 save 方法？</p>
<p>  ​     &#x3D;&gt;使用<strong>ThreadLocal</strong></p>
<p>  <strong>介绍：</strong></p>
<p>  ThreadLocal 并不是一个 Thread，而是 Thread 的局部变量。<br>  ThreadLocal 为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问。</p>
<p>  <strong>常用方法：</strong></p>
<ul>
<li><p>public void set(T value)     设置当前线程的线程局部变量的值</p>
</li>
<li><p>public T get()         返回当前线程所对应的线程局部变量的值</p>
</li>
<li><p>public void remove()        移除当前线程的线程局部变量</p>
</li>
</ul>
</li>
<li><p>项目中在<strong>BaseContext工具类</strong>已经封装了对应方法</p>
  <img src="/2025/10/11/sky-takeout-day02-note/image-20251010165529633.png" alt="image-20251010165529633" style="zoom: 67%;">


</li>
<li><p>解决流程图</p>
  <img src="/2025/10/11/sky-takeout-day02-note/image-20251010165222324.png" alt="image-20251010165222324" style="zoom:50%;">


</li>
<li><p>在拦截器Interceptor, 将用户id存入ThreadLocal中</p>
  <img src="/2025/10/11/sky-takeout-day02-note/image-20251010170118979.png" alt="image-20251010170118979" style="zoom: 25%;"></li>
<li><p>在Service里, 从ThreadLocal中获取当前登录用户的id</p>
  <img src="/2025/10/11/sky-takeout-day02-note/image-20251010170259654.png" alt="image-20251010170259654" style="zoom: 25%;"></li>
</ul>
<h2 id="2-员工分页查询"><a href="#2-员工分页查询" class="headerlink" title="2. 员工分页查询"></a>2. 员工分页查询</h2><h3 id="接口分析"><a href="#接口分析" class="headerlink" title="接口分析"></a>接口分析</h3><p><strong>接口设计</strong><br><img src="/2025/10/11/sky-takeout-day02-note/image-20251010184016854.png" alt="image-20251010184016854" style="zoom: 50%;"></p>
<p><strong>注意事项：</strong></p>
<ul>
<li>请求参数类型为 Query，不是 json 格式提交，在路径后直接拼接。&#x2F;admin&#x2F;employee&#x2F;page?name &#x3D; zhangsan</li>
<li>返回数据中 records 数组中使用 Employee 实体类对属性进行封装。</li>
</ul>
<h3 id="代码编写-1"><a href="#代码编写-1" class="headerlink" title="代码编写"></a>代码编写</h3><p>用到了<strong>分页插件PageHelper</strong></p>
<blockquote>
<p><strong>PageHelper 基本原理</strong></p>
<p>PageHelper 是基于 MyBatis 的分页插件，通过<strong>拦截 SQL 执行过程</strong>动态添加分页逻辑（如 MySQL 的 <code>LIMIT</code>），并自动统计总记录数。其核心优势是：</p>
<ul>
<li>无需修改 SQL，只需在代码中添加分页参数；</li>
<li>支持多数据库（MySQL、Oracle 等）；</li>
<li>通过 <code>ThreadLocal</code> 存储分页参数，保证线程安全。</li>
</ul>
</blockquote>
<p>定义<strong>分页查询DTO</strong>和<strong>分页结果封装</strong></p>
<img src="/2025/10/11/sky-takeout-day02-note/image-20251010195314831.png" alt="image-20251010195314831" style="zoom: 50%;">



<p><strong>EmployeeController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工分页查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employeePageQueryDTO 员工分页查询DTO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回统一的Result封装对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;员工分页查询&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;PageResult&gt; <span class="title function_">page</span><span class="params">(EmployeePageQueryDTO employeePageQueryDTO)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;员工分页查询：参数&#123;&#125;&quot;</span>, employeePageQueryDTO);</span><br><span class="line">    <span class="type">PageResult</span> <span class="variable">pageResult</span> <span class="operator">=</span> employeeService.pageQuery(employeePageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>EmployeeServiceImpl.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工分页查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employeePageQueryDTO 分页查询信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 分页结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">pageQuery</span><span class="params">(EmployeePageQueryDTO employeePageQueryDTO)</span> &#123;</span><br><span class="line">    PageHelper.startPage(employeePageQueryDTO.getPage(), employeePageQueryDTO.getPageSize());</span><br><span class="line">    Page&lt;Employee&gt; page = employeeMapper.pageQuery(employeePageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(page.getTotal(), page.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>EmployeeMapper.xml</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;pageQuery&quot;</span> resultType=<span class="string">&quot;com.sky.entity.Employee&quot;</span>&gt;</span><br><span class="line">    select * from employee</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and name like <span class="title function_">concat</span><span class="params">(<span class="string">&#x27;%&#x27;</span>, #&#123;name&#125;, <span class="string">&#x27;%&#x27;</span>)</span></span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">    order by update_time desc</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>



<h3 id="解决分页查询时间格式问题"><a href="#解决分页查询时间格式问题" class="headerlink" title="解决分页查询时间格式问题"></a>解决分页查询时间格式问题</h3><p>调试时发现时间格式有问题：<br><img src="/2025/10/11/sky-takeout-day02-note/image-20251010191630040.png" alt="image-20251010191630040" style="zoom:50%;"></p>
<p>有两种解决方案</p>
<ul>
<li><p>方式一：在属性加上注解，可行，但是需要在每个时间属性上都要加上该注解，使用较麻烦，不能全局处理。</p>
</li>
<li><p>方式二：在 WebMvcConfiguration 中扩展 SpringMVC 的消息转换器，统一对日期类型进行格式处理。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;扩展消息转换器...&quot;</span>);</span><br><span class="line">    <span class="comment">// 创建消息转换器对象</span></span><br><span class="line">    <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">    <span class="comment">// 设置对象转换器，底层使用Jackson将Java对象转为json</span></span><br><span class="line">    converter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">    <span class="comment">// 将上面的消息转换器对象追加到mvc框架的转换器集合中</span></span><br><span class="line">    <span class="comment">// 这里前面的 0 是优先级，设置在最前面，优先使用我们定义的转换器</span></span><br><span class="line">    converters.add(<span class="number">0</span>, converter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>JacksonObjectMapper</strong>中定义了<strong>时间格式</strong>：<br><img src="/2025/10/11/sky-takeout-day02-note/image-20251010194037109.png" alt="image-20251010194037109" style="zoom:33%;"></p>
<h2 id="3-启用禁用员工账号"><a href="#3-启用禁用员工账号" class="headerlink" title="3. 启用禁用员工账号"></a>3. 启用禁用员工账号</h2><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><img src="/2025/10/11/sky-takeout-day02-note/image-20251010203227868.png" alt="image-20251010203227868" style="zoom: 50%;">

<p>1). 路径参数携带状态值。</p>
<p>2). 同时，把 id 传递过去，明确对哪个用户进行操作。</p>
<p>3). 返回数据 code 状态是必须，其它是非必须。</p>
<h3 id="代码编写-2"><a href="#代码编写-2" class="headerlink" title="代码编写"></a>代码编写</h3><p><strong>EmployeeController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启用禁用员工账号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status 状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id     员工id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回统一的Result封装对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;启用禁用员工账号&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Void&gt; <span class="title function_">startOrStop</span><span class="params">(<span class="meta">@PathVariable</span> Integer status, Long id)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;启用禁用员工账号：status=&#123;&#125;, id=&#123;&#125;&quot;</span>, status, id);</span><br><span class="line">    employeeService.startOrStop(status, id);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>EmployeeServiceImpl.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启用或禁用员工账号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status 状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id     员工id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startOrStop</span><span class="params">(Integer status, Long id)</span> &#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> Employee.builder()</span><br><span class="line">            .id(id)</span><br><span class="line">            .status(status)</span><br><span class="line">            .build();</span><br><span class="line">    employeeMapper.updateById(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>EmployeeMapper.xml</strong></p>
<p>根据传入的<code>Employee</code>对象中的非空字段，选择性地更新<code>employee</code>表中的对应记录。它的核心特点是<strong>只更新需要修改的字段</strong>，避免不必要的数据库操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;update id=<span class="string">&quot;updateById&quot;</span> parameterType=<span class="string">&quot;employee&quot;</span>&gt;</span><br><span class="line">    update employee</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null&quot;</span>&gt;name = #&#123;name&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;username != null&quot;</span>&gt;username = #&#123;username&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;password != null&quot;</span>&gt;password = #&#123;password&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;phone != null&quot;</span>&gt;phone = #&#123;phone&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;sex != null&quot;</span>&gt;sex = #&#123;sex&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;idNumber != null&quot;</span>&gt;id_Number = #&#123;idNumber&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;updateTime != null&quot;</span>&gt;update_Time = #&#123;updateTime&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;updateUser != null&quot;</span>&gt;update_User = #&#123;updateUser&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;status != null&quot;</span>&gt;status = #&#123;status&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">    <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里这个功能的实现虽然只需要修改状态值，但是可以把其他需要根据主键动态修改的属性都加上，方便后续复用</p>
</blockquote>
<h2 id="4-编辑员工"><a href="#4-编辑员工" class="headerlink" title="4. 编辑员工"></a>4. 编辑员工</h2><h3 id="接口设计-1"><a href="#接口设计-1" class="headerlink" title="接口设计"></a>接口设计</h3><p><strong>编辑员工的页面原型</strong>：</p>
<p>在员工管理列表页面点击 “编辑” 按钮，跳转到编辑页面，在编辑页面回显员工信息并进行修改，最后点击 “保存” 按钮完成编辑操作。</p>
<p>注：点击修改时，数据应该正常回显到修改页面。<br><img src="/2025/10/11/sky-takeout-day02-note/image-20251011192703614.png" alt="image-20251011192703614" style="zoom:50%;"></p>
<p>根据上述原型图分析，编辑员工功能涉及到两个接口：</p>
<ul>
<li>根据 id 查询员工信息</li>
<li>编辑员工信息</li>
</ul>
<p>设计接口如下：<br><img src="/2025/10/11/sky-takeout-day02-note/../../my-note/typora/my-sky-takeout-note/day02.assets/image-20251011192924595.png" alt="image-20251011192924595" style="zoom:50%;"><br><img src="/2025/10/11/sky-takeout-day02-note/image-20251011192944602.png" alt="image-20251011192944602" style="zoom:50%;"></p>
<h3 id="代码编写-3"><a href="#代码编写-3" class="headerlink" title="代码编写"></a>代码编写</h3><p>以下代码包含了：根据id查询员工信息回显给前端、修改员工信息</p>
<ul>
<li>（在实现 <strong>启用禁用员工账号</strong> 功能时，已实现 employeeMapper.update(employee)，在此不需写 Mapper 层代码。）</li>
</ul>
<p><strong>EmployeeController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询员工信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 员工id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回统一的Result封装对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id查询员工信息&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;根据id查询员工信息：id=&#123;&#125;&quot;</span>, id);</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success(employee);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改员工信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employeeDTO 员工信息DTO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回统一的Result封装对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;修改员工信息&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Void&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> EmployeeDTO employeeDTO)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;修改员工信息：&#123;&#125;&quot;</span>, employeeDTO);</span><br><span class="line">    employeeService.update(employeeDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>EmployeeServiceImpl.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询员工信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 员工id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 员工信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Employee <span class="title function_">getById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeMapper.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (employee == <span class="literal">null</span>) &#123;  <span class="comment">// 如果没有查询到员工信息, 则抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccountNotFoundException</span>(MessageConstant.ACCOUNT_NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> employee; <span class="comment">// 返回员工信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(EmployeeDTO employeeDTO)</span> &#123;</span><br><span class="line">    <span class="comment">// 传来的是DTO对象， 要将 DTO 转换为实体对象</span></span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    BeanUtils.copyProperties(employeeDTO, employee);</span><br><span class="line">    <span class="comment">// 设置修改相关属性，修改时间和修改人</span></span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateUser(BaseContext.getCurrentId());</span><br><span class="line">    employeeMapper.updateById(employee);  <span class="comment">// 更新员工信息 (前面在写启用禁用员工账号时，在Mapper中已经配置了根据id动态更新)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>EmployeeMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 员工id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 员工对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from employee where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">Employee <span class="title function_">getById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure>



<h3 id="功能测试-1"><a href="#功能测试-1" class="headerlink" title="功能测试"></a>功能测试</h3><ul>
<li><p>1）根据id查询员工并回显信息：返回员工信息json数据</p>
  <img src="/2025/10/11/sky-takeout-day02-note/image-20251011194957644.png" alt="image-20251011194957644" style="zoom: 25%;">
</li>
<li><p>2）修改信息</p>
  <img src="/2025/10/11/sky-takeout-day02-note/image-20251011200650746.png" alt="image-20251011200650746" style="zoom: 33%;"></li>
</ul>
<h2 id="5-导入菜品分类管理模块"><a href="#5-导入菜品分类管理模块" class="headerlink" title="5. 导入菜品分类管理模块"></a>5. 导入菜品分类管理模块</h2><h3 id="产品原型分析"><a href="#产品原型分析" class="headerlink" title="产品原型分析"></a>产品原型分析</h3><p>后台系统中可以管理<strong>分类信息</strong>，分类包括<strong>两种类型</strong>，分别是 <strong>菜品分类</strong> 和 <strong>套餐分类</strong> 。</p>
<p>下面以分析 <strong>菜品分类</strong> 相关功能来举例， 套餐的类似。</p>
<ul>
<li><p><strong>新增菜品分类：</strong> 当我们在后台系统中添加菜品时需要选择一个菜品分类，在移动端也会按照菜品分类来展示对应的菜品。</p>
</li>
<li><p><strong>菜品分类分页查询：</strong> 系统中的分类很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。</p>
</li>
<li><p><strong>根据 id 删除菜品分类：</strong> 在分类管理列表页面，可以对某个分类进行删除操作。需要注意的是***<u>当分类关联了菜品或者套餐时，此分类不允许删除。</u>***</p>
</li>
<li><p><strong>修改菜品分类：</strong> 在分类管理列表页面点击修改按钮，弹出修改窗口，在修改窗口回显分类信息并进行修改，最后点击确定按钮完成修改操作。</p>
</li>
<li><p><strong>启用禁用菜品分类：</strong> 在分类管理列表页面，可以对某个分类进行启用或者禁用操作。</p>
</li>
<li><p><strong>分类类型查询：</strong> 当点击分类类型下拉框时，从数据库中查询所有的菜品分类数据进行展示。</p>
</li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>导入时如果想避免看到一堆红的报错，就按照Mapper &#x3D;》Servie &#x3D;》 Controller的顺序来导入；</li>
<li>因为在删除分类等分类相关业务时，会设计到 Setmeal 和 Dish ，要判断分类地下是否还挂有菜品和套餐，所以这里也需要导入SetmealMapper和DishMapper</li>
<li>其次，因为这些代码是我们直接拷贝进来的，可能不会自动编译，保险起见最好在 maven 那里 compile 手动编译一下，防止报错</li>
<li><strong>业务规则：</strong><ul>
<li>分类名称必须是唯一的</li>
<li>分类按照类型可以分为菜品分类和套餐分类</li>
<li>新添加的分类状态默认为“禁用”，<ul>
<li>为什么？&#x3D;》如果默认是启用的话，新增分类时，该分类下是空的，在用户端显示是空的，没用意义，为了避免这种情况，直接把默认状态设为禁用即可）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="代码导入"><a href="#代码导入" class="headerlink" title="代码导入"></a>代码导入</h3><p><strong>CategoryController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.controller.admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sky.dto.CategoryDTO;</span><br><span class="line"><span class="keyword">import</span> com.sky.dto.CategoryPageQueryDTO;</span><br><span class="line"><span class="keyword">import</span> com.sky.entity.Category;</span><br><span class="line"><span class="keyword">import</span> com.sky.result.PageResult;</span><br><span class="line"><span class="keyword">import</span> com.sky.result.Result;</span><br><span class="line"><span class="keyword">import</span> com.sky.service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分类管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/category&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;分类相关接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryDTO 分类信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增分类&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> CategoryDTO categoryDTO)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;新增分类：&#123;&#125;&quot;</span>, categoryDTO);</span><br><span class="line">        categoryService.save(categoryDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分类分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryPageQueryDTO  分页查询参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;分类分页查询&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;PageResult&gt; <span class="title function_">page</span><span class="params">(CategoryPageQueryDTO categoryPageQueryDTO)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;分页查询：&#123;&#125;&quot;</span>, categoryPageQueryDTO);</span><br><span class="line">        <span class="type">PageResult</span> <span class="variable">pageResult</span> <span class="operator">=</span> categoryService.pageQuery(categoryPageQueryDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 分类id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;删除分类&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">deleteById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;删除分类：&#123;&#125;&quot;</span>, id);</span><br><span class="line">        categoryService.deleteById(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryDTO 分类信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;修改分类&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> CategoryDTO categoryDTO)</span>&#123;</span><br><span class="line">        categoryService.update(categoryDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启用、禁用分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status 0-禁用，1-启用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 分类id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;启用禁用分类&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">startOrStop</span><span class="params">(<span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status, Long id)</span>&#123;</span><br><span class="line">        categoryService.startOrStop(status,id);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据类型查询分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 分类类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分类列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据类型查询分类&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;Category&gt;&gt; <span class="title function_">list</span><span class="params">(Integer type)</span>&#123;</span><br><span class="line">        List&lt;Category&gt; list = categoryService.list(type);</span><br><span class="line">        <span class="keyword">return</span> Result.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>CategoryServiceImpl.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.Page;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> com.sky.constant.MessageConstant;</span><br><span class="line"><span class="keyword">import</span> com.sky.constant.StatusConstant;</span><br><span class="line"><span class="keyword">import</span> com.sky.context.BaseContext;</span><br><span class="line"><span class="keyword">import</span> com.sky.dto.CategoryDTO;</span><br><span class="line"><span class="keyword">import</span> com.sky.dto.CategoryPageQueryDTO;</span><br><span class="line"><span class="keyword">import</span> com.sky.entity.Category;</span><br><span class="line"><span class="keyword">import</span> com.sky.exception.DeletionNotAllowedException;</span><br><span class="line"><span class="keyword">import</span> com.sky.mapper.CategoryMapper;</span><br><span class="line"><span class="keyword">import</span> com.sky.mapper.DishMapper;</span><br><span class="line"><span class="keyword">import</span> com.sky.mapper.SetmealMapper;</span><br><span class="line"><span class="keyword">import</span> com.sky.result.PageResult;</span><br><span class="line"><span class="keyword">import</span> com.sky.service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分类业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryMapper categoryMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishMapper dishMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealMapper setmealMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryDTO 分类信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(CategoryDTO categoryDTO)</span> &#123;</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Category</span>();</span><br><span class="line">        <span class="comment">//属性拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(categoryDTO, category);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分类状态默认为禁用状态0</span></span><br><span class="line">        category.setStatus(StatusConstant.DISABLE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置创建时间、修改时间、创建人、修改人</span></span><br><span class="line">        category.setCreateTime(LocalDateTime.now());</span><br><span class="line">        category.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        category.setCreateUser(BaseContext.getCurrentId());</span><br><span class="line">        category.setUpdateUser(BaseContext.getCurrentId());</span><br><span class="line"></span><br><span class="line">        categoryMapper.insert(category);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryPageQueryDTO 分页查询参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> PageResult <span class="title function_">pageQuery</span><span class="params">(CategoryPageQueryDTO categoryPageQueryDTO)</span> &#123;</span><br><span class="line">        PageHelper.startPage(categoryPageQueryDTO.getPage(),categoryPageQueryDTO.getPageSize());</span><br><span class="line">        <span class="comment">//下一条sql进行分页，自动加入limit关键字分页</span></span><br><span class="line">        Page&lt;Category&gt; page = categoryMapper.pageQuery(categoryPageQueryDTO);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(page.getTotal(), page.getResult());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 分类id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//查询当前分类是否关联了菜品，如果关联了就抛出业务异常</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> dishMapper.countByCategoryId(id);</span><br><span class="line">        <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//当前分类下有菜品，不能删除</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeletionNotAllowedException</span>(MessageConstant.CATEGORY_BE_RELATED_BY_DISH);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询当前分类是否关联了套餐，如果关联了就抛出业务异常</span></span><br><span class="line">        count = setmealMapper.countByCategoryId(id);</span><br><span class="line">        <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//当前分类下有菜品，不能删除</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeletionNotAllowedException</span>(MessageConstant.CATEGORY_BE_RELATED_BY_SETMEAL);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除分类数据</span></span><br><span class="line">        categoryMapper.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryDTO 分类信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(CategoryDTO categoryDTO)</span> &#123;</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Category</span>();</span><br><span class="line">        BeanUtils.copyProperties(categoryDTO,category);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置修改时间、修改人</span></span><br><span class="line">        category.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        category.setUpdateUser(BaseContext.getCurrentId());</span><br><span class="line"></span><br><span class="line">        categoryMapper.update(category);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启用、禁用分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status 分类状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 分类id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startOrStop</span><span class="params">(Integer status, Long id)</span> &#123;</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> Category.builder()</span><br><span class="line">                .id(id)</span><br><span class="line">                .status(status)</span><br><span class="line">                .updateTime(LocalDateTime.now())</span><br><span class="line">                .updateUser(BaseContext.getCurrentId())</span><br><span class="line">                .build();</span><br><span class="line">        categoryMapper.update(category);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据类型查询分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 分类类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分类列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Category&gt; <span class="title function_">list</span><span class="params">(Integer type)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> categoryMapper.list(type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>CategoryMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.Page;</span><br><span class="line"><span class="keyword">import</span> com.sky.dto.CategoryPageQueryDTO;</span><br><span class="line"><span class="keyword">import</span> com.sky.entity.Category;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Delete;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> category 分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into category(type, name, sort, status, create_time, update_time, create_user, update_user)&quot; +</span></span><br><span class="line"><span class="meta">            &quot; VALUES&quot; +</span></span><br><span class="line"><span class="meta">            &quot; (#&#123;type&#125;, #&#123;name&#125;, #&#123;sort&#125;, #&#123;status&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;, #&#123;createUser&#125;, #&#123;updateUser&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Category category)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryPageQueryDTO 分页查询参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Page&lt;Category&gt; <span class="title function_">pageQuery</span><span class="params">(CategoryPageQueryDTO categoryPageQueryDTO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 分类id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from category where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id修改分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> category 分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Category category)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据类型查询分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 分类类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分类列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Category&gt; <span class="title function_">list</span><span class="params">(Integer type)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>DishMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询菜品数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId 分类Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select count(id) from dish where category_id = #&#123;categoryId&#125;&quot;)</span></span><br><span class="line">    Integer <span class="title function_">countByCategoryId</span><span class="params">(Long categoryId)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>SetmealMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询套餐的数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 分类Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select count(id) from setmeal where category_id = #&#123;categoryId&#125;&quot;)</span></span><br><span class="line">    Integer <span class="title function_">countByCategoryId</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>CategoryMapper.xml</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.sky.mapper.CategoryMapper&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">&quot;pageQuery&quot;</span> resultType=<span class="string">&quot;com.sky.entity.Category&quot;</span>&gt;</span><br><span class="line">        select * from category</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">                and name like <span class="title function_">concat</span><span class="params">(<span class="string">&#x27;%&#x27;</span>,#&#123;name&#125;,<span class="string">&#x27;%&#x27;</span>)</span></span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;type != null&quot;</span>&gt;</span><br><span class="line">                <span class="type">and</span> <span class="variable">type</span> <span class="operator">=</span> #&#123;type&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">        order by sort asc , create_time desc</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;update id=<span class="string">&quot;update&quot;</span> parameterType=<span class="string">&quot;Category&quot;</span>&gt;</span><br><span class="line">        update category</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;type != null&quot;</span>&gt;</span><br><span class="line">                type = #&#123;type&#125;,</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null&quot;</span>&gt;</span><br><span class="line">                name = #&#123;name&#125;,</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;sort != null&quot;</span>&gt;</span><br><span class="line">                sort = #&#123;sort&#125;,</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;status != null&quot;</span>&gt;</span><br><span class="line">                status = #&#123;status&#125;,</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;updateTime != null&quot;</span>&gt;</span><br><span class="line">                update_time = #&#123;updateTime&#125;,</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;updateUser != null&quot;</span>&gt;</span><br><span class="line">                update_user = #&#123;updateUser&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">        <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">&quot;list&quot;</span> resultType=<span class="string">&quot;Category&quot;</span>&gt;</span><br><span class="line">        select * from category</span><br><span class="line">        <span class="type">where</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;type != null&quot;</span>&gt;</span><br><span class="line">            <span class="type">and</span> <span class="variable">type</span> <span class="operator">=</span> #&#123;type&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        order by sort ,create_time desc</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="附：其他盲区知识补充"><a href="#附：其他盲区知识补充" class="headerlink" title="附：其他盲区知识补充"></a>附：其他盲区知识补充</h2><p>在 Spring MVC 中，<code>@RequestBody</code>注解的核心作用是<strong>将 HTTP 请求体中的数据绑定到控制器方法的参数上</strong>。是否需要添加该注解，主要取决于<strong>参数的数据来源</strong>和<strong>请求的内容格式</strong>。</p>
<h3 id="一、需要添加-RequestBody的场景"><a href="#一、需要添加-RequestBody的场景" class="headerlink" title="一、需要添加@RequestBody的场景"></a>一、需要添加<code>@RequestBody</code>的场景</h3><p>当参数的数据来自<strong>HTTP 请求体（Request Body）</strong>，且请求体格式为<code>application/json</code>、<code>application/xml</code>等非表单格式时，必须使用<code>@RequestBody</code>。</p>
<p>典型场景：</p>
<ol>
<li><p><strong>前端发送 JSON 格式数据</strong>当前端通过<code>POST</code>、<code>PUT</code>等请求，以<code>JSON</code>格式提交数据（<code>Content-Type: application/json</code>）时，后端需要用<code>@RequestBody</code>接收并将 JSON 转换为 Java 对象。</p>
<p> 示例：前端请求（JSON 格式）：</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求体内容</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhangsan&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p> 后端 Controller 接收：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;  <span class="comment">// 需要@RequestBody将JSON转换为User对象</span></span><br><span class="line">    <span class="comment">// 处理登录逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>接收复杂对象或数组</strong>当参数是复杂 Java 对象（包含多个字段）、集合（如<code>List</code>、<code>Map</code>）或数组时，即使请求体是其他格式（如 XML），也需要<code>@RequestBody</code>绑定数据。</p>
<p> 示例（接收数组）：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/batch-delete&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">batchDelete</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;Long&gt; ids)</span> &#123;  <span class="comment">// 接收JSON数组[1,2,3]</span></span><br><span class="line">    <span class="comment">// 批量删除逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="二、不需要添加-RequestBody的场景"><a href="#二、不需要添加-RequestBody的场景" class="headerlink" title="二、不需要添加@RequestBody的场景"></a>二、不需要添加<code>@RequestBody</code>的场景</h3><p>当参数的数据来自<strong>URL 路径（PathVariable）</strong>、<strong>查询参数（Query String）</strong> 或<strong>表单提交（Form Data）</strong> 时，不需要<code>@RequestBody</code>。</p>
<p>典型场景：</p>
<ol>
<li><p>**参数来自 URL 路径（<code>@PathVariable</code>）**参数嵌在 URL 中（如<code>/user/123</code>中的<code>123</code>），用<code>@PathVariable</code>接收，无需<code>@RequestBody</code>。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;  <span class="comment">// 从URL路径获取id</span></span><br><span class="line">    <span class="comment">// 查询用户逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>**参数来自查询参数（<code>@RequestParam</code>）**参数在 URL 末尾（如<code>/search?name=zhangsan&amp;age=20</code>），用<code>@RequestParam</code>接收（简单类型可省略该注解）。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/search&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">search</span><span class="params">(<span class="meta">@RequestParam</span> String name, Integer age)</span> &#123;  <span class="comment">// 从查询参数获取</span></span><br><span class="line">    <span class="comment">// 搜索逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>**表单提交（<code>application/x-www-form-urlencoded</code>）**前端通过表单提交数据（<code>Content-Type: application/x-www-form-urlencoded</code>），此时参数在请求体中，但格式是键值对（非 JSON），无需<code>@RequestBody</code>，Spring 会自动绑定到对象。</p>
<p> 示例：前端表单：</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/register&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 后端接收：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">register</span><span class="params">(User user)</span> &#123;  <span class="comment">// 无需@RequestBody，自动绑定表单字段</span></span><br><span class="line">    <span class="comment">// 注册逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="三、关键判断依据"><a href="#三、关键判断依据" class="headerlink" title="三、关键判断依据"></a>三、关键判断依据</h3><ol>
<li><strong>数据位置</strong>：参数来自请求体（Body）还是 URL（路径 &#x2F; 查询参数）？<ul>
<li>来自请求体 → 可能需要<code>@RequestBody</code>（除非是表单键值对）。</li>
<li>来自 URL → 不需要。</li>
</ul>
</li>
<li><strong>请求格式</strong>：请求体是 JSON&#x2F;XML 还是表单键值对？<ul>
<li>JSON&#x2F;XML → 需要<code>@RequestBody</code>。</li>
<li>表单键值对（<code>application/x-www-form-urlencoded</code>） → 不需要（复杂对象也能自动绑定）。</li>
</ul>
</li>
<li><strong>参数类型</strong>：简单类型（String、int 等）还是复杂对象 &#x2F; 集合？<ul>
<li>复杂对象 &#x2F; 集合且来自请求体 → 需要<code>@RequestBody</code>。</li>
<li>简单类型且来自查询参数 &#x2F; 表单 → 不需要。</li>
</ul>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>@RequestBody</code>的核心是<strong>处理请求体中的非表单格式数据（如 JSON）</strong>，将其转换为 Java 对象。如果参数来自 URL 或表单提交的键值对，则无需添加该注解。</p>
<hr>
<h3 id="四、比较用-还是-Objects-equals-？"><a href="#四、比较用-还是-Objects-equals-？" class="headerlink" title="四、比较用 &#x3D;&#x3D; 还是 Objects.equals() ？"></a>四、比较用 &#x3D;&#x3D; 还是 Objects.equals() ？</h3><p><strong>比较数字包装类（如 <code>Integer</code>、<code>Long</code> 等）时，<code>==</code> 存在潜在问题，推荐用更安全的方式（如 <code>Objects.equals</code>）替代</strong>。具体原因和建议如下：</p>
<h4 id="1-的问题：比较-“引用地址”-而非-“值相等”"><a href="#1-的问题：比较-“引用地址”-而非-“值相等”" class="headerlink" title="1. == 的问题：比较 “引用地址” 而非 “值相等”"></a>1. <code>==</code> 的问题：比较 “引用地址” 而非 “值相等”</h4><p>包装类（如 <code>Integer</code>）是<strong>对象</strong>，<code>==</code> 比较的是<strong>对象的内存地址是否相同</strong>，而非 “值是否相等”。</p>
<ul>
<li><p>示例 1（缓存范围内，看似正常）：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">System.out.println(a == b); <span class="comment">// true（因为 Integer 缓存了 -128~127 的对象）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>示例 2（超出缓存范围，逻辑错误）：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(c == d); <span class="comment">// false（超出缓存，是两个不同对象）</span></span><br></pre></td></tr></table></figure>

<p>  此时 <code>c</code> 和 <code>d</code> 的<strong>值都是 128</strong>，但 <code>==</code> 结果为 <code>false</code>（因为是不同对象实例）。</p>
</li>
</ul>
<h4 id="2-无法安全处理-null"><a href="#2-无法安全处理-null" class="headerlink" title="2. == 无法安全处理 null"></a>2. <code>==</code> 无法安全处理 <code>null</code></h4><p>如果比较的对象包含 <code>null</code>，<code>==</code> 会直接抛出 <code>NullPointerException</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(a == b); <span class="comment">// 直接抛 NPE</span></span><br></pre></td></tr></table></figure>

<h4 id="推荐用法：Objects-equals"><a href="#推荐用法：Objects-equals" class="headerlink" title="推荐用法：Objects.equals(...)"></a>推荐用法：<code>Objects.equals(...)</code></h4><p><code>java.util.Objects.equals(Object a, Object b)</code> 是最安全的方式，原因：</p>
<ul>
<li>内部先判断 <code>a</code> 或 <code>b</code> 是否为 <code>null</code>，<strong>避免空指针异常</strong>；</li>
<li>再调用 <code>equals</code> 方法比较<strong>值是否相等</strong>（而非引用地址）。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(Objects.equals(a, b)); <span class="comment">// true（值相等）</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(Objects.equals(c, d)); <span class="comment">// false（安全，无 NPE）</span></span><br></pre></td></tr></table></figure>

<p>总结：当需要比较 ** 数字包装类的 “值是否相等”** 时，应避免用 <code>==</code>，推荐使用 <code>Objects.equals(...)</code> 保证逻辑正确且避免空指针。</p>
<hr>
<h3 id="五、什么时候xml映射文件「可以不指定」parameterType？"><a href="#五、什么时候xml映射文件「可以不指定」parameterType？" class="headerlink" title="五、什么时候xml映射文件「可以不指定」parameterType？"></a>五、什么时候xml映射文件「可以不指定」<code>parameterType</code>？</h3><p>MyBatis 3.4.0 及以上版本（苍穹外卖用的是高版本，如 3.5.x），满足以下条件时，<code>parameterType</code> 可省略：</p>
<h4 id="1-参数是「JavaBean-类型」（如-Employee、EmployeeDTO）"><a href="#1-参数是「JavaBean-类型」（如-Employee、EmployeeDTO）" class="headerlink" title="1. 参数是「JavaBean 类型」（如 Employee、EmployeeDTO）"></a>1. 参数是「JavaBean 类型」（如 <code>Employee</code>、<code>EmployeeDTO</code>）</h4><p>高版本 MyBatis 会通过 <strong>反射</strong> 自动推断参数类型：</p>
<ul>
<li>若 Mapper 接口方法的参数是 <code>Employee</code>（如 <code>void update(Employee employee)</code>），MyBatis 会直接识别参数类型为 <code>Employee</code>，无需显式写 <code>parameterType=&quot;Employee&quot;</code>。</li>
</ul>
<p>例如：即使去掉 <code>parameterType</code>，以下 SQL 仍能正常运行：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span> <span class="comment">&lt;!-- 省略 parameterType --&gt;</span></span><br><span class="line">    update employee</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span>status = #&#123;status&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-参数用-Param-注解显式标记"><a href="#2-参数用-Param-注解显式标记" class="headerlink" title="2. 参数用 @Param 注解显式标记"></a>2. 参数用 <code>@Param</code> 注解显式标记</h4><p>若 Mapper 接口方法用 <code>@Param</code> 指定参数名，MyBatis 会通过 <code>@Param</code> 识别参数，无需 <code>parameterType</code>：</p>
<ul>
<li><p>Mapper 接口：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">updateStatus</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id, <span class="meta">@Param(&quot;status&quot;)</span> Integer status)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>映射文件（无需parameterType）</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStatus&quot;</span>&gt;</span></span><br><span class="line">    update employee set status = #&#123;status&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="六、什么时候xml映射文件「必须指定」parameterType"><a href="#六、什么时候xml映射文件「必须指定」parameterType" class="headerlink" title="六、什么时候xml映射文件「必须指定」parameterType"></a>六、什么时候xml映射文件「必须指定」<code>parameterType</code></h3><p>只有两种场景下，<code>parameterType</code> 是必须显式声明的：</p>
<h4 id="参数类型是「集合-数组-Map」等非-JavaBean-类型"><a href="#参数类型是「集合-数组-Map」等非-JavaBean-类型" class="headerlink" title="参数类型是「集合 &#x2F; 数组 &#x2F; Map」等非 JavaBean 类型"></a>参数类型是「集合 &#x2F; 数组 &#x2F; Map」等非 JavaBean 类型</h4><p>当参数是 <code>List</code>、<code>Array</code>、<code>Map</code> 等特殊类型时，MyBatis 无法通过方法参数自动推断具体类型，必须显式指定 <code>parameterType</code>：</p>
<ul>
<li><p>示例 1：批量删除员工（参数是List<Long>)</Long></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;batchDelete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">    delete from employee where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>示例 2：用 Map 传多参数（参数是Map)</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.Map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span></span><br><span class="line">    select * from employee </span><br><span class="line">    where name = #&#123;name&#125; and status = #&#123;status&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>苍穹外卖</tag>
      </tags>
  </entry>
  <entry>
    <title>sky-takeout-day04-note</title>
    <url>/2025/10/13/sky-takeout-day04-note/</url>
    <content><![CDATA[<h1 id="Sky-takeout-Day04"><a href="#Sky-takeout-Day04" class="headerlink" title="Sky-takeout  Day04"></a>Sky-takeout  Day04</h1><hr>
<blockquote>
<p>【前言】</p>
<p>Day04 的 Task 是套餐管理相关代码的开发 ，也是对多表业务的分析能力的锻炼</p>
</blockquote>
<span id="more"></span>

<h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ul>
<li>新增套餐</li>
<li>套餐分页查询</li>
<li>删除套餐</li>
<li>修改套餐</li>
<li>起售停售套餐</li>
</ul>
<h2 id="1-新增套餐"><a href="#1-新增套餐" class="headerlink" title="1. 新增套餐"></a>1. 新增套餐</h2><h3 id="需求分析与接口设计"><a href="#需求分析与接口设计" class="headerlink" title="需求分析与接口设计"></a>需求分析与接口设计</h3><p>业务规则：</p>
<ul>
<li>套餐名称唯一</li>
<li>套餐必须属于某个分类</li>
<li>套餐必须包含菜品</li>
<li>名称、分类、价格、图片为必填项</li>
<li>添加菜品窗口需要根据分类类型来展示菜品</li>
<li>新增的套餐默认为停售状态</li>
</ul>
<p>接口设计（共涉及到 4 个接口）：</p>
<ul>
<li>根据类型查询分类（已完成）</li>
<li>根据分类 id 查询菜品</li>
<li>图片上传（已完成）</li>
<li>新增套餐</li>
</ul>
<p><strong>产品原型：</strong><br><img src="/2025/10/13/sky-takeout-day04-note/image-20251013090412130.png" alt="image-20251013090412130" style="zoom: 50%;"></p>
<img src="/2025/10/13/sky-takeout-day04-note/image-20251013090422861.png" alt="image-20251013090422861" style="zoom:50%;">

<p>可以看到，在新增套餐中还涉及到了菜品的一个接口，就是 <strong>根据分类 id 查询菜品并列出菜品</strong>，所以需要在 DishController 再加一个接口 来根据分类 id 展示菜品（list）</p>
<p><strong>接口设计：</strong><br><img src="/2025/10/13/sky-takeout-day04-note/image-20251013090823018.png" alt="image-20251013090823018" style="zoom:50%;"></p>
<hr>
<img src="/2025/10/13/sky-takeout-day04-note/image-20251013090830998.png" alt="image-20251013090830998" style="zoom:50%;">

<p><strong>表设计：</strong></p>
<p>setmeal 表为套餐表，用于存储套餐的信息。具体表结构如下：</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>数据类型</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td>主键</td>
<td>自增</td>
</tr>
<tr>
<td>name</td>
<td>varchar(32)</td>
<td>套餐名称</td>
<td>唯一</td>
</tr>
<tr>
<td>category_id</td>
<td>bigint</td>
<td>分类 id</td>
<td>逻辑外键</td>
</tr>
<tr>
<td>price</td>
<td>decimal(10,2)</td>
<td>套餐价格</td>
<td></td>
</tr>
<tr>
<td>image</td>
<td>varchar(255)</td>
<td>图片路径</td>
<td></td>
</tr>
<tr>
<td>description</td>
<td>varchar(255)</td>
<td>套餐描述</td>
<td></td>
</tr>
<tr>
<td>status</td>
<td>int</td>
<td>售卖状态</td>
<td>1 起售 0 停售</td>
</tr>
<tr>
<td>create_time</td>
<td>datetime</td>
<td>创建时间</td>
<td></td>
</tr>
<tr>
<td>update_time</td>
<td>datetime</td>
<td>最后修改时间</td>
<td></td>
</tr>
<tr>
<td>create_user</td>
<td>bigint</td>
<td>创建人 id</td>
<td></td>
</tr>
<tr>
<td>update_user</td>
<td>bigint</td>
<td>最后修改人 id</td>
<td></td>
</tr>
</tbody></table>
<p>setmeal_dish 表为套餐菜品关系表，用于存储套餐和菜品的关联关系。具体表结构如下：</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>数据类型</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td>主键</td>
<td>自增</td>
</tr>
<tr>
<td>setmeal_id</td>
<td>bigint</td>
<td>套餐 id</td>
<td>逻辑外键</td>
</tr>
<tr>
<td>dish_id</td>
<td>bigint</td>
<td>菜品 id</td>
<td>逻辑外键</td>
</tr>
<tr>
<td>name</td>
<td>varchar(32)</td>
<td>菜品名称</td>
<td>冗余字段</td>
</tr>
<tr>
<td>price</td>
<td>decimal(10,2)</td>
<td>菜品单价</td>
<td>冗余字段</td>
</tr>
<tr>
<td>copies</td>
<td>int</td>
<td>菜品份数</td>
<td></td>
</tr>
</tbody></table>
<h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><h4 id="1）根据分类-id-查询并列出菜品"><a href="#1）根据分类-id-查询并列出菜品" class="headerlink" title="1）根据分类 id 查询并列出菜品"></a>1）根据分类 id 查询并列出菜品</h4><p><strong>DishController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据分类条件查询列出菜品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> categoryId 分类id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 菜品列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据分类条件查询并列出菜品&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;Dish&gt;&gt; <span class="title function_">list</span><span class="params">(Long categoryId)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;根据分类条件查询并列出菜品: &#123;&#125;&quot;</span>, categoryId);</span><br><span class="line">    List&lt;Dish&gt; dishList = dishService.list(categoryId);</span><br><span class="line">    <span class="keyword">return</span> Result.success(dishList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>DishServiceImpl.java</strong></p>
<p>这里注意 status <strong>状态是 ENABLE</strong>，一开始写成 DISABLE 了，没有菜品列出，后面发现是状态设置错了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据分类条件查询列出菜品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> categoryId 分类id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 菜品列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Dish&gt; <span class="title function_">list</span><span class="params">(Long categoryId)</span> &#123;</span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> Dish.builder()</span><br><span class="line">            .status(StatusConstant.ENABLE) <span class="comment">// 注意这里是只查询起售状态的菜品</span></span><br><span class="line">            .categoryId(categoryId)</span><br><span class="line">            .build();</span><br><span class="line">    <span class="keyword">return</span> dishMapper.list(dish);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>DishMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态条件查询菜品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dish 条件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 菜品列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Dish&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>DishMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sky.entity.Dish&quot;</span>&gt;</span></span><br><span class="line">    select * from dish</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and name like concat(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span></span><br><span class="line">            and category_id = #&#123;categoryId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            and status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    order by create_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2）新增套餐"><a href="#2）新增套餐" class="headerlink" title="2）新增套餐"></a>2）新增套餐</h4><p>SetmealController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.controller.admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sky.dto.SetmealDTO;</span><br><span class="line"><span class="keyword">import</span> com.sky.result.Result;</span><br><span class="line"><span class="keyword">import</span> com.sky.service.SetmealService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;套餐管理&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;admin/setmeal&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealService setmealService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO 套餐信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增套餐&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Void&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDTO setmealDTO)</span> &#123; <span class="comment">// 这里要加 @RequestBody 将前端传递的json数据转换为java对象</span></span><br><span class="line">        log.info(<span class="string">&quot;新增套餐: &#123;&#125;&quot;</span>, setmealDTO);</span><br><span class="line">        setmealService.saveWithDish(setmealDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>SetmealServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sky.dto.SetmealDTO;</span><br><span class="line"><span class="keyword">import</span> com.sky.entity.Setmeal;</span><br><span class="line"><span class="keyword">import</span> com.sky.entity.SetmealDish;</span><br><span class="line"><span class="keyword">import</span> com.sky.mapper.SetmealDishMapper;</span><br><span class="line"><span class="keyword">import</span> com.sky.mapper.SetmealMapper;</span><br><span class="line"><span class="keyword">import</span> com.sky.service.SetmealService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SetmealService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealMapper setmealMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealDishMapper setmealDishMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO 套餐信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDTO setmealDTO)</span> &#123;</span><br><span class="line">        <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Setmeal</span>();</span><br><span class="line">        BeanUtils.copyProperties(setmealDTO, setmeal);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 向setmeal表插入套餐</span></span><br><span class="line">        setmealMapper.insert(setmeal);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 向setmeal_dish表插入套餐和菜品的关联关系</span></span><br><span class="line">        <span class="comment">// 先获取套餐id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> setmeal.getId();</span><br><span class="line">        <span class="comment">// 再获取套餐和菜品的关联关系</span></span><br><span class="line">        List&lt;SetmealDish&gt; setmealDishes = setmealDTO.getSetmealDishes();</span><br><span class="line">        <span class="comment">// 设置套餐id</span></span><br><span class="line">        setmealDishes.forEach(setmealDish -&gt; setmealDish.setSetmealId(setmealId));</span><br><span class="line">        <span class="comment">// 批量插入套餐和菜品的关联关系</span></span><br><span class="line">        setmealDishMapper.insertBatch(setmealDishes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>SetmealMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入套餐, 并且将主键回填到实体类对象中 (useGeneratedKeys = true, keyProperty = &quot;id&quot;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmeal 套餐</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AutoFill(value = OperationType.INSERT)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Setmeal setmeal)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>SetmealMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sky.mapper.SetmealMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into setmeal (category_id, name, price, description, image, create_time, update_time, create_user, update_user)</span><br><span class="line">        values</span><br><span class="line">        (#&#123;categoryId&#125;, #&#123;name&#125;, #&#123;price&#125;, #&#123;description&#125;, #&#123;image&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;, #&#123;createUser&#125;, #&#123;updateUser&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>SetmealDishMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量插入套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealDishes 套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertBatch</span><span class="params">(List&lt;SetmealDish&gt; setmealDishes)</span>;</span><br></pre></td></tr></table></figure>

<p>SetmealDishMapper.xml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;insert id=<span class="string">&quot;insertBatch&quot;</span>&gt;</span><br><span class="line">    insert into <span class="title function_">setmeal_dish</span> <span class="params">(setmeal_id, dish_id, name, price, copies)</span></span><br><span class="line">    values</span><br><span class="line">    &lt;foreach collection=<span class="string">&quot;setmealDishes&quot;</span> item=<span class="string">&quot;sd&quot;</span> separator=<span class="string">&quot;,&quot;</span>&gt;</span><br><span class="line">        (#&#123;sd.setmealId&#125;, #&#123;sd.dishId&#125;, #&#123;sd.name&#125;, #&#123;sd.price&#125;, #&#123;sd.copies&#125;)</span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure>



<h3 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h3><p><img src="/2025/10/13/sky-takeout-day04-note/image-20251013112100927.png" alt="image-20251013112100927"></p>
<p><img src="/2025/10/13/sky-takeout-day04-note/image-20251013112107482.png" alt="image-20251013112107482"></p>
<p>成功在表中插入数据<br><img src="/2025/10/13/sky-takeout-day04-note/image-20251013112114859.png" alt="image-20251013112114859"></p>
<ul>
<li><strong>注意</strong> 这里有误！！后来在写删除套餐的时候才发现，插入时 status 不应该是 1，之前编写新增套餐代码的时候在 mapper 的 xml 映射文件遗漏了 status 字段，而且在 service 层忘记设置了初始状态为停售 DISABLE（也就是 0）</li>
</ul>
<h2 id="2-套餐分页查询"><a href="#2-套餐分页查询" class="headerlink" title="2. 套餐分页查询"></a>2. 套餐分页查询</h2><h3 id="需求分析与接口设计-1"><a href="#需求分析与接口设计-1" class="headerlink" title="需求分析与接口设计"></a>需求分析与接口设计</h3><p><strong>业务规则：</strong></p>
<ul>
<li>根据页码进行分页展示</li>
<li>每页展示 10 条数据</li>
<li>可以根据需要，按照套餐名称、分类、售卖状态进行查询</li>
</ul>
<p><strong>产品原型</strong><br><img src="/2025/10/13/sky-takeout-day04-note/image-20251013112348704.png" alt="image-20251013112348704"></p>
<p>注意因为视图需要套餐对应的分类名称，所以分页时 <strong>Page 的泛型是 VO 对象，即 SetmealVO。</strong></p>
<img src="/2025/10/13/sky-takeout-day04-note/image-20251013113648754.png" alt="image-20251013113648754" style="zoom:50%;">

<p><strong>接口设计：</strong><br><img src="/2025/10/13/sky-takeout-day04-note/image-20251013112435652.png" alt="image-20251013112435652"></p>
<h3 id="流程分析-1"><a href="#流程分析-1" class="headerlink" title="流程分析"></a>流程分析</h3><h3 id="代码编写-1"><a href="#代码编写-1" class="headerlink" title="代码编写"></a>代码编写</h3><p><strong>SetmealController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealPageQueryDTO 分页查询参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 套餐分页结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;分页查询套餐&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;PageResult&gt; <span class="title function_">page</span><span class="params">(SetmealPageQueryDTO setmealPageQueryDTO)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;分页查询套餐: &#123;&#125;&quot;</span>, setmealPageQueryDTO);</span><br><span class="line">    <span class="type">PageResult</span> <span class="variable">pageResult</span> <span class="operator">=</span> setmealService.pageQuery(setmealPageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SetmealServiceImpl.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealPageQueryDTO 分页查询参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 套餐分页结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">pageQuery</span><span class="params">(SetmealPageQueryDTO setmealPageQueryDTO)</span> &#123;</span><br><span class="line">    PageHelper.startPage(setmealPageQueryDTO.getPage(), setmealPageQueryDTO.getPageSize());</span><br><span class="line">    Page&lt;SetmealVO&gt; page = setmealMapper.pageQuery(setmealPageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(page.getTotal(), page.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SetmealMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealPageQueryDTO 分页查询参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 套餐分页结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Page&lt;SetmealVO&gt; <span class="title function_">pageQuery</span><span class="params">(SetmealPageQueryDTO setmealPageQueryDTO)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>SetmealMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;pageQuery&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sky.vo.SetmealVO&quot;</span>&gt;</span></span><br><span class="line">    select s.*, c.name as categoryName</span><br><span class="line">    from setmeal s left outer join category c</span><br><span class="line">    on s.category_id = c.id</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            s.name like concat(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            and s.status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span></span><br><span class="line">            and s.category_id = #&#123;categoryId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="功能测试-1"><a href="#功能测试-1" class="headerlink" title="功能测试"></a>功能测试</h3><p><img src="/2025/10/13/sky-takeout-day04-note/image-20251013114913208.png" alt="image-20251013114913208"></p>
<p><img src="/2025/10/13/sky-takeout-day04-note/image-20251013114722042.png" alt="image-20251013114722042"></p>
<h2 id="3-删除套餐"><a href="#3-删除套餐" class="headerlink" title="3. 删除套餐"></a>3. 删除套餐</h2><h3 id="需求分析与接口设计-2"><a href="#需求分析与接口设计-2" class="headerlink" title="需求分析与接口设计"></a>需求分析与接口设计</h3><p><strong>业务规则：</strong></p>
<ul>
<li>可以一次删除一个套餐，也可以批量删除套餐</li>
<li>起售中的套餐不能删除</li>
</ul>
<p><strong>接口设计：</strong></p>
<img src="/2025/10/13/sky-takeout-day04-note/image-20251013115744668.png" alt="image-20251013115744668" style="zoom:50%;">



<h3 id="流程分析-2"><a href="#流程分析-2" class="headerlink" title="流程分析"></a>流程分析</h3><h3 id="代码编写-2"><a href="#代码编写-2" class="headerlink" title="代码编写"></a>代码编写</h3><p><strong>SetmealController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids 套餐id集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;删除套餐&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Void&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;删除套餐: &#123;&#125;&quot;</span>, ids);</span><br><span class="line">    setmealService.deleteWithDish(ids);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SetmealServiceImpl.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除套餐, 同时删除套餐和菜品的关联数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids 套餐id集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteWithDish</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    <span class="comment">// 起售中的套餐不能删除</span></span><br><span class="line">    <span class="comment">// 1. 查询套餐状态, 确认是否可以删除</span></span><br><span class="line">    <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">        <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> setmealMapper.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (setmeal != <span class="literal">null</span> &amp;&amp; Objects.equals(setmeal.getStatus(), StatusConstant.ENABLE)) &#123; <span class="comment">// 套餐起售中</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeletionNotAllowedException</span>(MessageConstant.SETMEAL_ON_SALE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 删除套餐表中的数据</span></span><br><span class="line">    <span class="comment">// delete from setmeal where id in (1,2,3)</span></span><br><span class="line">    setmealMapper.deleteByIds(ids);</span><br><span class="line">    <span class="comment">// 3. 删除套餐和菜品的关联数据</span></span><br><span class="line">    <span class="comment">// delete from setmeal_dish where setmeal_id in (1,2,3)</span></span><br><span class="line">    setmealDishMapper.deleteBySetmealIds(ids);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SetmealMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询套餐  (用于删除套餐时, 查询套餐状态)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 套餐id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from setmeal where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">Setmeal <span class="title function_">getById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id删除套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids 套餐id集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>SetmealMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    delete from setmeal where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>SetmealDishMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据套餐id删除对应的套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealIds 套餐id集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteBySetmealIds</span><span class="params">(List&lt;Long&gt; setmealIds)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>SetmealDishMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBySetmealIds&quot;</span>&gt;</span></span><br><span class="line">    delete from setmeal_dish where setmeal_id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;setmealIds&quot;</span> <span class="attr">item</span>=<span class="string">&quot;setmealId&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;setmealId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="功能测试-2"><a href="#功能测试-2" class="headerlink" title="功能测试"></a>功能测试</h3><p>起售中无法删除</p>
<p><img src="/2025/10/13/sky-takeout-day04-note/image-20251013135201884.png" alt="image-20251013135201884"></p>
<p>删除成功</p>
<p><img src="/2025/10/13/sky-takeout-day04-note/image-20251013135207956.png" alt="image-20251013135207956"></p>
<p><img src="/2025/10/13/sky-takeout-day04-note/image-20251013135259589.png" alt="image-20251013135259589"></p>
<h2 id="4-修改套餐"><a href="#4-修改套餐" class="headerlink" title="4. 修改套餐"></a>4. 修改套餐</h2><h3 id="需求分析与接口设计-3"><a href="#需求分析与接口设计-3" class="headerlink" title="需求分析与接口设计"></a>需求分析与接口设计</h3><p><strong>产品原型：</strong><br><img src="/2025/10/13/sky-takeout-day04-note/image-20251013140428967.png" alt="image-20251013140428967" style="zoom:50%;"></p>
<p><strong>接口设计（共涉及到5个接口）：</strong></p>
<ul>
<li>根据id查询套餐</li>
<li>根据类型查询分类（已完成）</li>
<li>根据分类id查询菜品（已完成）</li>
<li>图片上传（已完成）</li>
<li>修改套餐</li>
</ul>
<h3 id="流程分析-3"><a href="#流程分析-3" class="headerlink" title="流程分析"></a>流程分析</h3><h3 id="代码编写-3"><a href="#代码编写-3" class="headerlink" title="代码编写"></a>代码编写</h3><p><strong>SetmealController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询套餐信息, 包括套餐和菜品的关联信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 套餐id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 套餐信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id查询套餐信息(包括套餐和菜品的关联信息)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;SetmealVO&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;  <span class="comment">// 这里要加 @PathVariable 将路径参数中的id参数绑定到方法的id参数上</span></span><br><span class="line">    log.info(<span class="string">&quot;根据id查询套餐信息: &#123;&#125;&quot;</span>, id);</span><br><span class="line">    <span class="type">SetmealVO</span> <span class="variable">setmealVO</span> <span class="operator">=</span> setmealService.getByIdWithDishes(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success(setmealVO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改套餐(包括套餐和菜品的关联信息)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealDTO 套餐信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;修改套餐&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Void&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDTO setmealDTO)</span> &#123;  <span class="comment">// 这里要加 @RequestBody 将前端传递的json数据转换为java对象</span></span><br><span class="line">    log.info(<span class="string">&quot;修改套餐: &#123;&#125;&quot;</span>, setmealDTO);</span><br><span class="line">    setmealService.updateWithDish(setmealDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SetmealServiceImpl.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询套餐信息, 包括套餐和菜品的关联信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 套餐id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 套餐信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> SetmealVO <span class="title function_">getByIdWithDishes</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 查询套餐基本信息</span></span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> setmealMapper.getById(id);</span><br><span class="line">    <span class="comment">// 2. 查询套餐和菜品的关联信息</span></span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDishMapper.getByIdWithDishes(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 将套餐基本信息与套餐菜品信息封装到VO对象中并返回</span></span><br><span class="line">    <span class="type">SetmealVO</span> <span class="variable">setmealVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealVO</span>();</span><br><span class="line">    BeanUtils.copyProperties(setmeal, setmealVO);</span><br><span class="line">    setmealVO.setSetmealDishes(setmealDishes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> setmealVO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改套餐(包括套餐和菜品的关联信息)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealDTO 套餐信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithDish</span><span class="params">(SetmealDTO setmealDTO)</span> &#123;</span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Setmeal</span>();</span><br><span class="line">    BeanUtils.copyProperties(setmealDTO, setmeal);</span><br><span class="line">    <span class="comment">// 1. 首先，更新setmeal表中的基本信息</span></span><br><span class="line">    setmealMapper.updateById(setmeal);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 然后，更新setmeal_dish表中的关联信息</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> setmeal.getId();</span><br><span class="line">    <span class="comment">// 2.1 先删除原有的关联信息</span></span><br><span class="line">    setmealDishMapper.deleteBySetmealIds(List.of(setmealId));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.2 再重新插入新的关联信息</span></span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDTO.getSetmealDishes();</span><br><span class="line">    <span class="comment">// 设置套餐id</span></span><br><span class="line">    setmealDishes.forEach(setmealDish -&gt; setmealDish.setSetmealId(setmealId));</span><br><span class="line">    <span class="comment">// 批量插入套餐和菜品的关联关系</span></span><br><span class="line">    setmealDishMapper.insertBatch(setmealDishes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SetmealMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id动态修改套餐信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmeal 套餐信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AutoFill(value = OperationType.UPDATE)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">updateById</span><span class="params">(Setmeal setmeal)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>SetmealMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateById&quot;</span>&gt;</span></span><br><span class="line">    update setmeal</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span>category_id = #&#123;categoryId&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>name = #&#123;name&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;price != null&quot;</span>&gt;</span>price = #&#123;price&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span>status = #&#123;status&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;description != null&quot;</span>&gt;</span>description = #&#123;description&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;image != null&quot;</span>&gt;</span>image = #&#123;image&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        update_time = #&#123;updateTime&#125;,</span><br><span class="line">        update_user = #&#123;updateUser&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>SetmealDishMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据套餐id查询对应的套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmealId 套餐id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from setmeal_dish where setmeal_id = #&#123;setmealId&#125;&quot;)</span></span><br><span class="line">List&lt;SetmealDish&gt; <span class="title function_">getByIdWithDishes</span><span class="params">(Long setmealId)</span>;</span><br></pre></td></tr></table></figure>



<h3 id="功能测试-3"><a href="#功能测试-3" class="headerlink" title="功能测试"></a>功能测试</h3><p><img src="/2025/10/13/sky-takeout-day04-note/image-20251013152423948.png" alt="image-20251013152423948"></p>
<p><img src="/2025/10/13/sky-takeout-day04-note/image-20251013152426440.png" alt="image-20251013152426440"></p>
<h2 id="5-起售停售套餐"><a href="#5-起售停售套餐" class="headerlink" title="5. 起售停售套餐"></a>5. 起售停售套餐</h2><h3 id="需求分析与接口设计-4"><a href="#需求分析与接口设计-4" class="headerlink" title="需求分析与接口设计"></a>需求分析与接口设计</h3><p>业务规则：</p>
<ul>
<li>可以对状态为起售的套餐进行停售操作，可以对状态为停售的套餐进行起售操作</li>
<li>起售的套餐可以展示在用户端，停售的套餐不能展示在用户端</li>
<li>起售套餐时，如果套餐内包含停售的菜品，则不能起售</li>
</ul>
<p><strong>接口设计：</strong><br><img src="/2025/10/13/sky-takeout-day04-note/image-20251013162309637.png" alt="image-20251013162309637" style="zoom:50%;"></p>
<h3 id="流程分析-4"><a href="#流程分析-4" class="headerlink" title="流程分析"></a>流程分析</h3><h3 id="代码编写-4"><a href="#代码编写-4" class="headerlink" title="代码编写"></a>代码编写</h3><p><strong>SetmealController</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 起售/停售套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status 状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 套餐id集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;起售/停售套餐&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Void&gt; <span class="title function_">startOrStop</span><span class="params">(<span class="meta">@PathVariable</span> Integer status, Long id)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;起售/停售套餐: &#123;&#125;, &#123;&#125;&quot;</span>, status, id);</span><br><span class="line">    setmealService.startOrStop(status, id);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SetmealServiceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 起售/停售套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status 套餐状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 套餐id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startOrStop</span><span class="params">(Integer status, Long id)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果要设置为起售，需要检查套餐内的菜品是否都为起售状态</span></span><br><span class="line">    <span class="keyword">if</span> (Objects.equals(status, StatusConstant.ENABLE)) &#123; <span class="comment">// 要起售</span></span><br><span class="line">        <span class="comment">// select a.* from dish a</span></span><br><span class="line">        <span class="comment">// left join setmeal_dish b on a.id = b.dish_id where b.setmeal_id = ?;</span></span><br><span class="line">        List&lt;Dish&gt; dishList = dishMapper.getBySetmealId(id); <span class="comment">// 查询套餐内的菜品</span></span><br><span class="line">        dishList.forEach(dish -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (dish.getStatus().equals(StatusConstant.DISABLE)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SetmealEnableFailedException</span>(MessageConstant.SETMEAL_ENABLE_FAILED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;); <span class="comment">// 只要有一个菜品是停售状态, 就不能起售</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以起售，更新套餐状态</span></span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> Setmeal.builder()</span><br><span class="line">            .id(id)</span><br><span class="line">            .status(status)</span><br><span class="line">            .build();</span><br><span class="line">    setmealMapper.updateById(setmeal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>DishMapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据套餐id查询对应的菜品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 套餐id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 菜品列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select(&quot;select d.* from dish d &quot; +</span></span><br><span class="line"><span class="meta">        &quot;left join setmeal_dish sd on d.id = sd.dish_id &quot; +</span></span><br><span class="line"><span class="meta">        &quot;where sd.setmeal_id = #&#123;id&#125; &quot;)</span></span><br><span class="line">List&lt;Dish&gt; <span class="title function_">getBySetmealId</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure>



<h3 id="功能测试-4"><a href="#功能测试-4" class="headerlink" title="功能测试"></a>功能测试</h3><p><img src="/2025/10/13/sky-takeout-day04-note/image-20251013170117923.png" alt="image-20251013170117923"></p>
<p><img src="/2025/10/13/sky-takeout-day04-note/image-20251013170122129.png" alt="image-20251013170122129"></p>
]]></content>
      <tags>
        <tag>苍穹外卖</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2025/10/14/sky-takeout-day05-note/</url>
    <content><![CDATA[<h1 id="Sky-takeout-Day05"><a href="#Sky-takeout-Day05" class="headerlink" title="Sky-takeout  Day05"></a>Sky-takeout  Day05</h1><hr>
<blockquote>
<p>【前言】</p>
<p>Day05 的 Task 是 Redis 的入门，了解 Redis 数据类型、常用命令，如何在Java中使用Redis，以及 Redis 在项目中的应用场景，通过项目案例使用 Redis。</p>
</blockquote>
<span id="more"></span>

<h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ul>
<li>Redis入门</li>
<li>Redis数据类型</li>
<li>Redis常用命令</li>
<li>在Java中操作redis</li>
<li>店铺营业状态设置</li>
</ul>
<h2 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h2><ol>
<li><p><strong>简介：<strong>Redis是一个基于</strong>内存</strong>的key-value结构数据库。Redis 是互联网技术领域使用最为广泛的<strong>存储中间件</strong>。</p>
</li>
<li><p><strong>主要特点：</strong></p>
</li>
</ol>
<ul>
<li>基于内存存储，读写性能高  </li>
<li>适合存储热点数据（热点商品、资讯、新闻）</li>
<li>企业应用广泛</li>
</ul>
<p>Redis是用C语言开发的一个开源的高性能键值对(key-value)数据库，官方提供的数据是可以达到100000+的QPS（每秒内查询次数）。它存储的value类型比较丰富，也被称为结构化的NoSql数据库。</p>
<p>NoSql（Not Only SQL），不仅仅是SQL，泛指<strong>非关系型数据库</strong>。NoSql数据库并不是要取代关系型数据库，而是关系型数据库的补充。</p>
<ol start="3">
<li><strong>Redis服务启动与停止：</strong></li>
</ol>
<p><strong>windows 版</strong> Redis 服务启动命令：<strong>redis-server.exe redis.windows.conf</strong></p>
<p>Redis服务默认端口号为 <strong>6379</strong> ，通过快捷键<strong>Ctrl + C</strong> 即可停止Redis服务</p>
<p>当Redis服务启动成功后，可通过客户端进行连接。客户端连接命令：redis-cli.exe</p>
<p>通过redis-cli.exe命令默认连接的是本地的redis服务，并且使用默认6379端口。也可以通过指定如下参数连接：</p>
<ul>
<li><p>-h ip地址</p>
</li>
<li><p>-p 端口号</p>
</li>
<li><p>-a 密码（如果需要）</p>
</li>
</ul>
<ol start="4">
<li><strong>修改Redis配置文件：</strong></li>
</ol>
<p>若要设置Redis服务密码，修改redis.windows.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirepass 123456</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li>修改密码后需要重启Redis服务才能生效</li>
<li>Redis配置文件中 # 表示注释</li>
</ul>
<p>重启Redis后，再次连接Redis时，需加上密码，否则连接失败。</p>
<h2 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h2><ol>
<li><strong>五种常用数据类型介绍</strong></li>
</ol>
<p>Redis存储的是key-value结构的数据，其中key是字符串类型，value有5种常用的数据类型：</p>
<ul>
<li>字符串 string</li>
<li>哈希 hash</li>
<li>列表 list</li>
<li>集合 set</li>
<li>有序集合 sorted set &#x2F; zset</li>
</ul>
<ol start="2">
<li><strong>数据类型特点：</strong> <img src="/2025/10/14/sky-takeout-day05-note/image-20251014180847137.png" alt="image-20251014180847137" style="zoom:50%;"></li>
</ol>
<p><strong>解释说明：</strong></p>
<ul>
<li>字符串(string)：普通字符串，Redis中最简单的数据类型</li>
<li>哈希(hash)：也叫散列，类似于Java中的HashMap结构</li>
<li>列表(list)：按照插入顺序排序，可以有重复元素，类似于Java中的LinkedList</li>
<li>集合(set)：无序集合，没有重复元素，类似于Java中的HashSet</li>
<li>有序集合(sorted set&#x2F;zset)：集合中每个元素关联一个分数(score)，根据分数升序排序，没有重复元素</li>
</ul>
<h2 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h2><p>以下只介绍 常用的 命令，更多命令可以参考Redis中文网：<a href="https://www.redis.net.cn/">https://www.redis.net.cn</a></p>
<h3 id="字符串操作命令"><a href="#字符串操作命令" class="headerlink" title="字符串操作命令"></a>字符串操作命令</h3><p>Redis 中字符串类型常用命令：</p>
<ul>
<li><strong>SET</strong> key value 					         设置指定key的值</li>
<li><strong>GET</strong> key                                        获取指定key的值</li>
<li><strong>SETEX</strong> key seconds value         设置指定key的值，并将 key 的过期时间设为 seconds 秒</li>
<li><strong>SETNX</strong> key value                        只有在 key    不存在时设置 key 的值</li>
</ul>
<h3 id="哈希操作命令"><a href="#哈希操作命令" class="headerlink" title="哈希操作命令"></a>哈希操作命令</h3><p>Redis hash 是一个string类型的 field 和 value 的映射表，hash特别适合用于存储对象，常用命令：</p>
<ul>
<li><strong>HSET</strong> key field value             将哈希表 key 中的字段 field 的值设为 value</li>
<li><strong>HGET</strong> key field                       获取存储在哈希表中指定字段的值</li>
<li><strong>HDEL</strong> key field                       删除存储在哈希表中的指定字段</li>
<li><strong>HKEYS</strong> key                              获取哈希表中所有字段</li>
<li><strong>HVALS</strong> key                              获取哈希表中所有值</li>
</ul>
<h3 id="列表操作命令"><a href="#列表操作命令" class="headerlink" title="列表操作命令"></a>列表操作命令</h3><p>Redis 列表是简单的字符串列表，按照插入顺序排序，常用命令：</p>
<ul>
<li><strong>LPUSH</strong> key value1 [value2]         将一个或多个值插入到列表头部</li>
<li><strong>LRANGE</strong> key start stop                获取列表指定范围内的元素</li>
<li><strong>RPOP</strong> key                                       移除并获取列表最后一个元素</li>
<li><strong>LLEN</strong> key                                        获取列表长度</li>
<li><strong>BRPOP</strong> key1 [key2 ] timeout       移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超    时或发现可弹出元素为止</li>
</ul>
<h3 id="集合操作命令"><a href="#集合操作命令" class="headerlink" title="集合操作命令"></a>集合操作命令</h3><p>Redis set 是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据，常用命令：</p>
<ul>
<li><strong>SADD</strong> key member1 [member2]            向集合添加一个或多个成员</li>
<li><strong>SMEMBERS</strong> key                                         返回集合中的所有成员</li>
<li><strong>SCARD</strong> key                                                  获取集合的成员数</li>
<li><strong>SINTER</strong> key1 [key2]                                   返回给定所有集合的交集</li>
<li><strong>SUNION</strong> key1 [key2]                                 返回所有给定集合的并集</li>
<li><strong>SREM</strong> key member1 [member2]            移除集合中一个或多个成员</li>
</ul>
<h3 id="有序集合操作命令"><a href="#有序集合操作命令" class="headerlink" title="有序集合操作命令"></a>有序集合操作命令</h3><p>Redis有序集合是string类型元素的集合，且不允许有重复成员。每个元素都会关联一个double类型的分数。常用命令：</p>
<p>常用命令：</p>
<ul>
<li><strong>ZADD</strong> key score1 member1 [score2 member2]     向有序集合添加一个或多个成员</li>
<li><strong>ZRANGE</strong> key start stop [WITHSCORES]                     通过索引区间返回有序集合中指定区间内的成员</li>
<li><strong>ZINCRBY</strong> key increment member                              有序集合中对指定成员的分数加上增量 increment</li>
<li><strong>ZREM</strong> key member [member …]                                移除有序集合中的一个或多个成员</li>
</ul>
<h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><p>Redis的通用命令是不分数据类型的，都可以使用的命令：</p>
<ul>
<li>KEYS pattern 		查找所有符合给定模式( pattern)的 key </li>
<li>EXISTS key 		检查给定 key 是否存在</li>
<li>TYPE key 		返回 key 所储存的值的类型</li>
<li>DEL key 		该命令用于在 key 存在是删除 key</li>
</ul>
<h2 id="在Java中操作redis"><a href="#在Java中操作redis" class="headerlink" title="在Java中操作redis"></a>在Java中操作redis</h2><h3 id="Redis的Java客户端：Spring-Data-Redis"><a href="#Redis的Java客户端：Spring-Data-Redis" class="headerlink" title="Redis的Java客户端：Spring Data Redis"></a>Redis的Java客户端：Spring Data Redis</h3><p>Spring Data Redis 是 Spring 的一部分，提供了在 Spring 应用中通过简单的配置就可以访问 Redis 服务，对 Redis 底层开发包进行了高度封装。在 Spring 项目中，可以使用Spring Data Redis来简化 Redis 操作。</p>
<p>Spring Boot提供了对应的Starter，maven坐标：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Spring Data Redis中提供了一个高度封装的类：<strong>RedisTemplate</strong>，对相关api进行了归类封装,将同一类型操作封装为operation接口，具体分类如下：</p>
<ul>
<li>ValueOperations：string数据操作</li>
<li>SetOperations：set类型数据操作</li>
<li>ZSetOperations：zset类型数据操作</li>
<li>HashOperations：hash类型的数据操作</li>
<li>ListOperations：list类型的数据操作</li>
</ul>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>进入到sky-server模块</p>
<p><strong>1). 导入Spring Data Redis的maven坐标</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>2). 配置Redis数据源</strong></p>
<p>在application-dev.yml中添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sky:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p><strong>解释说明：</strong></p>
<p>database:指定使用Redis的哪个数据库，Redis服务启动后默认有16个数据库，编号分别是从0到15。</p>
<p>可以通过修改Redis配置文件来指定数据库的数量。</p>
<p>在application.yml中添加读取application-dev.yml中的相关Redis配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">$&#123;sky.redis.host&#125;</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">$&#123;sky.redis.port&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;sky.redis.password&#125;</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">$&#123;sky.redis.database&#125;</span></span><br></pre></td></tr></table></figure>



<p><strong>3). 编写配置类，创建RedisTemplate对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始创建RedisTemplate模板对象...&quot;</span>);</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Key序列化器（String类型，避免Key乱码）</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// Value序列化器（JSON格式，支持对象、集合等复杂类型，且可读性好）</span></span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// Hash结构的Key序列化器</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// Hash结构的Value序列化器</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        </span><br><span class="line">        redisTemplate.afterPropertiesSet(); <span class="comment">// 初始化RedisTemplate</span></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>解释说明：</strong></p>
<p>当前配置类不是必须的，因为 <strong>Spring Boot 框架会自动装配 RedisTemplate 对象</strong>，但是<strong>默认的key序列化器为</strong></p>
<p><strong>JdkSerializationRedisSerializer</strong>，导致我们<strong>存到Redis中后的数据和原始数据有差别</strong>，故<strong>设置为</strong></p>
<p><strong>StringRedisSerializer序列化器。</strong></p>
<p><strong>注：</strong></p>
<ul>
<li><p><code>RedisTemplate</code>是<strong>泛型类</strong>（<code>RedisTemplate&lt;K, V&gt;</code>），若未指定泛型类型（如<code>&lt;String, Object&gt;</code>），编译器会因 “原始类型使用”“未检查调用” 报警告。这些警告虽不影响运行，但会降低代码规范性，且可能隐藏潜在类型转换问题。</p>
</li>
<li><p>**解决方法：**修改<code>RedisConfiguration</code>类中的<code>redisTemplate</code>方法，指定泛型为<code>&lt;String, Object&gt;</code>（Redis 的 Key 通常为 String，Value 为任意对象），并完善序列化器配置（避免 Redis 存储数据时出现乱码）。</p>
</li>
<li><p>泛型<code>&lt;String, Object&gt;</code>的指定，消除了 “原始类型使用”“未检查调用” 的警告。</p>
</li>
<li><p>完善的序列化器配置（<code>StringRedisSerializer</code>+<code>GenericJackson2JsonRedisSerializer</code>），确保 Redis 中 Key、Value 的存储格式清晰（避免乱码），且支持对象、集合等复杂类型的序列化 &#x2F; 反序列化。</p>
</li>
</ul>
<p><strong>4). 通过RedisTemplate对象操作Redis</strong></p>
<p>在test下新建测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringDataRedisTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedisTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(redisTemplate);</span><br><span class="line">        <span class="comment">//string数据操作</span></span><br><span class="line">        <span class="type">ValueOperations</span> <span class="variable">valueOperations</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line">        <span class="comment">//hash类型的数据操作</span></span><br><span class="line">        <span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line">        <span class="comment">//list类型的数据操作</span></span><br><span class="line">        <span class="type">ListOperations</span> <span class="variable">listOperations</span> <span class="operator">=</span> redisTemplate.opsForList();</span><br><span class="line">        <span class="comment">//set类型数据操作</span></span><br><span class="line">        <span class="type">SetOperations</span> <span class="variable">setOperations</span> <span class="operator">=</span> redisTemplate.opsForSet();</span><br><span class="line">        <span class="comment">//zset类型数据操作</span></span><br><span class="line">        <span class="type">ZSetOperations</span> <span class="variable">zSetOperations</span> <span class="operator">=</span> redisTemplate.opsForZSet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p><img src="/2025/10/14/sky-takeout-day05-note/image-20251014181653327.png" alt="image-20251014181653327"></p>
<p>说明RedisTemplate对象注入成功，并且通过该RedisTemplate对象获取操作5种数据类型相关对象。</p>
<h3 id="操作常见类型数据"><a href="#操作常见类型数据" class="headerlink" title="操作常见类型数据"></a>操作常见类型数据</h3><p><strong>1). 操作字符串类型数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作字符串类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">// set get setex setnx</span></span><br><span class="line">       redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">city</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">       System.out.println(city);</span><br><span class="line">       redisTemplate.opsForValue().set(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;1234&quot;</span>,<span class="number">3</span>, TimeUnit.MINUTES);</span><br><span class="line">       redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<p><strong>2). 操作哈希类型数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作哈希类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//hset hget hdel hkeys hvals</span></span><br><span class="line">       <span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line"></span><br><span class="line">       hashOperations.put(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">       hashOperations.put(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;20&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) hashOperations.get(<span class="string">&quot;100&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">       System.out.println(name);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> hashOperations.keys(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">       System.out.println(keys);</span><br><span class="line"></span><br><span class="line">       <span class="type">List</span> <span class="variable">values</span> <span class="operator">=</span> hashOperations.values(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">       System.out.println(values);</span><br><span class="line"></span><br><span class="line">       hashOperations.delete(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;age&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<p><strong>3). 操作列表类型数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作列表类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//lpush lrange rpop llen</span></span><br><span class="line">       <span class="type">ListOperations</span> <span class="variable">listOperations</span> <span class="operator">=</span> redisTemplate.opsForList();</span><br><span class="line"></span><br><span class="line">       listOperations.leftPushAll(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">       listOperations.leftPush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">List</span> <span class="variable">mylist</span> <span class="operator">=</span> listOperations.range(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">       System.out.println(mylist);</span><br><span class="line"></span><br><span class="line">       listOperations.rightPop(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> listOperations.size(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">       System.out.println(size);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<p><strong>4). 操作集合类型数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作集合类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//sadd smembers scard sinter sunion srem</span></span><br><span class="line">       <span class="type">SetOperations</span> <span class="variable">setOperations</span> <span class="operator">=</span> redisTemplate.opsForSet();</span><br><span class="line"></span><br><span class="line">       setOperations.add(<span class="string">&quot;set1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line">       setOperations.add(<span class="string">&quot;set2&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">members</span> <span class="operator">=</span> setOperations.members(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line">       System.out.println(members);</span><br><span class="line"></span><br><span class="line">       <span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> setOperations.size(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line">       System.out.println(size);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">intersect</span> <span class="operator">=</span> setOperations.intersect(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>);</span><br><span class="line">       System.out.println(intersect);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">union</span> <span class="operator">=</span> setOperations.union(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>);</span><br><span class="line">       System.out.println(union);</span><br><span class="line"></span><br><span class="line">       setOperations.remove(<span class="string">&quot;set1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<p><strong>5). 操作有序集合类型数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作有序集合类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testZset</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//zadd zrange zincrby zrem</span></span><br><span class="line">       <span class="type">ZSetOperations</span> <span class="variable">zSetOperations</span> <span class="operator">=</span> redisTemplate.opsForZSet();</span><br><span class="line"></span><br><span class="line">       zSetOperations.add(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="number">10</span>);</span><br><span class="line">       zSetOperations.add(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">12</span>);</span><br><span class="line">       zSetOperations.add(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">zset1</span> <span class="operator">=</span> zSetOperations.range(<span class="string">&quot;zset1&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">       System.out.println(zset1);</span><br><span class="line"></span><br><span class="line">       zSetOperations.incrementScore(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">       zSetOperations.remove(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<p><strong>6). 通用命令操作</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 通用命令操作</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCommon</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//keys exists type del</span></span><br><span class="line">       <span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> redisTemplate.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">       System.out.println(keys);</span><br><span class="line"></span><br><span class="line">       <span class="type">Boolean</span> <span class="variable">name</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">       <span class="type">Boolean</span> <span class="variable">set1</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (Object key : keys) &#123;</span><br><span class="line">           <span class="type">DataType</span> <span class="variable">type</span> <span class="operator">=</span> redisTemplate.type(key);</span><br><span class="line">           System.out.println(type.name());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       redisTemplate.delete(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>





<h2 id="店铺营业状态设置"><a href="#店铺营业状态设置" class="headerlink" title="店铺营业状态设置"></a>店铺营业状态设置</h2><h3 id="需求分析与接口设计"><a href="#需求分析与接口设计" class="headerlink" title="需求分析与接口设计"></a>需求分析与接口设计</h3><ul>
<li>进到苍穹外卖后台，显示餐厅的营业状态，营业状态分为<strong>营业中</strong>和<strong>打烊中</strong>，若当前餐厅处于营业状态，自动接收任何订单，客户可在小程序进行下单操作；若当前餐厅处于打烊状态，不接受任何订单，客户便无法在小程序进行下单操作。</li>
</ul>
<p><strong>产品原型：</strong><br><img src="/2025/10/14/sky-takeout-day05-note/image-20251014181952632.png" alt="image-20251014181952632" style="zoom: 50%;"></p>
<p><strong>接口设计：</strong></p>
<ul>
<li>设置营业状态</li>
<li>管理端查询营业状态</li>
<li>用户端查询营业状态</li>
</ul>
<p>**注：**从技术层面分析，其实管理端和用户端查询营业状态时，可通过一个接口去实现即可。因为营业状态是一致的。但是，本项目约定：</p>
<ul>
<li><strong>管理端</strong>发出的请求，统一使用&#x2F;admin作为前缀。</li>
<li><strong>用户端</strong>发出的请求，统一使用&#x2F;user作为前缀。</li>
</ul>
<p>因为访问路径不一致，故分为两个接口实现。</p>
<p><strong>1). 设置营业状态</strong><br><img src="/2025/10/14/sky-takeout-day05-note/image-20251014182121927.png" alt="image-20251014182121927" style="zoom:50%;"></p>
<p><strong>2). 管理端营业状态</strong><br><img src="/2025/10/14/sky-takeout-day05-note/image-20251014182128446.png" alt="image-20251014182128446" style="zoom:50%;"></p>
<p><strong>3). 用户端营业状态</strong><br><img src="/2025/10/14/sky-takeout-day05-note/image-20251014182134665.png" alt="image-20251014182134665" style="zoom:50%;"></p>
<p><strong>营业状态存储方式</strong></p>
<p>虽然，可以通过一张表来存储营业状态数据，但整个表中只有一个字段，所以意义不大。</p>
<p>营业状态数据存储方式：基于Redis的字符串来进行存储。**约定：**1表示营业 0表示打烊。<br><img src="/2025/10/14/sky-takeout-day05-note/image-20251014182318284.png" alt="image-20251014182318284"></p>
<h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p><strong>admin&#x2F;ShopController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.controller.admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sky.result.Result;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController(&quot;adminShopController&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;admin/shop&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;管理端-商铺相关接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">KEY</span> <span class="operator">=</span> <span class="string">&quot;SHOP_STATUS_&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置店铺营业状态</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status 店铺状态 0-打烊 1-营业</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;设置店铺营业状态&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Void&gt; <span class="title function_">setStatus</span><span class="params">(<span class="meta">@PathVariable</span> Integer status)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;设置店铺营业状态：&#123;&#125;&quot;</span>, (status == <span class="number">1</span> ? <span class="string">&quot;营业&quot;</span> : <span class="string">&quot;打烊&quot;</span>));</span><br><span class="line">        <span class="comment">// 将店铺状态存入 Redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(KEY, status);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取店铺营业状态</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 店铺状态 0-打烊 1-营业</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取店铺营业状态&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/status&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Integer&gt; <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> (Integer) redisTemplate.opsForValue().get(KEY);</span><br><span class="line">        log.info(<span class="string">&quot;获取店铺营业状态：&#123;&#125;&quot;</span>, (status != <span class="literal">null</span> &amp;&amp; status == <span class="number">1</span> ? <span class="string">&quot;营业&quot;</span> : <span class="string">&quot;打烊&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> Result.success(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>user&#x2F;ShopController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.controller.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sky.result.Result;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user/shop&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户端-商铺相关接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY</span> <span class="operator">=</span> <span class="string">&quot;SHOP_STATUS_&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取店铺营业状态</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 店铺状态 0-打烊 1-营业</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/status&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取店铺营业状态&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Integer&gt; <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> (Integer) redisTemplate.opsForValue().get(KEY);</span><br><span class="line">        log.info(<span class="string">&quot;获取店铺营业状态：&#123;&#125;&quot;</span>, (status != <span class="literal">null</span> &amp;&amp; status == <span class="number">1</span> ? <span class="string">&quot;营业&quot;</span> : <span class="string">&quot;打烊&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> Result.success(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h3><p><strong>注意！：</strong> 测试时记得要把Redis服务开启，否则连接不到Redis，数据都存不了，更别谈测试了。</p>
<p>在接口文档测试中，管理端和用户端的接口放在一起，不方便区分。</p>
<p>接下来，我们要实现管理端和用户端接口进行区分。</p>
<p>在WebMvcConfiguration.java中，分别扫描”com.sky.controller.admin”和”com.sky.controller.user”这两个包。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Docket <span class="title function_">docket1</span><span class="params">()</span>&#123;</span><br><span class="line">       log.info(<span class="string">&quot;准备生成接口文档...&quot;</span>);</span><br><span class="line">       <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">               .title(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">               .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">               .description(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">       <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">               .groupName(<span class="string">&quot;管理端接口&quot;</span>)</span><br><span class="line">               .apiInfo(apiInfo)</span><br><span class="line">               .select()</span><br><span class="line">               <span class="comment">//指定生成接口需要扫描的包</span></span><br><span class="line">               .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sky.controller.admin&quot;</span>))</span><br><span class="line">               .paths(PathSelectors.any())</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> docket;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Docket <span class="title function_">docket2</span><span class="params">()</span>&#123;</span><br><span class="line">       log.info(<span class="string">&quot;准备生成接口文档...&quot;</span>);</span><br><span class="line">       <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">               .title(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">               .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">               .description(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">       <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">               .groupName(<span class="string">&quot;用户端接口&quot;</span>)</span><br><span class="line">               .apiInfo(apiInfo)</span><br><span class="line">               .select()</span><br><span class="line">               <span class="comment">//指定生成接口需要扫描的包</span></span><br><span class="line">               .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sky.controller.user&quot;</span>))</span><br><span class="line">               .paths(PathSelectors.any())</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> docket;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>重启服务器，再次访问接口文档，可进行选择<strong>用户端接口</strong>或者<strong>管理端接口</strong><br><img src="/2025/10/14/sky-takeout-day05-note/image-20251014182641746.png" alt="image-20251014182641746" style="zoom:50%;"></p>
<p>设置状态测试：</p>
<p><img src="/2025/10/14/sky-takeout-day05-note/image-20251014192349262.png" alt="image-20251014192349262"></p>
<p>获取状态测试：<br><img src="/2025/10/14/sky-takeout-day05-note/image-20251014192442953.png" alt="image-20251014192442953"></p>
<p>日志查看<br><img src="/2025/10/14/sky-takeout-day05-note/image-20251014192518244.png" alt="image-20251014192518244"></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/09/20/hello-world/</url>
    <content><![CDATA[<p>This is my first blog. </p>
<p>Share my programming learning journey and life insights here.</p>
<p><img src="/2025/09/20/hello-world/1.jpg" alt="hello-world"></p>
]]></content>
  </entry>
  <entry>
    <title>sky-takeout-day06-note</title>
    <url>/2025/10/15/sky-takeout-day06-note/</url>
    <content><![CDATA[<h1 id="Sky-takeout-Day06"><a href="#Sky-takeout-Day06" class="headerlink" title="Sky-takeout  Day06"></a>Sky-takeout  Day06</h1><hr>
<blockquote>
<p>【前言】</p>
<p>Day06 的 Task ：首先是初步了解 HttpClient 的作用，并通过一个简单入门案例了解应用场景；然后介绍微信小程序开发，做好准备工作后再通过案例了解微信小程序的实际开发流程；最后是动手开发微信登录功能并导入商品浏览功能。</p>
</blockquote>
<span id="more"></span>

<h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ul>
<li><p>HttpClient</p>
</li>
<li><p>微信小程序开发</p>
</li>
<li><p>微信登录</p>
</li>
<li><p>导入商品浏览功能代码</p>
</li>
</ul>
<h2 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h2><ol>
<li><p><strong>介绍：</strong></p>
<p> HttpClient 是Apache Jakarta Common 下的子项目，可以用来提供高效的、最新的、功能丰富的支持 HTTP 协议的客户端编程工具包，并且它支持 HTTP 协议最新的版本和建议。</p>
</li>
<li><p><strong>HttpClient作用：</strong></p>
</li>
</ol>
<ul>
<li>发送HTTP请求</li>
<li>接收响应数据</li>
</ul>
<ol start="3">
<li><p><strong>HttpClient应用场景：</strong></p>
<p> 当我们在使用扫描支付、查看地图、获取验证码、查看天气等功能时，其实，应用程序本身并未实现这些功能，都是在应用程序里访问提供这些功能的服务，访问这些服务需要发送HTTP请求，并且接收响应数据，可通过HttpClient来实现。</p>
</li>
<li><p><strong>HttpClient的maven坐标：</strong></p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>HttpClient的核心API：</strong></li>
</ol>
<ul>
<li>HttpClient：Http客户端对象类型，使用该类型对象可发起Http请求。</li>
<li>HttpClients：可认为是构建器，可创建HttpClient对象。</li>
<li>CloseableHttpClient：实现类，实现了HttpClient接口。</li>
<li>HttpGet：Get方式请求类型。</li>
<li>HttpPost：Post方式请求类型。</li>
</ul>
<ol start="6">
<li><strong>HttpClient发送请求步骤：</strong></li>
</ol>
<ul>
<li>创建HttpClient对象</li>
<li>创建Http请求对象</li>
<li>调用HttpClient的execute方法发送请求</li>
</ul>
<ol start="7">
<li><strong>入门案例</strong></li>
</ol>
<p>正常来说，首先，应该导入HttpClient相关的坐标，但在项目中，就算不导入，也可以使用相关的API。</p>
<p>因为在项目中已经引入了aliyun-sdk-oss坐标：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述依赖的底层已经包含了HttpClient相关依赖。<br><img src="/2025/10/15/sky-takeout-day06-note/image-20251014202838122.png" alt="image-20251014202838122" style="zoom:33%;"></p>
<ul>
<li><strong>GET方式请求</strong></li>
</ul>
<p><strong>实现步骤：</strong></p>
<ol>
<li>创建HttpClient对象</li>
<li>创建请求对象</li>
<li>发送请求，接受响应结果</li>
<li>解析结果</li>
<li>关闭资源</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试通过httpclient发送GET方式的请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGET</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//创建httpclient对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建请求对象</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://localhost:8080/user/shop/status&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送请求，接受响应结果</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取服务端返回的状态码</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端返回的状态码为：&quot;</span> + statusCode);</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> EntityUtils.toString(entity);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端返回的数据为：&quot;</span> + body);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        response.close();</span><br><span class="line">        httpClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在访问<a href="http://localhost:8080/user/shop/status%E8%AF%B7%E6%B1%82%E6%97%B6%EF%BC%8C%E9%9C%80%E8%A6%81%E6%8F%90%E5%89%8D%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE%E3%80%82">http://localhost:8080/user/shop/status请求时，需要提前启动项目。</a></p>
<ul>
<li><strong>POST方式请求</strong></li>
</ul>
<p>在HttpClientTest中添加POST方式请求方法，相比GET请求来说，POST请求若携带参数需要封装请求体对象，并将该对象设置在请求对象中。</p>
<p><strong>实现步骤：</strong></p>
<ol>
<li>创建HttpClient对象</li>
<li>创建请求对象</li>
<li>发送请求，接收响应结果</li>
<li>解析响应结果</li>
<li>关闭资源</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 测试通过httpclient发送POST方式的请求</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPOST</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">       <span class="comment">// 创建httpclient对象</span></span><br><span class="line">       <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//创建请求对象</span></span><br><span class="line">       <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;http://localhost:8080/admin/employee/login&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">       jsonObject.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">       jsonObject.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(jsonObject.toString());</span><br><span class="line">       <span class="comment">//指定请求编码方式</span></span><br><span class="line">       entity.setContentEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">       <span class="comment">//数据格式</span></span><br><span class="line">       entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">       httpPost.setEntity(entity);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//发送请求</span></span><br><span class="line">       <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//解析返回结果</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">       System.out.println(<span class="string">&quot;响应码为：&quot;</span> + statusCode);</span><br><span class="line"></span><br><span class="line">       <span class="type">HttpEntity</span> <span class="variable">entity1</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">       <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> EntityUtils.toString(entity1);</span><br><span class="line">       System.out.println(<span class="string">&quot;响应数据为：&quot;</span> + body);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//关闭资源</span></span><br><span class="line">       response.close();</span><br><span class="line">       httpClient.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h2 id="微信小程序开发"><a href="#微信小程序开发" class="headerlink" title="微信小程序开发"></a>微信小程序开发</h2><blockquote>
<p>具体介绍和注册小程序等准备工作这里就不放了，具体可以看课程或者讲义来大致了解一下，下面只讲一下小程序的结构。</p>
</blockquote>
<p>实际上，小程序的开发本质上属于前端开发，主要使用JavaScript开发</p>
<p><strong>小程序目录结构：</strong></p>
<p>小程序包含一个描述整体程序的 app 和多个描述各自页面的 page。一个小程序主体部分由三个文件组成，必须放在项目的根目录，如下：<br><img src="/2025/10/15/sky-takeout-day06-note/image-20251014203656810.png" alt="image-20251014203656810"></p>
<p><strong>文件说明：</strong><br><img src="/2025/10/15/sky-takeout-day06-note/image-20251014203718477.png" alt="image-20251014203718477" style="zoom:50%;"></p>
<p>**app.js：**必须存在，主要存放小程序的逻辑代码</p>
<p>**app.json：**必须存在，小程序配置文件，主要存放小程序的公共配置</p>
<p><strong>app.wxss:</strong>  非必须存在，主要存放小程序公共样式表，类似于前端的CSS样式</p>
<p>对小程序主体三个文件了解后，其实一个小程序又有多个页面。比如说，有商品浏览页面、购物车的页面、订单支付的页面、商品的详情页面等等。那这些页面会放在哪呢？</p>
<p><strong>小程序页面：</strong></p>
<p>会存放在pages目录，每个<strong>小程序页面</strong>主要由四个文件组成：<br><img src="/2025/10/15/sky-takeout-day06-note/image-20251014203811617.png" alt="image-20251014203811617"></p>
<p><strong>文件说明：</strong><br><img src="/2025/10/15/sky-takeout-day06-note/image-20251014203833117.png" alt="image-20251014203833117" style="zoom:50%;"></p>
<p>**js文件：**必须存在，存放页面业务逻辑代码，编写的js代码。</p>
<p>**wxml文件：**必须存在，存放页面结构，主要是做页面布局，页面效果展示的11，类似于HTML页面。</p>
<p>**json文件：**非必须，存放页面相关的配置。</p>
<p>**wxss文件：**非必须，存放页面样式表，相当于CSS文件。</p>
<h2 id="微信登录"><a href="#微信登录" class="headerlink" title="微信登录"></a>微信登录</h2><h3 id="分析与设计"><a href="#分析与设计" class="headerlink" title="分析与设计"></a>分析与设计</h3><p><strong>原型分析：</strong></p>
<p>​	用户进入到小程序的时候，微信授权登录之后才能点餐。需要获取当前微信用户的相关信息，比如昵称、头像等，这样才能够进入到小程序进行下单操作。是基于微信登录来实现小程序的登录功能，没有采用传统账户密码登录的方式。若第一次使用小程序来点餐，就是一个新用户，需要把这个新的用户保存到数据库当中完成自动注册。</p>
<p><strong>业务规则：</strong></p>
<ul>
<li>基于微信登录实现小程序的登录功能</li>
<li>如果是新用户需要自动完成注册</li>
</ul>
<p><strong>接口设计：</strong></p>
<p>通过微信登录的流程，如果要完成微信登录的话，最终就要获得微信用户的openid。在小程序端获取授权码后，向后端服务发送请求，并携带授权码，这样后端服务在收到授权码后，就可以去请求微信接口服务。最终，后端向小程序返回openid和token等数据。</p>
<p>基于上述的登录流程，就可以设计出该接口的<strong>请求参数</strong>和<strong>返回数据</strong>。</p>
<p>**说明：**请求路径&#x2F;user&#x2F;user&#x2F;login,第一个user代表用户端，第二个user代表用户模块。<br><img src="/2025/10/15/sky-takeout-day06-note/image-20251014230151767.png" alt="image-20251014230151767"></p>
<p><strong>表设计：</strong></p>
<p>当用户第一次使用小程序时，会完成自动注册，把用户信息存储到<strong>user</strong>表中。</p>
<table>
<thead>
<tr>
<th><strong>字段名</strong></th>
<th><strong>数据类型</strong></th>
<th><strong>说明</strong></th>
<th><strong>备注</strong></th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td>主键</td>
<td>自增</td>
</tr>
<tr>
<td>openid</td>
<td>varchar(45)</td>
<td>微信用户的唯一标识</td>
<td></td>
</tr>
<tr>
<td>name</td>
<td>varchar(32)</td>
<td>用户姓名</td>
<td></td>
</tr>
<tr>
<td>phone</td>
<td>varchar(11)</td>
<td>手机号</td>
<td></td>
</tr>
<tr>
<td>sex</td>
<td>varchar(2)</td>
<td>性别</td>
<td></td>
</tr>
<tr>
<td>id_number</td>
<td>varchar(18)</td>
<td>身份证号</td>
<td></td>
</tr>
<tr>
<td>avatar</td>
<td>varchar(500)</td>
<td>微信用户头像路径</td>
<td></td>
</tr>
<tr>
<td>create_time</td>
<td>datetime</td>
<td>注册时间</td>
<td></td>
</tr>
</tbody></table>
<p>**说明：**手机号字段比较特殊，个人身份注册的小程序没有权限获取到微信用户的手机号。如果是以企业的资质<br>注册的小程序就能够拿到微信用户的手机号。</p>
<h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><h4 id="定义相关配置"><a href="#定义相关配置" class="headerlink" title="定义相关配置"></a>定义相关配置</h4><p><strong>配置微信登录所需配置项：</strong></p>
<p>application-dev.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sky:</span></span><br><span class="line">  <span class="attr">wechat:</span></span><br><span class="line">    <span class="attr">appid:</span> <span class="string">*****(你注册的appid)</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="string">*****(你注册的密钥)</span></span><br></pre></td></tr></table></figure>

<p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sky:</span></span><br><span class="line">  <span class="attr">wechat:</span></span><br><span class="line">    <span class="attr">appid:</span> <span class="string">$&#123;sky.wechat.appid&#125;</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="string">$&#123;sky.wechat.secret&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>配置为微信用户生成jwt令牌时使用的配置项：</strong></p>
<p>application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sky:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="comment"># 设置jwt签名加密时使用的秘钥</span></span><br><span class="line">    <span class="attr">admin-secret-key:</span> <span class="string">itcast</span></span><br><span class="line">    <span class="comment"># 设置jwt过期时间</span></span><br><span class="line">    <span class="attr">admin-ttl:</span> <span class="number">7200000</span></span><br><span class="line">    <span class="comment"># 设置前端传递过来的令牌名称</span></span><br><span class="line">    <span class="attr">admin-token-name:</span> <span class="string">token</span></span><br><span class="line">    <span class="attr">user-secret-key:</span> <span class="string">itheima</span></span><br><span class="line">    <span class="attr">user-ttl:</span> <span class="number">7200000</span></span><br><span class="line">    <span class="attr">user-token-name:</span> <span class="string">authentication</span></span><br></pre></td></tr></table></figure>



<h4 id="DTO、VO以及三层架构"><a href="#DTO、VO以及三层架构" class="headerlink" title="DTO、VO以及三层架构"></a>DTO、VO以及三层架构</h4><p><strong>根据传入参数设计DTO类：</strong><br><img src="/2025/10/15/sky-takeout-day06-note/image-20251015084154614.png" alt="image-20251015084154614" style="zoom:50%;"></p>
<p>在sky-pojo模块，UserLoginDTO.java已定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * C端用户登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLoginDTO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>根据返回数据设计VO类：</strong><br><img src="/2025/10/15/sky-takeout-day06-note/image-20251014232329374.png" alt="image-20251014232329374" style="zoom:50%;"></p>
<p>在sky-pojo模块，UserLoginVO.java已定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLoginVO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String openid;</span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>UserController.java</strong>：实现 装配 JWT 令牌和 openid 和用户id 返回给前端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.controller.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sky.constant.JwtClaimsConstant;</span><br><span class="line"><span class="keyword">import</span> com.sky.dto.UserLoginDTO;</span><br><span class="line"><span class="keyword">import</span> com.sky.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sky.properties.JwtProperties;</span><br><span class="line"><span class="keyword">import</span> com.sky.result.Result;</span><br><span class="line"><span class="keyword">import</span> com.sky.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.sky.utils.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> com.sky.vo.UserLoginVO;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/user&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;C端用户相关接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties jwtProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;用户微信登录&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;UserLoginVO&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> UserLoginDTO userLoginDTO)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;用户微信登录：&#123;&#125;&quot;</span>, userLoginDTO.getCode());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.wxlogin(userLoginDTO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上面 user 从数据库中获得了 用于微信登录的 openid 和用户主键 id</span></span><br><span class="line">        <span class="comment">// 下面再创建一个 Jwt 令牌，然后封装成 UserLoginVO返回给前端</span></span><br><span class="line">        Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 这里能获取id，因为再数据库层用了useGeneratedKeys, 并将id绑定再实体类的id属性</span></span><br><span class="line">        claims.put(JwtClaimsConstant.USER_ID, user.getId());</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.createJWT(jwtProperties.getUserSecretKey(), jwtProperties.getUserTtl(), claims);</span><br><span class="line">        <span class="type">UserLoginVO</span> <span class="variable">userLoginVO</span> <span class="operator">=</span> UserLoginVO.builder()</span><br><span class="line">                                            .id(user.getId())</span><br><span class="line">                                            .openid(user.getOpenid())</span><br><span class="line">                                            .token(token)</span><br><span class="line">                                            .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.success(userLoginVO);  <span class="comment">// 将封装好的VO返回</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>UserServiceImpl.java</strong> : 实现获取微信用户的openid和微信登录功能，若是新用户直接注册</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.sky.constant.MessageConstant;</span><br><span class="line"><span class="keyword">import</span> com.sky.dto.UserLoginDTO;</span><br><span class="line"><span class="keyword">import</span> com.sky.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sky.exception.LoginFailedException;</span><br><span class="line"><span class="keyword">import</span> com.sky.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.sky.properties.WeChatProperties;</span><br><span class="line"><span class="keyword">import</span> com.sky.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.sky.utils.HttpClientUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 微信接口服务地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WX_LOGIN</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/sns/jscode2session&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WeChatProperties weChatProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户微信登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userLoginDTO 用户登录信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">wxlogin</span><span class="params">(UserLoginDTO userLoginDTO)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据微信授权码 code (在入参DTO传来的)获取用户唯一标识 openid</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">openid</span> <span class="operator">=</span> getOpenid(userLoginDTO.getCode());</span><br><span class="line">        <span class="comment">// openid为空则抛出业务异常</span></span><br><span class="line">        <span class="keyword">if</span>(openid == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LoginFailedException</span>(MessageConstant.LOGIN_FAILED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getByOpenid(openid);</span><br><span class="line">        <span class="comment">// 判断用户信息是否存在数据库中，不存在说明是新用户，则进行注册 即插入用户信息</span></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 先将用户信息填充好，然后插入数据库</span></span><br><span class="line">            user = User.builder()</span><br><span class="line">                    .openid(openid)</span><br><span class="line">                    .createTime(LocalDateTime.now())</span><br><span class="line">                    .build();</span><br><span class="line">            userMapper.insert(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user; <span class="comment">// 返回用户信息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用微信接口服务，获取用户的openid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 用户登录信息中的微信授权码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> openid 字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 利用 httpclient 工具类向微信接口服务发起请求，以获取用户唯一标识 openid</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getOpenid</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;appid&quot;</span>, weChatProperties.getAppid());</span><br><span class="line">        map.put(<span class="string">&quot;secret&quot;</span>, weChatProperties.getSecret());</span><br><span class="line">        map.put(<span class="string">&quot;js_code&quot;</span>, code);</span><br><span class="line">        map.put(<span class="string">&quot;grant_type&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> HttpClientUtil.doGet(WX_LOGIN, map);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSON.parseObject(json);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jsonObject.getString(<span class="string">&quot;openid&quot;</span>); <span class="comment">// 将微信接口服务返回的json中的openid值返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>UserMapper.java</strong>：根据openid查询用户是否存在以及实现插入，用于 Service 层判断该用户是否要注册，新用户就往表插入数据代表注册</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sky.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 openid 查询用户信息， 存在即可登录，不存在则要注册，后续 insert 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> openid 微信用户唯一标识 openid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where openid = #&#123;openid&#125;;&quot;)</span></span><br><span class="line">    User <span class="title function_">getByOpenid</span><span class="params">(String openid)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入用户信息， 即新用户进行注册操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>UserMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sky.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into user (openid, name, phone, sex, id_number, avatar, create_time)</span><br><span class="line">        values</span><br><span class="line">        (#&#123;openid&#125;, #&#123;name&#125;, #&#123;phone&#125;, #&#123;sex&#125;, #&#123;idNumber&#125;, #&#123;avatar&#125;, #&#123;createTime&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h4><p>**编写拦截器JwtTokenUserInterceptor：**统一拦截用户端发送的请求并进行jwt校验</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sky.constant.JwtClaimsConstant;</span><br><span class="line"><span class="keyword">import</span> com.sky.context.BaseContext;</span><br><span class="line"><span class="keyword">import</span> com.sky.properties.JwtProperties;</span><br><span class="line"><span class="keyword">import</span> com.sky.utils.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户端JWT令牌拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtTokenUserInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties jwtProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验jwt， 在目标方法执行之前执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler 处理器（controller方法）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true：放行，继续执行后续操作；false：拦截，不继续执行后续操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//判断当前拦截到的是Controller的方法还是其他资源</span></span><br><span class="line">        <span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod)) &#123;</span><br><span class="line">            <span class="comment">//当前拦截到的不是动态方法，直接放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、从请求头中获取令牌</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(jwtProperties.getUserTokenName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、校验令牌</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;jwt校验:&#123;&#125;&quot;</span>, token);</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(jwtProperties.getUserSecretKey(), token);</span><br><span class="line">            <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> Long.valueOf(claims.get(JwtClaimsConstant.USER_ID).toString());</span><br><span class="line">            log.info(<span class="string">&quot;当前用户的id：&#123;&#125;&quot;</span>, userId);</span><br><span class="line">            BaseContext.setCurrentId(userId);</span><br><span class="line">            <span class="comment">//3、通过，放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="comment">//4、不通过，响应 401 状态码</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>在WebMvcConfiguration配置类中注册拦截器：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenUserInterceptor jwtTokenUserInterceptor;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册自定义拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始注册自定义拦截器...&quot;</span>);</span><br><span class="line">        <span class="comment">//.........</span></span><br><span class="line"></span><br><span class="line">        registry.addInterceptor(jwtTokenUserInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/user/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/user/login&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/shop/status&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h3><p>微信发送授权码 code 给服务端 Controller</p>
<p>Service中根据 code 获取 openid 并判断是否需要注册新用户</p>
<h2 id="导入商品浏览功能代码"><a href="#导入商品浏览功能代码" class="headerlink" title="导入商品浏览功能代码"></a>导入商品浏览功能代码</h2><h3 id="分析与设计-1"><a href="#分析与设计-1" class="headerlink" title="分析与设计"></a>分析与设计</h3><p>根据原型图先<strong>粗粒度</strong>设计接口，共包含4个接口。</p>
<p><strong>接口设计：</strong></p>
<ul>
<li>查询分类</li>
<li>根据分类id查询菜品</li>
<li>根据分类id查询套餐</li>
<li>根据套餐id查询包含的菜品</li>
</ul>
<p>接下来<strong>细粒度</strong>分析每个接口，明确每个接口的请求方式、请求路径、传入参数和返回值。</p>
<p><strong>1). 查询分类</strong><br><img src="/2025/10/15/sky-takeout-day06-note/image-20251015103046044.png" alt="image-20251015103046044" style="zoom:50%;"></p>
<p><strong>2). 根据分类id查询菜品</strong><br><img src="/2025/10/15/sky-takeout-day06-note/image-20251015103217600.png" alt="image-20251015103217600" style="zoom:50%;"></p>
<p><strong>3). 根据分类id查询套餐</strong><br><img src="/2025/10/15/sky-takeout-day06-note/image-20251015103337195.png" alt="image-20251015103337195" style="zoom:50%;"></p>
<p><strong>4). 根据套餐id查询包含的菜品</strong><br><img src="/2025/10/15/sky-takeout-day06-note/image-20251015103351466.png" alt="image-20251015103351466" style="zoom:50%;"></p>
<h3 id="代码导入"><a href="#代码导入" class="headerlink" title="代码导入"></a>代码导入</h3><p>导入资料中的商品浏览功能代码即可可按照mapper–&gt;service–&gt;controller依次导入，这样代码不会显示相应的报错。</p>
<h3 id="功能测试-1"><a href="#功能测试-1" class="headerlink" title="功能测试"></a>功能测试</h3><p><strong>菜品和套餐分类查询：</strong><br><img src="/2025/10/15/sky-takeout-day06-note/image-20251015105411465.png" alt="image-20251015105411465"></p>
<p><strong>具体分类下的菜品查询：</strong><br><img src="/2025/10/15/sky-takeout-day06-note/image-20251015105419948.png" alt="image-20251015105419948"></p>
<p><strong>菜品口味查询：</strong><br><img src="/2025/10/15/sky-takeout-day06-note/image-20251015105426391.png" alt="image-20251015105426391"></p>
<h2 id="附：其他盲区知识补充"><a href="#附：其他盲区知识补充" class="headerlink" title="附：其他盲区知识补充"></a>附：其他盲区知识补充</h2><h3 id="Service注解与Mapper注解"><a href="#Service注解与Mapper注解" class="headerlink" title="Service注解与Mapper注解"></a>Service注解与Mapper注解</h3><p>在 MyBatis 框架中，<code>@Mapper</code>注解之所以加在<strong>Mapper 接口</strong>上，是由其<strong>动态代理的实现机制</strong>决定的，具体可从以下几点分析：</p>
<h4 id="1-MyBatis-的-“接口-代理”-设计逻辑"><a href="#1-MyBatis-的-“接口-代理”-设计逻辑" class="headerlink" title="1. MyBatis 的 “接口 - 代理” 设计逻辑"></a>1. MyBatis 的 “接口 - 代理” 设计逻辑</h4><p>MyBatis 采用 <strong>“接口 + 动态代理”</strong> 的方式工作：</p>
<ul>
<li>我们定义的<code>Mapper接口</code>仅声明 SQL 操作的方法签名（如<code>List&lt;User&gt; selectAll()</code>）。</li>
<li>MyBatis 在运行时，会通过<strong>动态代理技术</strong>，为每个标注<code>@Mapper</code>的接口<strong>自动生成实现类（代理类）</strong>。这个代理类会负责解析 XML 映射文件（或注解式 SQL）、执行 SQL、处理结果映射等核心操作。</li>
</ul>
<p>因此，<code>@Mapper</code>注解加在接口上，是为了告诉 MyBatis：<strong>“需要为这个接口生成代理实现类，以便执行 SQL 操作”</strong>。</p>
<h4 id="2-与-Service的本质区别"><a href="#2-与-Service的本质区别" class="headerlink" title="2. 与@Service的本质区别"></a>2. 与<code>@Service</code>的本质区别</h4><p><code>@Service</code>是 Spring 的注解，用于标记<strong>具体的服务实现类</strong>，目的是让 Spring IoC 容器识别并管理其对象实例（创建对象、依赖注入等）。而<code>@Mapper</code>是 MyBatis 的注解，用于标记<strong>需要生成代理的接口</strong>，目的是让 MyBatis 为接口动态生成 “能执行 SQL 的实现类”。</p>
<p>简单来说：</p>
<ul>
<li><code>@Service</code>针对<strong>具体类</strong>，由 Spring 直接管理实例；</li>
<li><code>@Mapper</code>针对<strong>接口</strong>，由 MyBatis 通过动态代理生成实现类。</li>
</ul>
<h4 id="补充：简化配置的-MapperScan"><a href="#补充：简化配置的-MapperScan" class="headerlink" title="补充：简化配置的@MapperScan"></a>补充：简化配置的<code>@MapperScan</code></h4><p>为了避免在每个 Mapper 接口上重复加<code>@Mapper</code>，还可以在 Spring Boot 的配置类上使用<code>@MapperScan</code>注解，指定 Mapper 接口的扫描包路径，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.mapper&quot;)</span> <span class="comment">// 扫描该包下的所有Mapper接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>综上，<code>@Mapper</code>加在接口上是 MyBatis“接口 + 动态代理” 设计的必然结果，和<code>@Service</code>的使用场景、框架机制存在本质差异。</p>
]]></content>
      <tags>
        <tag>苍穹外卖</tag>
      </tags>
  </entry>
</search>
